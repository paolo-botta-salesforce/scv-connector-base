{"version":3,"sources":["webpack://SCVConnectorBase/webpack/universalModuleDefinition","webpack://SCVConnectorBase/webpack/bootstrap","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/regenerator/index.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/typeof.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/getPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/createClass.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/inherits.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/wrapNativeSuper.js","webpack://SCVConnectorBase/./node_modules/regenerator-runtime/runtime.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/isNativeFunction.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/construct.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js","webpack://SCVConnectorBase/./src/main/constants.js","webpack://SCVConnectorBase/./src/main/logger.js","webpack://SCVConnectorBase/./src/main/downloadData.js","webpack://SCVConnectorBase/./src/main/types.js","webpack://SCVConnectorBase/./src/main/mosUtil.js","webpack://SCVConnectorBase/./src/main/baseConnector.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","instance","Constructor","TypeError","obj","configurable","writable","_typeof","iterator","constructor","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","fn","self","args","arguments","apply","err","undefined","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOf","_defineProperties","target","props","length","descriptor","protoProps","staticProps","subClass","superClass","assertThisInitialized","isNativeFunction","construct","_wrapNativeSuper","Class","_cache","Map","has","set","Wrapper","runtime","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","context","Context","_invoke","state","method","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","invoke","result","__await","unwrapped","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","awrap","async","iter","keys","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","globalThis","Function","ReferenceError","toString","indexOf","isNativeReflectConstruct","_construct","Parent","Reflect","a","sham","Proxy","Boolean","valueOf","e","MESSAGE_TYPE","SETUP_CONNECTOR","CONNECTOR_READY","LOG","TELEPHONY_EVENT_DISPATCHED","ACCEPT_CALL","DECLINE_CALL","END_CALL","MUTE","UNMUTE","HOLD","RESUME","SET_AGENT_STATUS","GET_AGENT_STATUS","DIAL","SEND_DIGITS","GET_PHONE_CONTACTS","SWAP_PARTICIPANTS","ADD_PARTICIPANT","CONFERENCE","PAUSE_RECORDING","RESUME_RECORDING","LOGOUT","MESSAGE","WRAP_UP_CALL","AGENT_AVAILABLE","SET_AGENT_CONFIG","GET_SIGNED_RECORDING_URL","DOWNLOAD_VENDOR_LOGS","SUPERVISE_CALL","SUPERVISOR_BARGE_IN","SUPERVISOR_DISCONNECT","EVENT_TYPE","QUEUED_CALL_STARTED","CALL_STARTED","CALL_CONNECTED","CALL_FAILED","MUTE_TOGGLE","HOLD_TOGGLE","HANGUP","ERROR","WARNING","INFO","PHONE_CONTACTS","PARTICIPANT_ADDED","PARTICIPANT_CONNECTED","PARTICIPANT_REMOVED","LOGIN_STARTED","LOGIN_RESULT","LOGOUT_RESULT","RECORDING_TOGGLE","PARTICIPANTS_SWAPPED","PARTICIPANTS_CONFERENCED","SHOW_LOGIN","SET_AGENT_STATUS_RESULT","GET_AGENT_STATUS_RESULT","WRAP_UP_ENDED","AFTER_CALL_WORK_STARTED","AGENT_CONFIG_UPDATED","AGENT_ERROR","SOFTPHONE_ERROR","SIGNED_RECORDING_URL","UPDATE_AUDIO_STATS","UPDATE_AUDIO_STATS_COMPLETED","SUPERVISOR_BARGED_IN","SUPERVISOR_CALL_STARTED","SUPERVISOR_CALL_CONNECTED","SUPERVISOR_HANGUP","CALL_BARGED_IN","STATE_CHANGE","INFO_TYPE","CAN_NOT_ACCEPT_THE_CALL","ERROR_TYPE","CUSTOM_ERROR","GENERIC_ERROR","MICROPHONE_NOT_SHARED","UNSUPPORTED_BROWSER","AUTHENTICATION_ERROR","INVALID_AGENT_STATUS","CAN_NOT_SET_AGENT_STATUS","LOGIN_REQUIRED","CAN_NOT_DECLINE_THE_CALL","CAN_NOT_END_THE_CALL","CAN_NOT_HOLD_CALL","CAN_NOT_RESUME_CALL","CAN_NOT_MUTE_CALL","CAN_NOT_UNMUTE_CALL","CAN_NOT_TOGGLE_MUTE","CAN_NOT_TOGGLE_HOLD","CAN_NOT_TOGGLE_RECORD","INVALID_PARTICIPANT","CAN_NOT_LOG_IN","CAN_NOT_LOG_OUT","INVALID_PARAMS","CAN_NOT_GET_PHONE_CONTACTS","CAN_NOT_SWAP_PARTICIPANTS","CAN_NOT_CONFERENCE","INVALID_DESTINATION","INVALID_PHONE_NUMBER","CAN_NOT_HANGUP_PARTICIPANT","CAN_NOT_ADD_PARTICIPANT","CAN_NOT_CONNECT_PARTICIPANT","CAN_NOT_START_THE_CALL","CAN_NOT_PAUSE_RECORDING","CAN_NOT_RESUME_RECORDING","CAN_NOT_SET_AGENT_CONFIG","CAN_NOT_SET_CAPABILITIES","CAN_NOT_UPDATE_PHONE_NUMBER","CAN_NOT_GET_SIGNED_RECORDING_URL","CAN_NOT_SUPERVISE_CALL","CAN_NOT_DISCONNECT_SUPERVISOR","CAN_NOT_BARGE_IN_SUPERVISOR","CAN_NOT_BARGE_IN_CALL","CAN_NOT_GET_AGENT_STATUS","INVALID_STATE_CHANGE_RESULT","AGENT_STATUS","ONLINE","OFFLINE","ACW","CALLBACK_MISSED_OR_REJECTED","PARTICIPANT_TYPE","AGENT","INITIAL_CALLER","THIRD_PARTY","SUPERVISOR","CALL_TYPE","INBOUND","OUTBOUND","CALLBACK","TRANSFER","INTERNAL_CALL","DIALER_TYPE","OUTBOUND_PREVIEW","NONE","CONTACT_TYPE","PHONEBOOK","QUEUE","PHONENUMBER","FLOW","AGENT_CONFIG_TYPE","SHOW_AGENT_SETTINGS","PHONES","SELECTED_PHONE","CAPABILITIES_TYPE","RECORD","MERGE","SWAP","DEBUG_ENABLED","CONTACT_SEARCH","VENDOR_PROVIDED_AVAILABILITY","VENDOR_PROVIDED_QUEUE_WAIT_TIME","SUPERVISOR_LISTEN_IN","MOS","BLIND_TRANSFER","TRANSFER_TO_OMNI_FLOW","PENDING_STATUS_CHANGE","CALL_STATE","RINGING","CONNECTED","TRANSFERRING","TRANSFERRED","ENDED","PHONE_TYPE","DESK_PHONE","SOFT_PHONE","HANGUP_REASON","PHONE_CALL_ERROR","PHONE_CALL_ENDED","AGENT_AVAILABILITY","AVAILABLE","BUSY","REMOVE_PARTICIPANT_VARIANT","ALWAYS","NEVER","ALWAYS_EXCEPT_ON_HOLD","LOG_LEVEL","LOG_SOURCE","SYSTEM","PARTNER","CONTACTS_FILTER_TYPES","CONNECTOR_CONFIG_EXPOSED_FIELDS","CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH","CONNECTOR_CONFIG_EXCEPTION_FIELDS","_strify","JSON","stringify","LOGS_SIZE","logs","log","logMessage","logLevel","logSource","constants","logStr","Date","toISOString","join","_log","getLogs","parse","downloadLogs","data","fileName","fileType","document","dataStr","file","Blob","createElement","blobURL","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","downloadData","getTime","audioStatus","channelPort","vendorConnector","isSupervisorConnected","Constants","CustomError","labelName","namespace","message","Validator","validateString","Phone","number","validateEnum","MuteToggleResult","isMuted","ActiveCallsResult","activeCalls","activeCall","validateClassObject","PhoneCall","CapabilitiesResult","hasMute","hasRecord","hasMerge","hasSwap","hasSignedRecordingUrl","debugEnabled","hasContactSearch","hasAgentAvailability","hasQueueWaitTime","supportsMos","hasSupervisorListenIn","hasSupervisorBargeIn","hasBlindTransfer","hasTransferToOmniFlow","hasPendingStatusChange","hasPhoneBook","validateBoolean","AgentConfigResult","phones","selectedPhone","Array","AgentConfig","RecordingToggleResult","isRecordingPaused","contactId","initialContactId","instanceId","region","ParticipantResult","initialCallHasEnded","callInfo","phoneNumber","callId","CallInfo","PhoneContactsResult","contacts","contactTypes","contact","Contact","filterType","CallResult","HangupResult","calls","HoldToggleResult","isThirdPartyOnHold","isCustomerOnHold","SignedRecordingUrlResult","success","url","duration","validateNumber","InitResult","showLogin","loginFrameHeight","GenericResult","LogoutResult","callStateTimestamp","isOnHold","initialCallId","queueId","queueName","queueTimestamp","isSoftphoneCall","acceptEnabled","declineEnabled","muteEnabled","swapEnabled","conferenceEnabled","holdEnabled","recordEnabled","addCallerEnabled","extensionEnabled","isReplayable","isBargeable","isExternalTransfer","showMuteButton","showRecordButton","showAddCallerButton","showAddBlindTransferButton","showMergeButton","showSwapButton","removeParticipantVariant","validateDate","id","prefix","extension","endpointARN","queue","availability","recordId","description","queueWaitTime","PhoneCallAttributes","voiceCallId","participantType","dialerType","parentId","hasSupervisorBargedIn","callType","callAttributes","reason","closeCallOnError","agentStatus","VendorConnector","config","statusInfo","enqueueNextState","logMessageToVendor","digits","call1","call2","recordingUrl","vendorCallKey","payload","enumValues","RegExp","test","className","AgentStatusInfo","statusId","statusApiName","statusName","AgentVendorStatusInfo","statusType","StateChangeResult","newVendorStateInfo","oldVendorStateInfo","SupervisedCallInfo","from","to","supervisorName","isBargedIn","AudioStats","stats","isAudioStatsCompleted","audioStatsElement","AudioStatsElement","inputChannelStats","outputChannelStats","StatsInfo","packetsCount","packetsLost","jitterBufferMillis","roundTripTimeMillis","statsCount","SuperviseCallResult","SupervisorHangupResult","getMOSByStream","streamType","avgStats","getAvgStats","effectiveLatency","R","enableMos","getMOS","inputChannelMOS","ouputChannelMOS","Math","min","initAudioStats","updateAudioStats","statsArray","getErrorType","getErrorMessage","dispatchEventLog","eventType","isError","sanitizedPayload","sanitizePayload","isArray","element","postMessage","dispatchEvent","registerLog","telephonyEventType","telephonyEventPayload","dispatchError","errorType","console","dispatchCustomError","customError","dispatchInfo","setConnectorReady","getAgentConfig","agentConfigResult","getCapabilities","capabilitiesResult","getActiveCalls","activeCallsResult","agentConfig","capabilities","callInProgress","channelMessageHandler","toLowerCase","supervisorDisconnect","hangupPayload","acceptCall","messagetype","additionalInfo","declineCall","endCall","mute","publishEvent","unmute","hold","resume","setAgentStatus","getAgentStatus","dial","sendDigits","getPhoneContacts","filter","map","swap","callToHold","callToResume","conference","addParticipant","isBlindTransfer","pauseRecording","resumeRecording","logout","handleMessage","wrapUpCall","isAvailable","shouldReplay","isSupervisorCall","isReplayedCall","setAgentConfig","getSignedRecordingUrl","signedRecordingUrlResult","superviseCall","supervisorBargeIn","windowMessageHandler","sfDomain","originUrl","origin","protocol","hostname","ports","onmessage","exposedConnectorConfig","connectorConfig","init","window","removeEventListener","prop","startsWith","includes","validatePayload","payloadType","initializeConnector","connector","addEventListener","publishLog","publishError","REMOTE_CONTROLLER","transferCall","mos"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,mBAAoB,GAAIH,GACL,iBAAZC,QACdA,QAA0B,iBAAID,IAE9BD,EAAuB,iBAAIC,IAR7B,CASGK,MAAM,WACT,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUP,QAGnC,IAAIC,EAASI,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHT,QAAS,IAUV,OANAU,EAAQH,GAAUI,KAAKV,EAAOD,QAASC,EAAQA,EAAOD,QAASM,GAG/DL,EAAOQ,GAAI,EAGJR,EAAOD,QA0Df,OArDAM,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASd,EAASe,EAAMC,GAC3CV,EAAoBW,EAAEjB,EAASe,IAClCG,OAAOC,eAAenB,EAASe,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAAStB,GACX,oBAAXuB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAenB,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAenB,EAAS,aAAc,CAAEyB,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAShC,GAChC,IAAIe,EAASf,GAAUA,EAAO2B,WAC7B,WAAwB,OAAO3B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAK,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,I,gBC5ErDtC,EAAOD,QANP,SAAyBwC,EAAUC,GACjC,KAAMD,aAAoBC,GACxB,MAAM,IAAIC,UAAU,sCAKxBzC,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,G,cCQxE3B,EAAOD,QAfP,SAAyB2C,EAAKZ,EAAKN,GAYjC,OAXIM,KAAOY,EACTzB,OAAOC,eAAewB,EAAKZ,EAAK,CAC9BN,MAAOA,EACPL,YAAY,EACZwB,cAAc,EACdC,UAAU,IAGZF,EAAIZ,GAAON,EAGNkB,GAIT1C,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,G,gBChBxE3B,EAAOD,QAAU,EAAQ,K,cCAzB,SAAS8C,EAAQH,GAiBf,MAdsB,mBAAXpB,QAAoD,iBAApBA,OAAOwB,UAChD9C,EAAOD,QAAU8C,EAAU,SAAiBH,GAC1C,cAAcA,GAGhB1C,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,IAExE3B,EAAOD,QAAU8C,EAAU,SAAiBH,GAC1C,OAAOA,GAAyB,mBAAXpB,QAAyBoB,EAAIK,cAAgBzB,QAAUoB,IAAQpB,OAAOa,UAAY,gBAAkBO,GAG3H1C,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,GAGnEkB,EAAQH,GAGjB1C,EAAOD,QAAU8C,EACjB7C,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,G,cCrBxE,SAASqB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQvB,EAAKwB,GACpE,IACE,IAAIC,EAAON,EAAInB,GAAKwB,GAChB9B,EAAQ+B,EAAK/B,MACjB,MAAOgC,GAEP,YADAL,EAAOK,GAILD,EAAKE,KACPP,EAAQ1B,GAERkC,QAAQR,QAAQ1B,GAAOmC,KAAKP,EAAOC,GAwBvCrD,EAAOD,QApBP,SAA2B6D,GACzB,OAAO,WACL,IAAIC,EAAO1D,KACP2D,EAAOC,UACX,OAAO,IAAIL,SAAQ,SAAUR,EAASC,GACpC,IAAIF,EAAMW,EAAGI,MAAMH,EAAMC,GAEzB,SAASV,EAAM5B,GACbwB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQ7B,GAGlE,SAAS6B,EAAOY,GACdjB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASY,GAGnEb,OAAMc,QAMZlE,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,G,cCrCxE,SAASwC,EAAgBnD,GAKvB,OAJAhB,EAAOD,QAAUoE,EAAkBlD,OAAOmD,eAAiBnD,OAAOoD,eAAiB,SAAyBrD,GAC1G,OAAOA,EAAEsD,WAAarD,OAAOoD,eAAerD,IAE9ChB,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,EACjEwC,EAAgBnD,GAGzBhB,EAAOD,QAAUoE,EACjBnE,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,G,cCTxE,SAAS4C,EAAgBvD,EAAGqB,GAO1B,OANArC,EAAOD,QAAUwE,EAAkBtD,OAAOmD,gBAAkB,SAAyBpD,EAAGqB,GAEtF,OADArB,EAAEsD,UAAYjC,EACPrB,GAGThB,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,EACjE4C,EAAgBvD,EAAGqB,GAG5BrC,EAAOD,QAAUwE,EACjBvE,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,G,cCXxE,SAAS6C,EAAkBC,EAAQC,GACjC,IAAK,IAAInE,EAAI,EAAGA,EAAImE,EAAMC,OAAQpE,IAAK,CACrC,IAAIqE,EAAaF,EAAMnE,GACvBqE,EAAWzD,WAAayD,EAAWzD,aAAc,EACjDyD,EAAWjC,cAAe,EACtB,UAAWiC,IAAYA,EAAWhC,UAAW,GACjD3B,OAAOC,eAAeuD,EAAQG,EAAW9C,IAAK8C,IAUlD5E,EAAOD,QANP,SAAsByC,EAAaqC,EAAYC,GAG7C,OAFID,GAAYL,EAAkBhC,EAAYL,UAAW0C,GACrDC,GAAaN,EAAkBhC,EAAasC,GACzCtC,GAITxC,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,G,gBCjBxE,IAAIyC,EAAiB,EAAQ,GAiB7BpE,EAAOD,QAfP,SAAmBgF,EAAUC,GAC3B,GAA0B,mBAAfA,GAA4C,OAAfA,EACtC,MAAM,IAAIvC,UAAU,sDAGtBsC,EAAS5C,UAAYlB,OAAOY,OAAOmD,GAAcA,EAAW7C,UAAW,CACrEY,YAAa,CACXvB,MAAOuD,EACPnC,UAAU,EACVD,cAAc,KAGdqC,GAAYZ,EAAeW,EAAUC,IAI3ChF,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,G,gBClBxE,IAAIkB,EAAU,EAAQ,GAA0C,QAE5DoC,EAAwB,EAAQ,IAYpCjF,EAAOD,QAVP,SAAoC8D,EAAMnD,GACxC,GAAIA,IAA2B,WAAlBmC,EAAQnC,IAAsC,mBAATA,GAChD,OAAOA,EACF,QAAa,IAATA,EACT,MAAM,IAAI+B,UAAU,4DAGtB,OAAOwC,EAAsBpB,IAI/B7D,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,G,gBCfxE,IAAI0C,EAAiB,EAAQ,GAEzBD,EAAiB,EAAQ,GAEzBc,EAAmB,EAAQ,IAE3BC,EAAY,EAAQ,IAExB,SAASC,EAAiBC,GACxB,IAAIC,EAAwB,mBAARC,IAAqB,IAAIA,SAAQrB,EA+BrD,OA7BAlE,EAAOD,QAAUqF,EAAmB,SAA0BC,GAC5D,GAAc,OAAVA,IAAmBH,EAAiBG,GAAQ,OAAOA,EAEvD,GAAqB,mBAAVA,EACT,MAAM,IAAI5C,UAAU,sDAGtB,QAAsB,IAAX6C,EAAwB,CACjC,GAAIA,EAAOE,IAAIH,GAAQ,OAAOC,EAAOlE,IAAIiE,GAEzCC,EAAOG,IAAIJ,EAAOK,GAGpB,SAASA,IACP,OAAOP,EAAUE,EAAOtB,UAAWM,EAAelE,MAAM4C,aAW1D,OARA2C,EAAQvD,UAAYlB,OAAOY,OAAOwD,EAAMlD,UAAW,CACjDY,YAAa,CACXvB,MAAOkE,EACPvE,YAAY,EACZyB,UAAU,EACVD,cAAc,KAGXyB,EAAesB,EAASL,IAGjCrF,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,EACjEyD,EAAiBC,GAG1BrF,EAAOD,QAAUqF,EACjBpF,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,G,gBCrCxE,IAAIgE,EAAW,SAAU5F,GACvB,aAEA,IAAI6F,EAAK3E,OAAOkB,UACZ0D,EAASD,EAAGxD,eAEZ0D,EAA4B,mBAAXxE,OAAwBA,OAAS,GAClDyE,EAAiBD,EAAQhD,UAAY,aACrCkD,EAAsBF,EAAQG,eAAiB,kBAC/CC,EAAoBJ,EAAQvE,aAAe,gBAE/C,SAAStB,EAAOyC,EAAKZ,EAAKN,GAOxB,OANAP,OAAOC,eAAewB,EAAKZ,EAAK,CAC9BN,MAAOA,EACPL,YAAY,EACZwB,cAAc,EACdC,UAAU,IAELF,EAAIZ,GAEb,IAEE7B,EAAO,GAAI,IACX,MAAOgE,GACPhE,EAAS,SAASyC,EAAKZ,EAAKN,GAC1B,OAAOkB,EAAIZ,GAAON,GAItB,SAAS2E,EAAKC,EAASC,EAASxC,EAAMyC,GAEpC,IAAIC,EAAiBF,GAAWA,EAAQlE,qBAAqBqE,EAAYH,EAAUG,EAC/EC,EAAYxF,OAAOY,OAAO0E,EAAepE,WACzCuE,EAAU,IAAIC,EAAQL,GAAe,IAMzC,OAFAG,EAAUG,QAuMZ,SAA0BR,EAASvC,EAAM6C,GACvC,IAAIG,EAhLuB,iBAkL3B,OAAO,SAAgBC,EAAQxD,GAC7B,GAjLoB,cAiLhBuD,EACF,MAAM,IAAIE,MAAM,gCAGlB,GApLoB,cAoLhBF,EAA6B,CAC/B,GAAe,UAAXC,EACF,MAAMxD,EAKR,OAAO0D,IAMT,IAHAN,EAAQI,OAASA,EACjBJ,EAAQpD,IAAMA,IAED,CACX,IAAI2D,EAAWP,EAAQO,SACvB,GAAIA,EAAU,CACZ,IAAIC,EAAiBC,EAAoBF,EAAUP,GACnD,GAAIQ,EAAgB,CAClB,GAAIA,IAAmBE,EAAkB,SACzC,OAAOF,GAIX,GAAuB,SAAnBR,EAAQI,OAGVJ,EAAQW,KAAOX,EAAQY,MAAQZ,EAAQpD,SAElC,GAAuB,UAAnBoD,EAAQI,OAAoB,CACrC,GApNqB,mBAoNjBD,EAEF,MADAA,EAlNc,YAmNRH,EAAQpD,IAGhBoD,EAAQa,kBAAkBb,EAAQpD,SAEN,WAAnBoD,EAAQI,QACjBJ,EAAQc,OAAO,SAAUd,EAAQpD,KAGnCuD,EA7NkB,YA+NlB,IAAIY,EAASC,EAAStB,EAASvC,EAAM6C,GACrC,GAAoB,WAAhBe,EAAOE,KAAmB,CAO5B,GAJAd,EAAQH,EAAQjD,KAlOA,YAFK,iBAwOjBgE,EAAOnE,MAAQ8D,EACjB,SAGF,MAAO,CACL5F,MAAOiG,EAAOnE,IACdG,KAAMiD,EAAQjD,MAGS,UAAhBgE,EAAOE,OAChBd,EAhPgB,YAmPhBH,EAAQI,OAAS,QACjBJ,EAAQpD,IAAMmE,EAAOnE,OA/QPsE,CAAiBxB,EAASvC,EAAM6C,GAE7CD,EAcT,SAASiB,EAAS9D,EAAIlB,EAAKY,GACzB,IACE,MAAO,CAAEqE,KAAM,SAAUrE,IAAKM,EAAGlD,KAAKgC,EAAKY,IAC3C,MAAOW,GACP,MAAO,CAAE0D,KAAM,QAASrE,IAAKW,IAhBjClE,EAAQoG,KAAOA,EAoBf,IAOIiB,EAAmB,GAMvB,SAASZ,KACT,SAASqB,KACT,SAASC,KAIT,IAAIC,EAAoB,GACxB9H,EAAO8H,EAAmBhC,GAAgB,WACxC,OAAO5F,QAGT,IAAI6H,EAAW/G,OAAOoD,eAClB4D,EAA0BD,GAAYA,EAASA,EAASE,EAAO,MAC/DD,GACAA,IAA4BrC,GAC5BC,EAAOnF,KAAKuH,EAAyBlC,KAGvCgC,EAAoBE,GAGtB,IAAIE,EAAKL,EAA2B3F,UAClCqE,EAAUrE,UAAYlB,OAAOY,OAAOkG,GAYtC,SAASK,EAAsBjG,GAC7B,CAAC,OAAQ,QAAS,UAAUkG,SAAQ,SAASvB,GAC3C7G,EAAOkC,EAAW2E,GAAQ,SAASxD,GACjC,OAAOnD,KAAKyG,QAAQE,EAAQxD,SAkClC,SAASgF,EAAc7B,EAAW8B,GAgChC,IAAIC,EAgCJrI,KAAKyG,QA9BL,SAAiBE,EAAQxD,GACvB,SAASmF,IACP,OAAO,IAAIF,GAAY,SAASrF,EAASC,IAnC7C,SAASuF,EAAO5B,EAAQxD,EAAKJ,EAASC,GACpC,IAAIsE,EAASC,EAASjB,EAAUK,GAASL,EAAWnD,GACpD,GAAoB,UAAhBmE,EAAOE,KAEJ,CACL,IAAIgB,EAASlB,EAAOnE,IAChB9B,EAAQmH,EAAOnH,MACnB,OAAIA,GACiB,iBAAVA,GACPqE,EAAOnF,KAAKc,EAAO,WACd+G,EAAYrF,QAAQ1B,EAAMoH,SAASjF,MAAK,SAASnC,GACtDkH,EAAO,OAAQlH,EAAO0B,EAASC,MAC9B,SAASc,GACVyE,EAAO,QAASzE,EAAKf,EAASC,MAI3BoF,EAAYrF,QAAQ1B,GAAOmC,MAAK,SAASkF,GAI9CF,EAAOnH,MAAQqH,EACf3F,EAAQyF,MACP,SAASnF,GAGV,OAAOkF,EAAO,QAASlF,EAAON,EAASC,MAvBzCA,EAAOsE,EAAOnE,KAiCZoF,CAAO5B,EAAQxD,EAAKJ,EAASC,MAIjC,OAAOqF,EAaLA,EAAkBA,EAAgB7E,KAChC8E,EAGAA,GACEA,KAkHV,SAAStB,EAAoBF,EAAUP,GACrC,IAAII,EAASG,EAASnE,SAAS4D,EAAQI,QACvC,QA3TE5C,IA2TE4C,EAAsB,CAKxB,GAFAJ,EAAQO,SAAW,KAEI,UAAnBP,EAAQI,OAAoB,CAE9B,GAAIG,EAASnE,SAAiB,SAG5B4D,EAAQI,OAAS,SACjBJ,EAAQpD,SAtUZY,EAuUIiD,EAAoBF,EAAUP,GAEP,UAAnBA,EAAQI,QAGV,OAAOM,EAIXV,EAAQI,OAAS,QACjBJ,EAAQpD,IAAM,IAAIb,UAChB,kDAGJ,OAAO2E,EAGT,IAAIK,EAASC,EAASZ,EAAQG,EAASnE,SAAU4D,EAAQpD,KAEzD,GAAoB,UAAhBmE,EAAOE,KAIT,OAHAjB,EAAQI,OAAS,QACjBJ,EAAQpD,IAAMmE,EAAOnE,IACrBoD,EAAQO,SAAW,KACZG,EAGT,IAAI7D,EAAOkE,EAAOnE,IAElB,OAAMC,EAOFA,EAAKE,MAGPiD,EAAQO,EAAS6B,YAAcvF,EAAK/B,MAGpCkF,EAAQqC,KAAO9B,EAAS+B,QAQD,WAAnBtC,EAAQI,SACVJ,EAAQI,OAAS,OACjBJ,EAAQpD,SA1XVY,GAoYFwC,EAAQO,SAAW,KACZG,GANE7D,GA3BPmD,EAAQI,OAAS,QACjBJ,EAAQpD,IAAM,IAAIb,UAAU,oCAC5BiE,EAAQO,SAAW,KACZG,GAoDX,SAAS6B,EAAaC,GACpB,IAAIC,EAAQ,CAAEC,OAAQF,EAAK,IAEvB,KAAKA,IACPC,EAAME,SAAWH,EAAK,IAGpB,KAAKA,IACPC,EAAMG,WAAaJ,EAAK,GACxBC,EAAMI,SAAWL,EAAK,IAGxB/I,KAAKqJ,WAAWC,KAAKN,GAGvB,SAASO,EAAcP,GACrB,IAAI1B,EAAS0B,EAAMQ,YAAc,GACjClC,EAAOE,KAAO,gBACPF,EAAOnE,IACd6F,EAAMQ,WAAalC,EAGrB,SAASd,EAAQL,GAIfnG,KAAKqJ,WAAa,CAAC,CAAEJ,OAAQ,SAC7B9C,EAAY+B,QAAQY,EAAc9I,MAClCA,KAAKyJ,OAAM,GA8Bb,SAAS1B,EAAO2B,GACd,GAAIA,EAAU,CACZ,IAAIC,EAAiBD,EAAS9D,GAC9B,GAAI+D,EACF,OAAOA,EAAepJ,KAAKmJ,GAG7B,GAA6B,mBAAlBA,EAASd,KAClB,OAAOc,EAGT,IAAKE,MAAMF,EAASlF,QAAS,CAC3B,IAAIpE,GAAK,EAAGwI,EAAO,SAASA,IAC1B,OAASxI,EAAIsJ,EAASlF,QACpB,GAAIkB,EAAOnF,KAAKmJ,EAAUtJ,GAGxB,OAFAwI,EAAKvH,MAAQqI,EAAStJ,GACtBwI,EAAKtF,MAAO,EACLsF,EAOX,OAHAA,EAAKvH,WA1eT0C,EA2eI6E,EAAKtF,MAAO,EAELsF,GAGT,OAAOA,EAAKA,KAAOA,GAKvB,MAAO,CAAEA,KAAM/B,GAIjB,SAASA,IACP,MAAO,CAAExF,WA1fP0C,EA0fyBT,MAAM,GA+MnC,OA7mBAoE,EAAkB1F,UAAY2F,EAC9B7H,EAAOkI,EAAI,cAAeL,GAC1B7H,EAAO6H,EAA4B,cAAeD,GAClDA,EAAkBmC,YAAc/J,EAC9B6H,EACA5B,EACA,qBAaFnG,EAAQkK,oBAAsB,SAASC,GACrC,IAAIC,EAAyB,mBAAXD,GAAyBA,EAAOnH,YAClD,QAAOoH,IACHA,IAAStC,GAG2B,uBAAnCsC,EAAKH,aAAeG,EAAKrJ,QAIhCf,EAAQqK,KAAO,SAASF,GAQtB,OAPIjJ,OAAOmD,eACTnD,OAAOmD,eAAe8F,EAAQpC,IAE9BoC,EAAO5F,UAAYwD,EACnB7H,EAAOiK,EAAQhE,EAAmB,sBAEpCgE,EAAO/H,UAAYlB,OAAOY,OAAOsG,GAC1B+B,GAOTnK,EAAQsK,MAAQ,SAAS/G,GACvB,MAAO,CAAEsF,QAAStF,IAsEpB8E,EAAsBE,EAAcnG,WACpClC,EAAOqI,EAAcnG,UAAW6D,GAAqB,WACnD,OAAO7F,QAETJ,EAAQuI,cAAgBA,EAKxBvI,EAAQuK,MAAQ,SAASlE,EAASC,EAASxC,EAAMyC,EAAaiC,QACxC,IAAhBA,IAAwBA,EAAc7E,SAE1C,IAAI6G,EAAO,IAAIjC,EACbnC,EAAKC,EAASC,EAASxC,EAAMyC,GAC7BiC,GAGF,OAAOxI,EAAQkK,oBAAoB5D,GAC/BkE,EACAA,EAAKxB,OAAOpF,MAAK,SAASgF,GACxB,OAAOA,EAAOlF,KAAOkF,EAAOnH,MAAQ+I,EAAKxB,WAuKjDX,EAAsBD,GAEtBlI,EAAOkI,EAAIjC,EAAmB,aAO9BjG,EAAOkI,EAAIpC,GAAgB,WACzB,OAAO5F,QAGTF,EAAOkI,EAAI,YAAY,WACrB,MAAO,wBAkCTpI,EAAQyK,KAAO,SAASvI,GACtB,IAAIuI,EAAO,GACX,IAAK,IAAI1I,KAAOG,EACduI,EAAKf,KAAK3H,GAMZ,OAJA0I,EAAKC,UAIE,SAAS1B,IACd,KAAOyB,EAAK7F,QAAQ,CAClB,IAAI7C,EAAM0I,EAAKE,MACf,GAAI5I,KAAOG,EAGT,OAFA8G,EAAKvH,MAAQM,EACbiH,EAAKtF,MAAO,EACLsF,EAQX,OADAA,EAAKtF,MAAO,EACLsF,IAsCXhJ,EAAQmI,OAASA,EAMjBvB,EAAQxE,UAAY,CAClBY,YAAa4D,EAEbiD,MAAO,SAASe,GAcd,GAbAxK,KAAKyK,KAAO,EACZzK,KAAK4I,KAAO,EAGZ5I,KAAKkH,KAAOlH,KAAKmH,WArgBjBpD,EAsgBA/D,KAAKsD,MAAO,EACZtD,KAAK8G,SAAW,KAEhB9G,KAAK2G,OAAS,OACd3G,KAAKmD,SA1gBLY,EA4gBA/D,KAAKqJ,WAAWnB,QAAQqB,IAEnBiB,EACH,IAAK,IAAI7J,KAAQX,KAEQ,MAAnBW,EAAK+J,OAAO,IACZhF,EAAOnF,KAAKP,KAAMW,KACjBiJ,OAAOjJ,EAAKgK,MAAM,MACrB3K,KAAKW,QAphBXoD,IA0hBF6G,KAAM,WACJ5K,KAAKsD,MAAO,EAEZ,IACIuH,EADY7K,KAAKqJ,WAAW,GACLG,WAC3B,GAAwB,UAApBqB,EAAWrD,KACb,MAAMqD,EAAW1H,IAGnB,OAAOnD,KAAK8K,MAGd1D,kBAAmB,SAAS2D,GAC1B,GAAI/K,KAAKsD,KACP,MAAMyH,EAGR,IAAIxE,EAAUvG,KACd,SAASgL,EAAOC,EAAKC,GAYnB,OAXA5D,EAAOE,KAAO,QACdF,EAAOnE,IAAM4H,EACbxE,EAAQqC,KAAOqC,EAEXC,IAGF3E,EAAQI,OAAS,OACjBJ,EAAQpD,SArjBZY,KAwjBYmH,EAGZ,IAAK,IAAI9K,EAAIJ,KAAKqJ,WAAW7E,OAAS,EAAGpE,GAAK,IAAKA,EAAG,CACpD,IAAI4I,EAAQhJ,KAAKqJ,WAAWjJ,GACxBkH,EAAS0B,EAAMQ,WAEnB,GAAqB,SAAjBR,EAAMC,OAIR,OAAO+B,EAAO,OAGhB,GAAIhC,EAAMC,QAAUjJ,KAAKyK,KAAM,CAC7B,IAAIU,EAAWzF,EAAOnF,KAAKyI,EAAO,YAC9BoC,EAAa1F,EAAOnF,KAAKyI,EAAO,cAEpC,GAAImC,GAAYC,EAAY,CAC1B,GAAIpL,KAAKyK,KAAOzB,EAAME,SACpB,OAAO8B,EAAOhC,EAAME,UAAU,GACzB,GAAIlJ,KAAKyK,KAAOzB,EAAMG,WAC3B,OAAO6B,EAAOhC,EAAMG,iBAGjB,GAAIgC,GACT,GAAInL,KAAKyK,KAAOzB,EAAME,SACpB,OAAO8B,EAAOhC,EAAME,UAAU,OAG3B,KAAIkC,EAMT,MAAM,IAAIxE,MAAM,0CALhB,GAAI5G,KAAKyK,KAAOzB,EAAMG,WACpB,OAAO6B,EAAOhC,EAAMG,gBAU9B9B,OAAQ,SAASG,EAAMrE,GACrB,IAAK,IAAI/C,EAAIJ,KAAKqJ,WAAW7E,OAAS,EAAGpE,GAAK,IAAKA,EAAG,CACpD,IAAI4I,EAAQhJ,KAAKqJ,WAAWjJ,GAC5B,GAAI4I,EAAMC,QAAUjJ,KAAKyK,MACrB/E,EAAOnF,KAAKyI,EAAO,eACnBhJ,KAAKyK,KAAOzB,EAAMG,WAAY,CAChC,IAAIkC,EAAerC,EACnB,OAIAqC,IACU,UAAT7D,GACS,aAATA,IACD6D,EAAapC,QAAU9F,GACvBA,GAAOkI,EAAalC,aAGtBkC,EAAe,MAGjB,IAAI/D,EAAS+D,EAAeA,EAAa7B,WAAa,GAItD,OAHAlC,EAAOE,KAAOA,EACdF,EAAOnE,IAAMA,EAETkI,GACFrL,KAAK2G,OAAS,OACd3G,KAAK4I,KAAOyC,EAAalC,WAClBlC,GAGFjH,KAAKsL,SAAShE,IAGvBgE,SAAU,SAAShE,EAAQ8B,GACzB,GAAoB,UAAhB9B,EAAOE,KACT,MAAMF,EAAOnE,IAcf,MAXoB,UAAhBmE,EAAOE,MACS,aAAhBF,EAAOE,KACTxH,KAAK4I,KAAOtB,EAAOnE,IACM,WAAhBmE,EAAOE,MAChBxH,KAAK8K,KAAO9K,KAAKmD,IAAMmE,EAAOnE,IAC9BnD,KAAK2G,OAAS,SACd3G,KAAK4I,KAAO,OACa,WAAhBtB,EAAOE,MAAqB4B,IACrCpJ,KAAK4I,KAAOQ,GAGPnC,GAGTsE,OAAQ,SAASpC,GACf,IAAK,IAAI/I,EAAIJ,KAAKqJ,WAAW7E,OAAS,EAAGpE,GAAK,IAAKA,EAAG,CACpD,IAAI4I,EAAQhJ,KAAKqJ,WAAWjJ,GAC5B,GAAI4I,EAAMG,aAAeA,EAGvB,OAFAnJ,KAAKsL,SAAStC,EAAMQ,WAAYR,EAAMI,UACtCG,EAAcP,GACP/B,IAKb,MAAS,SAASgC,GAChB,IAAK,IAAI7I,EAAIJ,KAAKqJ,WAAW7E,OAAS,EAAGpE,GAAK,IAAKA,EAAG,CACpD,IAAI4I,EAAQhJ,KAAKqJ,WAAWjJ,GAC5B,GAAI4I,EAAMC,SAAWA,EAAQ,CAC3B,IAAI3B,EAAS0B,EAAMQ,WACnB,GAAoB,UAAhBlC,EAAOE,KAAkB,CAC3B,IAAIgE,EAASlE,EAAOnE,IACpBoG,EAAcP,GAEhB,OAAOwC,GAMX,MAAM,IAAI5E,MAAM,0BAGlB6E,cAAe,SAAS/B,EAAUf,EAAYE,GAa5C,OAZA7I,KAAK8G,SAAW,CACdnE,SAAUoF,EAAO2B,GACjBf,WAAYA,EACZE,QAASA,GAGS,SAAhB7I,KAAK2G,SAGP3G,KAAKmD,SA9rBPY,GAisBOkD,IAQJrH,EA9sBK,CAqtBiBC,EAAOD,SAGtC,IACE8L,mBAAqBlG,EACrB,MAAOmG,GAWmB,iBAAfC,WACTA,WAAWF,mBAAqBlG,EAEhCqG,SAAS,IAAK,yBAAdA,CAAwCrG,K,cCvuB5C3F,EAAOD,QARP,SAAgC8D,GAC9B,QAAa,IAATA,EACF,MAAM,IAAIoI,eAAe,6DAG3B,OAAOpI,GAIT7D,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,G,cCLxE3B,EAAOD,QAJP,SAA2B6D,GACzB,OAAgE,IAAzDoI,SAASE,SAASxL,KAAKkD,GAAIuI,QAAQ,kBAI5CnM,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,G,gBCLxE,IAAIyC,EAAiB,EAAQ,GAEzBgI,EAA2B,EAAQ,IAEvC,SAASC,EAAWC,EAAQxI,EAAMuB,GAiBhC,OAhBI+G,KACFpM,EAAOD,QAAUsM,EAAaE,QAAQpH,UACtCnF,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,IAExE3B,EAAOD,QAAUsM,EAAa,SAAoBC,EAAQxI,EAAMuB,GAC9D,IAAImH,EAAI,CAAC,MACTA,EAAE/C,KAAKzF,MAAMwI,EAAG1I,GAChB,IACIvB,EAAW,IADGyJ,SAASjK,KAAKiC,MAAMsI,EAAQE,IAG9C,OADInH,GAAOjB,EAAe7B,EAAU8C,EAAMlD,WACnCI,GAGTvC,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,GAGnE0K,EAAWrI,MAAM,KAAMD,WAGhC/D,EAAOD,QAAUsM,EACjBrM,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,G,cCZxE3B,EAAOD,QAbP,WACE,GAAuB,oBAAZwM,UAA4BA,QAAQpH,UAAW,OAAO,EACjE,GAAIoH,QAAQpH,UAAUsH,KAAM,OAAO,EACnC,GAAqB,mBAAVC,MAAsB,OAAO,EAExC,IAEE,OADAC,QAAQxK,UAAUyK,QAAQlM,KAAK6L,QAAQpH,UAAUwH,QAAS,IAAI,iBACvD,EACP,MAAOE,GACP,OAAO,IAKX7M,EAAOD,QAAiB,QAAIC,EAAOD,QAASC,EAAOD,QAAQ4B,YAAa,G,20DCPzD,GACXmL,aAAc,CAEVC,gBAAiB,kBACjBC,gBAAiB,kBAGjBC,IAAK,MACLC,2BAA4B,6BAC5BC,YAAa,cACbC,aAAc,eACdC,SAAU,WACVC,KAAM,OACNC,OAAQ,SACRC,KAAM,OACNC,OAAQ,SACRC,iBAAkB,mBAClBC,iBAAkB,mBAClBC,KAAM,OACNC,YAAa,cACbC,mBAAoB,qBACpBC,kBAAmB,oBACnBC,gBAAiB,kBACjBC,WAAY,aACZC,gBAAiB,kBACjBC,iBAAkB,mBAClBC,OAAQ,SACRC,QAAS,UACTC,aAAc,eACdC,gBAAiB,kBACjBC,iBAAkB,mBAClBC,yBAA0B,2BAC1BC,qBAAsB,uBACtBC,eAAgB,iBAChBC,oBAAsB,sBACtBC,sBAAuB,yBAE3BC,WAAY,CACRC,oBAAqB,sBACrBC,aAAc,eACdC,eAAgB,iBAChBC,YAAa,cACbC,YAAa,cACbC,YAAa,cACbC,OAAQ,SACRC,MAAO,QACPC,QAAS,UACTC,KAAM,OACNC,eAAgB,iBAChBC,kBAAmB,oBACnBC,sBAAuB,wBACvBC,oBAAqB,sBACrBC,cAAe,gBACfC,aAAc,eACdC,cAAe,gBACfC,iBAAkB,mBAClBC,qBAAsB,uBACtBC,yBAA0B,2BAC1BC,WAAY,aACZC,wBAAyB,0BACzBC,wBAAyB,0BACzBC,cAAe,gBACfjC,QAAS,UACTkC,wBAAyB,0BACzBC,qBAAsB,uBACtBC,YAAa,cACbC,gBAAiB,kBACjBC,qBAAsB,uBACtBC,mBAAoB,qBACpBC,6BAA8B,+BAC9BC,qBAAsB,uBACtBC,wBAA0B,0BAC1BC,0BAA2B,4BAC3BC,kBAAoB,oBACpBC,eAAiB,iBACjBxD,iBAAkB,mBAClBC,iBAAkB,mBAClBwD,aAAc,gBAElBC,UAAW,CACPC,wBAAyB,2BAE7BC,WAAY,CACRC,aAAc,eACdC,cAAe,gBACff,YAAa,cACbgB,sBAAuB,wBACvBC,oBAAqB,sBACrBC,qBAAsB,uBACtBC,qBAAsB,uBACtBC,yBAA0B,2BAC1BC,eAAgB,iBAChBC,yBAA0B,2BAC1BC,qBAAsB,uBACtBC,kBAAmB,oBACnBC,oBAAqB,sBACrBC,kBAAmB,oBACnBC,oBAAqB,sBACrBC,oBAAqB,sBACrBC,oBAAqB,sBACrBC,sBAAuB,wBACvBC,oBAAqB,sBACrBC,eAAgB,iBAChBC,gBAAiB,kBACjBC,eAAgB,iBAChBC,2BAA4B,6BAC5BC,0BAA2B,4BAC3BC,mBAAoB,qBACpBC,oBAAqB,sBACrBC,qBAAsB,uBACtBC,2BAA4B,6BAC5BC,wBAAyB,0BACzBC,4BAA6B,8BAC7BC,uBAAwB,yBACxBC,wBAAyB,0BACzBC,yBAA0B,2BAC1BC,yBAA0B,2BAC1BC,yBAA0B,2BAC1BC,4BAA6B,8BAC7BC,iCAAkC,mCAClCC,uBAAyB,yBACzBC,8BAAgC,gCAChCC,4BAA6B,8BAC7BC,sBAAuB,wBACvBC,yBAA0B,2BAC1BC,4BAA6B,+BAEjCC,aAAc,CACVC,OAAQ,SACRC,QAAS,UACTC,IAAM,gBACNC,4BAA6B,4BAEjCC,iBAAkB,CACdC,MAAO,QACPC,eAAgB,iBAChBC,YAAa,cACbC,WAAY,cAEhBC,UAAW,CACPC,QAAS,UACTC,SAAU,WACVC,SAAU,WACV9G,gBAAiB,iBACjB+G,SAAS,WACTC,cAAe,gBAEnBC,YAAa,CACTC,iBAAkB,kBAClBC,KAAM,QAEVC,aAAc,CACVC,UAAW,YACXC,MAAO,QACPC,YAAa,cACbhB,MAAO,QACPiB,KAAM,QAEVC,kBAAmB,CACfC,oBAAqB,sBACrBC,OAAQ,SACRC,eAAgB,kBAEpBC,kBAAmB,CACfvI,KAAM,OACNwI,OAAQ,SACRC,MAAO,QACPC,KAAM,OACNrF,qBAAsB,uBACtBsF,cAAe,gBACfC,eAAgB,iBAChBC,6BAA8B,+BAC9BC,gCAAiC,kCACjCC,qBAAsB,uBACtBzH,oBAAqB,sBACrB0H,IAAK,MACLC,eAAgB,iBAChBC,sBAAuB,wBACvBC,sBAAuB,wBACvBpB,UAAW,aAEfqB,WAAY,CACRC,QAAS,UACTC,UAAW,YACXC,aAAc,eACdC,YAAa,cACbC,MAAO,SAEXC,WAAY,CACRC,WAAY,aACZC,WAAY,cAEhBC,cAAe,CACXC,iBAAkB,QAClBC,iBAAkB,SAEtBC,mBAAoB,CAChBC,UAAW,YACXC,KAAM,OACNrD,QAAS,WAEbsD,2BAA4B,CACxBC,OAAS,SACTC,MAAO,QACPC,sBAAuB,yBAE3BC,UAAW,CACPvI,MAAO,QACPE,KAAM,QAEVsI,WAAY,CACRC,OAAQ,SACRC,QAAS,WAEbC,sBAAuB,CACnB,MAAS,QACT,MAAS,QACT,QAAW,UACX,UAAa,YACb,KAAQ,OACR,UAAa,cAORC,EAAkC,CAC3C,qBACA,gCACA,uCACA,eACA,eACA,gBACA,wBACA,iCAMSC,EAA6C,CACtD,YAMSC,EAAoC,CAC7C,+C,iGCrPJ,IAEMC,EAAU,SAAA3V,GAAG,MAAoB,iBAARA,EAAoBA,EAAM4V,KAAKC,UAAU7V,IAEpE8V,EAAY,EACZC,EAAO,GA0BJ,SAASC,EAAIC,EAAYC,EAAUC,IAxB1C,SAAcD,EAAUD,EAAYE,GAChC,IAAIF,EACA,MAAM,IAAI5R,MAAM,wBAEpB6R,EAAYA,GAAaE,EAAUjB,UAAUrI,KAC7CqJ,EAAYA,GAAaC,EAAUhB,WAAWE,QAE9C,IAAMe,EAAS,EAAC,IAAIC,MAAOC,cAAeZ,EAAQO,GAAWP,EAAQQ,GAAtD,UAAqER,EAAQM,GAA7E,OAA8FO,KAAK,KAG/GV,EAAYO,EAAOpU,QAjBJ,OAkBd8T,EAAO,GACPD,EAAY,GAEhBA,GAAaO,EAAOpU,OACpB8T,EAAKhP,KAAKsP,GAUVI,CAAKP,EAAUD,EAAYE,GAOxB,SAASO,IACZ,OAAOd,KAAKe,MAAMf,KAAKC,UAAUE,IAM9B,SAASa,KC5CT,SAAsBC,EAAMC,EAAUC,GACzC,GAAIC,UAAaH,EAAjB,CAEA,IAAMI,EAA2B,iBAATJ,EAAqBA,EAAOjB,KAAKC,UAAUgB,GAC7DK,EAAO,IAAIC,KAAK,CAACF,GAAU,CAAChS,KAAM8R,IACpCjN,EAAIkN,SAASI,cAAc,KACzBC,EAAUC,IAAIC,gBAAgBL,GACpCpN,EAAE0N,SAAWV,EACbhN,EAAE2N,KAAOJ,EACTL,SAASU,KAAKC,YAAY7N,GAC1BA,EAAE8N,QACFZ,SAASU,KAAKG,YAAY/N,GAC1BwN,IAAIQ,gBAAgBT,IDiCpBU,CAAahC,EAAKS,KAAK,IAAX,eAAuB,IAAIF,MAAO0B,UAAlC,QAAmD,c,8+BE/C5D,ICJHC,ECUAC,EACAC,EAEAC,EFTSC,EAAY,CACrBjM,WAAY,CACRgB,aAAcgJ,EAAUhK,WAAWgB,aACnCC,cAAe+I,EAAUhK,WAAWiB,cACpCf,aAAc8J,EAAUhK,WAAWE,aACnCD,oBAAqB+J,EAAUhK,WAAWC,oBAC1CE,eAAgB6J,EAAUhK,WAAWG,eACrCI,OAAQyJ,EAAUhK,WAAWO,OAC7BF,YAAa2J,EAAUhK,WAAWK,YAClCC,YAAa0J,EAAUhK,WAAWM,YAClCY,iBAAkB8I,EAAUhK,WAAWkB,iBACvCC,qBAAsB6I,EAAUhK,WAAWmB,qBAC3CC,yBAA0B4I,EAAUhK,WAAWoB,yBAC/CR,kBAAmBoJ,EAAUhK,WAAWY,kBACxCC,sBAAuBmJ,EAAUhK,WAAWa,sBAC5CC,oBAAqBkJ,EAAUhK,WAAWc,oBAC1CvB,QAASyK,EAAUhK,WAAWT,QAC9BkC,wBAAyBuI,EAAUhK,WAAWyB,wBAC9CD,cAAewI,EAAUhK,WAAWwB,cACpCG,YAAaqI,EAAUhK,WAAW2B,YAClCC,gBAAiBoI,EAAUhK,WAAW4B,gBACtCE,mBAAoBkI,EAAUhK,WAAW8B,mBACzCE,qBAAsBgI,EAAUhK,WAAWgC,qBAC3CC,wBAA0B+H,EAAUhK,WAAWiC,wBAC/CC,0BAA2B8H,EAAUhK,WAAWkC,0BAChDC,kBAAoB6H,EAAUhK,WAAWmC,kBACzCvD,iBAAkBoL,EAAUhK,WAAWpB,iBACvCC,iBAAkBmL,EAAUhK,WAAWnB,iBACvCwD,aAAc2H,EAAUhK,WAAWqC,cAKvCG,WAAY,CACRE,cAAesH,EAAUxH,WAAWE,cACpCgB,oBAAqBsG,EAAUxH,WAAWkB,oBAC1CO,oBAAqB+F,EAAUxH,WAAWyB,oBAC1CJ,eAAgBmG,EAAUxH,WAAWqB,eACrCf,qBAAsBkH,EAAUxH,WAAWM,qBAC3C6B,4BAA6BqF,EAAUxH,WAAWmC,6BAKtDQ,aAAc,EAAF,GAAO6E,EAAU7E,cAI7BK,iBAAkB,EAAF,GAAOwE,EAAUxE,kBAIjCK,UAAW,EAAF,GAAOmE,EAAUnE,WAI1BM,YAAa,EAAF,GAAO6D,EAAU7D,aAI5BG,aAAc,EAAF,GAAO0D,EAAU1D,cAI7BsB,WAAY,EAAF,GAAOoC,EAAUpC,YAI3BS,cAAe,EAAF,GAAO2B,EAAU3B,eAI9BH,WAAY,EAAF,GAAO8B,EAAU9B,YAI3BM,mBAAoB,EAAF,GAAOwB,EAAUxB,oBAIlCG,2BAA4B,EAAF,GAAOqB,EAAUrB,4BAI5CI,UAAW,EAAF,GAAOiB,EAAUjB,WAI1BI,sBAAuB,EAAF,GAAOa,EAAUb,wBAM7B+C,EAAb,gCAQI,cAA+C,MAAjCC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,QAAW,mBAC3C,cAAMA,GAENC,GAAUC,eAAeJ,GACzBG,GAAUC,eAAeH,GACrBC,GACAC,GAAUC,eAAeF,GAE7B,EAAKF,UAAYA,EACjB,EAAKC,UAAYA,EACjB,EAAKC,QAAUA,EAV4B,EARnD,cAAiCpU,QAyBnBuU,EAOV,cAA6B,IAAf3T,EAAe,EAAfA,KAAM4T,EAAS,EAATA,OAAS,YACzBH,GAAUI,aAAa7T,EAAM1G,OAAOiH,OAAO4Q,EAAU9B,aAClDuE,GACCH,GAAUC,eAAeE,GAE7Bpb,KAAKwH,KAAOA,EACZxH,KAAKob,OAASA,GAOTE,EAMT,cAAyB,IAAXC,EAAW,EAAXA,QAAW,YACrBvb,KAAKub,QAAUA,GAOVC,EAMT,cAAkC,QAApBC,mBAAoB,MAAN,GAAM,cAC1BA,EAAYjX,OAAS,GACrBiX,EAAYvT,SAAQ,SAAAwT,GAChBT,GAAUU,oBAAoBD,EAAYE,OAGlD5b,KAAKyb,YAAcA,GAOdI,EAqBR,cAAsZ,QAAxYC,eAAwY,aAAxXC,iBAAwX,aAAtWC,gBAAsW,aAArVC,eAAqV,aAArUC,6BAAqU,aAAtSC,oBAAsS,aAAjRC,wBAAiR,aAAvPC,4BAAuP,aAAzNC,wBAAyN,aAA/LC,mBAA+L,aAA1KC,6BAA0K,aAA3IC,4BAA2I,aAA7GC,wBAA6G,aAAnFC,6BAAmF,aAApDC,8BAAoD,aAAtBC,oBAAsB,qBACnZ5B,GAAU6B,gBAAgBhB,GAC1Bb,GAAU6B,gBAAgBf,GAC1Bd,GAAU6B,gBAAgBd,GAC1Bf,GAAU6B,gBAAgBb,GAC1BhB,GAAU6B,gBAAgBZ,GAC1BjB,GAAU6B,gBAAgBX,GAC1BlB,GAAU6B,gBAAgBV,GAC1BnB,GAAU6B,gBAAgBT,GAC1BpB,GAAU6B,gBAAgBR,GAC1BrB,GAAU6B,gBAAgBP,GAC1BtB,GAAU6B,gBAAgBN,GAC1BvB,GAAU6B,gBAAgBL,GAC1BxB,GAAU6B,gBAAgBJ,GAC1BzB,GAAU6B,gBAAgBH,GAC1B1B,GAAU6B,gBAAgBF,GAC1B3B,GAAU6B,gBAAgBD,GAE1B7c,KAAK8b,QAAUA,EACf9b,KAAK+b,UAAYA,EACjB/b,KAAKgc,SAAWA,EAChBhc,KAAKic,QAAUA,EACfjc,KAAKkc,sBAAwBA,EAC7Blc,KAAKmc,aAAeA,EACpBnc,KAAKoc,iBAAmBA,EACxBpc,KAAKqc,qBAAuBA,EAC5Brc,KAAKsc,iBAAmBA,EACxBtc,KAAKuc,YAAcA,EACnBvc,KAAKwc,sBAAwBA,EAC7Bxc,KAAKyc,qBAAuBA,EAC5Bzc,KAAK0c,iBAAmBA,EACxB1c,KAAK2c,sBAAwBA,EAC7B3c,KAAK4c,uBAAyBA,EAC9B5c,KAAK6c,aAAeA,GAOfE,EAOT,cAAgI,QAAlHC,cAAkH,MAAzG,CAACrE,EAAU9B,WAAWE,YAAmF,MAAtEkG,qBAAsE,MAAtD,IAAI9B,EAAM,CAAC3T,KAAMmR,EAAU9B,WAAWE,aAAgB,cAC5HkE,GAAUU,oBAAoBqB,EAAQE,OACtCjC,GAAUU,oBAAoBsB,EAAe9B,GAE7Cnb,KAAKgd,OAASA,EACdhd,KAAKid,cAAgBA,GAOhBE,EAMT,cAA+B,IAAjBF,EAAiB,EAAjBA,cAAiB,YAC3BhC,GAAUU,oBAAoBsB,EAAe9B,GAC7Cnb,KAAKid,cAAgBA,GAOhBG,EAUT,cAAgH,IAAlGC,EAAkG,EAAlGA,kBAAkG,IAA/EC,iBAA+E,MAAnE,KAAmE,MAA7DC,wBAA6D,MAA1C,KAA0C,MAApCC,kBAAoC,MAAvB,KAAuB,MAAjBC,cAAiB,MAAR,KAAQ,cAC5Gzd,KAAKqd,kBAAoBA,EACzBrd,KAAKsd,UAAYA,EACjBtd,KAAKud,iBAAmBA,EACxBvd,KAAKwd,WAAaA,EAClBxd,KAAKyd,OAASA,GAOTC,EAST,cAAoE,IAAtDC,EAAsD,EAAtDA,oBAAqBC,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,OAAU,YAChE7C,GAAUU,oBAAoBiC,EAAUG,IACxC/d,KAAK2d,oBAAsBA,EAC3B3d,KAAK4d,SAAWA,EAChB5d,KAAK6d,YAAcA,EACnB7d,KAAK8d,OAASA,GAOTE,EAOT,cAAkD,QAApCC,gBAAoC,MAAzB,GAAyB,MAArBC,oBAAqB,MAAN,GAAM,cAC1CD,EAASzZ,OAAS,GAClByZ,EAAS/V,SAAQ,SAAAiW,GACblD,GAAUU,oBAAoBwC,EAASC,OAG3CF,EAAa1Z,OAAS,GACtB0Z,EAAahW,SAAQ,SAAAmW,GACjBpD,GAAUI,aAAagD,EAAYvd,OAAOiH,OAAO4Q,EAAU1D,kBAGnEjV,KAAKie,SAAWA,EAChBje,KAAKke,aAAeA,GAOfI,EAMT,cAAsB,IAAR/d,EAAQ,EAARA,KAAQ,iBACLwD,IAATxD,GACA0a,GAAUU,oBAAoBpb,EAAMqb,IAExC5b,KAAKO,KAAOA,GAOPge,EAMT,cAAuB,IAATC,EAAS,EAATA,MAAS,YACfA,aAAiBtB,OACjBsB,EAAMtW,SAAQ,SAAA3H,GAAI,OAAI0a,GAAUU,oBAAoBpb,EAAMqb,OAC1D5b,KAAKwe,MAAQA,IAEbvD,GAAUU,oBAAoB6C,EAAO5C,IACrC5b,KAAKwe,MAAQ,CAACA,KAQbC,EAQT,cAA6D,IAA/CC,EAA+C,EAA/CA,mBAAoBC,EAA2B,EAA3BA,iBAAkBH,EAAS,EAATA,MAAS,YACrDA,IACA1d,OAAOiH,OAAOyW,GAAOtW,SAAQ,SAAA3H,GACzB0a,GAAUU,oBAAoBpb,EAAMqb,OAExC5b,KAAKwe,MAAQA,GAEjBxe,KAAK0e,mBAAqBA,EAC1B1e,KAAK2e,iBAAmBA,GAOlBC,GASV,cAAgD,IAAlCC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,IAAKC,EAAoB,EAApBA,SAAUjB,EAAU,EAAVA,OAAU,YACxCe,IAEA5D,GAAUC,eAAe4D,GACzB7D,GAAUC,eAAe4C,GACrBiB,GACA9D,GAAU+D,eAAeD,IAGjC/e,KAAK6e,QAAUA,EACf7e,KAAK8e,IAAMA,EACX9e,KAAK+e,SAAWA,EAChB/e,KAAK8d,OAASA,GAOTmB,GAOT,cAA2D,QAA7CC,iBAA6C,aAA1BC,wBAA0B,MAAP,IAAO,cACvDnf,KAAKkf,UAAYA,EACjBlf,KAAKmf,iBAAmBA,GAOnBC,GAMT,cAAyB,IAAXP,EAAW,EAAXA,QAAW,YACrB7e,KAAK6e,QAAUA,GAOTQ,GAOV,cAAiD,IAAnCR,EAAmC,EAAnCA,QAAmC,IAA1BM,wBAA0B,MAAP,IAAO,cAC7Cnf,KAAK6e,QAAUA,EACf7e,KAAKmf,iBAAmBA,GAOnBpB,GAiCT,cAIoG,QAJtFuB,0BAIsF,MAJjE,KAIiE,EAJ3DC,EAI2D,EAJ3DA,SAI2D,IAJjDhE,eAIiD,aAJhC8B,yBAIgC,SAJLmC,EAIK,EAJLA,cAIK,IAJUC,eAIV,MAJoB,KAIpB,MAJ0BC,iBAI1B,MAJsC,KAItC,MAJ4CC,sBAI5C,MAJ6D,KAI7D,MAJmEC,uBAInE,aAHhGC,qBAGgG,aAH1EC,sBAG0E,aAHnDC,mBAGmD,aAH/BC,mBAG+B,aAHXC,yBAGW,aAHeC,mBAGf,aAFhGC,qBAEgG,aAF1EC,wBAE0E,aAFjDC,wBAEiD,aAFxBC,oBAEwB,aAFHC,mBAEG,SAFkBC,EAElB,EAFkBA,mBAElB,IADhGC,sBACgG,aADzEC,wBACyE,aADhDC,2BACgD,aADpBC,kCACoB,aADeC,uBACf,cAAhGC,uBAAgG,gBAAzEC,iCAAyE,OAA9CnG,EAAUtD,2BAA2BC,OAAS,eAC5F+H,GACArE,GAAU+F,aAAa1B,GAEvBK,GACA1E,GAAU+F,aAAarB,GAEvBF,GACAxE,GAAUC,eAAeuE,GAEzBC,GACAzE,GAAUC,eAAewE,GAE7BzE,GAAU6B,gBAAgBO,GAC1BpC,GAAU6B,gBAAgBvB,GAC1BN,GAAU6B,gBAAgB8C,GAC1B3E,GAAU6B,gBAAgB+C,GAC1B5E,GAAU6B,gBAAgBgD,GAC1B7E,GAAU6B,gBAAgBiD,GAC1B9E,GAAU6B,gBAAgBkD,GAC1B/E,GAAU6B,gBAAgBmD,GAC1BhF,GAAU6B,gBAAgBoD,GAC1BjF,GAAU6B,gBAAgBqD,GAC1BlF,GAAU6B,gBAAgBsD,GAC1BnF,GAAU6B,gBAAgBuD,GAC1BpF,GAAU6B,gBAAgByD,GAC1BtF,GAAU6B,gBAAgB2D,GAC1BxF,GAAU6B,gBAAgB4D,GAC1BzF,GAAU6B,gBAAgB6D,GAC1B1F,GAAU6B,gBAAgB8D,GAC1B3F,GAAU6B,gBAAgB+D,GAC1B5F,GAAU6B,gBAAgBgE,SACC/c,IAAvByc,GACAvF,GAAU6B,gBAAgB0D,GAE9BvF,GAAUI,aAAa0F,GAA0BjgB,OAAOiH,OAAO4Q,EAAUrB,6BACzEtX,KAAKsf,mBAAqBA,EAC1Btf,KAAKqd,kBAAoBA,EACzBrd,KAAKub,QAAUA,EACfvb,KAAKuf,SAAWA,EAChBvf,KAAKwf,cAAgBA,EACrBxf,KAAK0f,UAAYA,EACjB1f,KAAKyf,QAAUA,EACfzf,KAAK2f,eAAiBA,EACtB3f,KAAK4f,gBAAkBA,EACvB5f,KAAK6f,cAAgBA,EACrB7f,KAAK8f,eAAiBA,EACtB9f,KAAK+f,YAAcA,EACnB/f,KAAKggB,YAAcA,EACnBhgB,KAAKigB,kBAAoBA,EACzBjgB,KAAKkgB,YAAcA,EACnBlgB,KAAKmgB,cAAgBA,EACrBngB,KAAKogB,iBAAmBA,EACxBpgB,KAAKqgB,iBAAmBA,EACxBrgB,KAAKsgB,aAAeA,EACpBtgB,KAAKugB,YAAcA,EACnBvgB,KAAKwgB,mBAAqBA,EAC1BxgB,KAAK+gB,yBAA2BA,GAChC/gB,KAAKygB,eAAiBA,EACtBzgB,KAAK0gB,iBAAmBA,EACxB1gB,KAAK2gB,oBAAsBA,EAC3B3gB,KAAK4gB,2BAA6BA,EAClC5gB,KAAK6gB,gBAAkBA,EACvB7gB,KAAK8gB,eAAiBA,IASjB1C,GAiBT,cAAsI,IAAzHP,EAAyH,EAAzHA,YAAaoD,EAA4G,EAA5GA,GAAIzZ,EAAwG,EAAxGA,KAAM7G,EAAkG,EAAlGA,KAAMugB,EAA4F,EAA5FA,OAAQC,EAAoF,EAApFA,UAAWC,EAAyE,EAAzEA,YAAaC,EAA4D,EAA5DA,MAAOC,EAAqD,EAArDA,aAAcC,EAAuC,EAAvCA,SAAUC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,cAAgB,YAC9H5D,GACA5C,GAAUC,eAAe2C,GAEzBrW,GACAyT,GAAUI,aAAa7T,EAAM1G,OAAOiH,OAAO4Q,EAAU1D,eAErDgM,GACAhG,GAAUC,eAAe+F,GAEzBtgB,GACAsa,GAAUC,eAAeva,GAEzBugB,GACAjG,GAAUC,eAAegG,GAEzBC,GACAlG,GAAUC,eAAeiG,GAEzBG,GACArG,GAAUI,aAAaiG,EAAcxgB,OAAOiH,OAAO4Q,EAAUxB,qBAE7DoK,GACAtG,GAAUC,eAAeqG,GAEzBC,GACAvG,GAAUC,eAAesG,GAEzBC,GACAxG,GAAUC,eAAeuG,GAG7BzhB,KAAK6d,YAAcA,EACnB7d,KAAKihB,GAAKA,EACVjhB,KAAKwH,KAAOA,EACZxH,KAAKW,KAAOA,EACZX,KAAKkhB,OAASA,EACdlhB,KAAKmhB,UAAYA,EACjBnhB,KAAKohB,YAAcA,EACnBphB,KAAKqhB,MAAQA,EACT1I,EAAU1D,aAAab,QAAUpU,KAAKwH,KACtCxH,KAAKshB,aAAeA,EAEpBthB,KAAKshB,aAAe,KAExBthB,KAAKyhB,cAAgBA,EACrBzhB,KAAKuhB,SAAWA,EAChBvhB,KAAKwhB,YAAcA,GAQdE,GAWT,cAA0I,IAA5HC,EAA4H,EAA5HA,YAAaC,EAA+G,EAA/GA,gBAA+G,IAA9FC,kBAA8F,MAAjFjH,EAAU9F,YAAYE,KAA2D,EAArD8M,EAAqD,EAArDA,SAAUvC,EAA2C,EAA3CA,SAA2C,IAAjCwC,6BAAiC,qBAClIJ,GACA1G,GAAUC,eAAeyG,GAEzBC,GACA3G,GAAUI,aAAauG,EAAiB9gB,OAAOiH,OAAO4Q,EAAUxE,mBAEhE2N,GACA7G,GAAUC,eAAe4G,QAEZ/d,IAAbwb,GACAtE,GAAU6B,gBAAgByC,GAG9BtE,GAAU6B,gBAAgBiF,GAC1B9G,GAAUI,aAAawG,EAAY/gB,OAAOiH,OAAO4Q,EAAU7D,cAE3D9U,KAAK2hB,YAAcA,EACnB3hB,KAAK4hB,gBAAkBA,EACvB5hB,KAAK8hB,SAAWA,EAChB9hB,KAAKuf,SAAWA,EAChBvf,KAAK6hB,WAAaA,EAClB7hB,KAAK+hB,sBAAwBA,GAQxBnG,GAeT,cAA+H,IAAlHkC,EAAkH,EAAlHA,OAAQkE,EAA0G,EAA1GA,SAAU7D,EAAgG,EAAhGA,QAASzX,EAAuF,EAAvFA,MAAOub,EAAgF,EAAhFA,eAAgBpE,EAAgE,EAAhEA,YAAaD,EAAmD,EAAnDA,SAAUsE,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,iBAAkBC,EAAe,EAAfA,YAAe,YAEvHtE,IACA7C,GAAUC,eAAe4C,GACzB9d,KAAK8d,OAASA,GAEdkE,IACA/G,GAAUI,aAAa2G,EAAUlhB,OAAOiH,OAAO4Q,EAAUnE,YACzDxU,KAAKgiB,SAAWA,GAEhBnE,IACA5C,GAAUC,eAAe2C,GACzB7d,KAAK6d,YAAcA,GAEnBD,IACA3C,GAAUU,oBAAoBiC,EAAUG,IACxC/d,KAAK4d,SAAWA,GAEhBO,IACAlD,GAAUU,oBAAoBwC,EAASC,IACvCpe,KAAKme,QAAUA,GAEf+D,IACAliB,KAAKkiB,OAASA,GAEdC,IACAniB,KAAKmiB,iBAAmBA,GAExBC,IACApiB,KAAKoiB,YAAcA,GAEvBpiB,KAAK0G,MAAQA,EACb1G,KAAKiiB,eAAiBA,GAOjBI,GAAb,oEAOI,SAAKC,GACD,MAAM,IAAI1b,MAAM,qBARxB,4BAgBI,WACI,MAAM,IAAIA,MAAM,qBAjBxB,wBA0BI,SAAWrG,GACP,MAAM,IAAIqG,MAAM,qBA3BxB,yBAoCI,SAAYrG,GACR,MAAM,IAAIqG,MAAM,qBArCxB,qBA+CI,SAAQrG,EAAM6hB,GACV,MAAM,IAAIxb,MAAM,qBAhDxB,kBAwDI,WACI,MAAM,IAAIA,MAAM,qBAzDxB,oBAiEI,WACI,MAAM,IAAIA,MAAM,qBAlExB,kBA2EI,SAAKrG,GACD,MAAM,IAAIqG,MAAM,qBA5ExB,oBAqFI,SAAOrG,GACH,MAAM,IAAIqG,MAAM,qBAtFxB,4BAiGI,SAAewb,EAAaG,EAAYC,GACpC,MAAM,IAAI5b,MAAM,qBAlGxB,4BA0GK,WACG5G,KAAKyiB,mBAAmB9J,EAAUjB,UAAUrI,KAAM,2CA3G1D,kBAoHI,SAAK8O,GACD,MAAM,IAAIvX,MAAM,qBArHxB,wBA4HI,SAAW8b,GACP,MAAM,IAAI9b,MAAM,qBA7HxB,8BAoII,WACI,MAAM,IAAIA,MAAM,qBArIxB,kBA8II,SAAK+b,EAAOC,GACR,MAAM,IAAIhc,MAAM,qBA/IxB,wBAuJI,SAAW4X,GACP,MAAM,IAAI5X,MAAM,qBAxJxB,4BAiKI,SAAeuX,EAAS5d,GACpB,MAAM,IAAIqG,MAAM,qBAlKxB,4BA0KI,SAAerG,GACX,MAAM,IAAIqG,MAAM,qBA3KxB,6BAmLI,SAAgBrG,GACZ,MAAM,IAAIqG,MAAM,qBApLxB,4BA2LI,WACI,MAAM,IAAIA,MAAM,qBA5LxB,4BAoMI,SAAe0b,GACX,MAAM,IAAI1b,MAAM,qBArMxB,6BA4MI,WACI,MAAM,IAAIA,MAAM,qBA7MxB,oBAqNI,WACI,MAAM,IAAIA,MAAM,qBAtNxB,2BA6NI,SAAcoU,GACV,MAAM,IAAIpU,MAAM,qBA9NxB,wBAqOI,SAAWrG,GACP,MAAM,IAAIqG,MAAM,qBAtOxB,mCAgPI,SAAsBic,EAAcC,EAAehF,GAC/C,MAAM,IAAIlX,MAAM,qBAjPxB,0BAwPI,SAAa0R,GACTa,MAzPR,gCAmQI,SAAmBV,EAAUuC,EAAS+H,MAnQ1C,2BAyQK,SAAcxiB,GACX,MAAM,IAAIqG,MAAM,qBA1QxB,kCAiRI,SAAqBrG,GACjB,MAAM,IAAIqG,MAAM,qBAlRxB,+BAyRI,SAAkBrG,GACd,MAAM,IAAIqG,MAAM,uBA1RxB,KA8RaqU,GAAb,mFACI,SAAsB5Z,GAClB,GAAqB,iBAAVA,EACP,MAAM,IAAIuF,MAAJ,2DAAiEvF,KAE3E,OAAOrB,OALf,4BAQI,SAAsBqB,GAClB,GAAqB,iBAAVA,EACP,MAAM,IAAIuF,MAAJ,2DAAiEvF,KAE3E,OAAOrB,OAZf,6BAeI,SAAuBqB,GACnB,GAAqB,kBAAVA,EACP,MAAM,IAAIuF,MAAJ,4DAAkEvF,KAE5E,OAAOrB,OAnBf,0BAsBI,SAAoBqB,EAAO2hB,GAEvB,IADc,IAAIC,OAAOD,EAAWjK,KAAM,KAAO,KACtCmK,KAAK7hB,GACZ,MAAM,IAAIuF,MAAJ,mDAAsDuR,KAAKC,UAAU4K,GAArE,oBAA4F3hB,IAEtG,OAAOrB,OA3Bf,0BA8BI,SAAoBqB,GAChB,KAAMA,aAAiBwX,MACnB,MAAM,IAAIjS,MAAJ,gEAAsEvF,KAEhF,OAAOrB,OAlCf,iCAqCI,SAA2B8B,EAAQqhB,GAC/B,KAAMrhB,aAAkBqhB,GACpB,MAAM,IAAIvc,MAAJ,uDAA0Duc,EAA1D,wBAAsFrhB,KAEhG,OAAO9B,SAzCf,KAkDaojB,GAQT,cAAmD,IAAtCC,EAAsC,EAAtCA,SAAUC,EAA4B,EAA5BA,cAAeC,EAAa,EAAbA,WAAa,YAC/CtI,GAAUC,eAAemI,GACrBC,GACArI,GAAUC,eAAeoI,GAEzBC,GACAtI,GAAUC,eAAeqI,GAE7BvjB,KAAKqjB,SAAWA,EAChBrjB,KAAKsjB,cAAgBA,EACrBtjB,KAAKujB,WAAaA,GAQbC,GAQT,cAAgD,IAAnCH,EAAmC,EAAnCA,SAAUI,EAAyB,EAAzBA,WAAYF,EAAa,EAAbA,WAAa,YACxCF,GACApI,GAAUC,eAAemI,GAEzBI,GACAxI,GAAUC,eAAeuI,GAEzBF,GACAtI,GAAUC,eAAeqI,GAE7BvjB,KAAKqjB,SAAWA,EAChBrjB,KAAKyjB,WAAaA,EAClBzjB,KAAKujB,WAAaA,GASZG,GAOV,cAAsD,IAAzCC,EAAyC,EAAzCA,mBAAoBC,EAAqB,EAArBA,mBAAqB,YAClD3I,GAAUU,oBAAoBgI,EAAoBH,IAClDvI,GAAUC,eAAeyI,EAAmBJ,YACxCK,GACA3I,GAAUU,oBAAoBiI,EAAoBJ,IAEtDxjB,KAAK2jB,mBAAqBA,EAC1B3jB,KAAK4jB,mBAAqBA,GAQrBC,GAaT,cAAmF,IAAtE/F,EAAsE,EAAtEA,OAAQ6D,EAA8D,EAA9DA,YAAaK,EAAiD,EAAjDA,SAAU8B,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,GAAIC,EAA6B,EAA7BA,eAAgBC,EAAa,EAAbA,WAAa,YAC/EhJ,GAAUC,eAAe4C,GACzB9d,KAAK8d,OAASA,EACd9d,KAAK2hB,YAAcA,EACnB3hB,KAAKgiB,SAAWA,EAChBhiB,KAAK8jB,KAAOA,EACZ9jB,KAAK+jB,GAAKA,EACV/jB,KAAKgkB,eAAiBA,EACtBhkB,KAAKikB,WAAaA,GAQbC,GAQT,cAAsD,IAAxCpG,EAAwC,EAAxCA,OAAQqG,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,sBAAyB,YAC9CtG,IACA7C,GAAUC,eAAe4C,GACzB9d,KAAK8d,OAASA,GAGdqG,IACAlJ,GAAUU,oBAAoBwI,EAAOjH,OACrCiH,EAAMjc,SAAQ,SAAAmc,GAAiB,OAAIpJ,GAAUU,oBAAoB0I,EAAmBC,OACpFtkB,KAAKmkB,MAAQA,GAGbC,IACAnJ,GAAU6B,gBAAgBsH,GAC1BpkB,KAAKokB,sBAAwBA,IAS5BE,GAOT,cAAqD,IAAxCC,EAAwC,EAAxCA,kBAAmBC,EAAqB,EAArBA,mBAAqB,YAC7CD,GACAtJ,GAAUU,oBAAoB4I,EAAmBE,IAEjDD,GACAvJ,GAAUU,oBAAoB6I,EAAoBC,IAGtDzkB,KAAKukB,kBAAoBA,EACzBvkB,KAAKwkB,mBAAqBA,GAQrBC,GAST,cAAkF,IAArEC,EAAqE,EAArEA,aAAcC,EAAuD,EAAvDA,YAAaC,EAA0C,EAA1CA,mBAAoBC,EAAsB,EAAtBA,oBAAsB,YAC9EH,EAAgC,MAAhBA,GAAwBA,EAAe,EAAK,EAAIA,EAChEC,EAA8B,MAAfA,GAAuBA,EAAc,EAAK,EAAIA,EAC7DC,EAA4C,MAAtBA,GAA8BA,EAAqB,EAAK,EAAIA,EAClFC,EAA8C,MAAvBA,GAA+BA,EAAsB,EAAK,EAAIA,EAErF7kB,KAAK8kB,WAAa,EAClB9kB,KAAK0kB,aAAeA,EACpB1kB,KAAK2kB,YAAcA,EACnB3kB,KAAK4kB,mBAAqBA,EAC1B5kB,KAAK6kB,oBAAsBA,GAOpBE,GAMX,cAAoB,IAAPxkB,EAAO,EAAPA,KAAO,YAChB0a,GAAUU,oBAAoBpb,EAAMqb,IACpC5b,KAAKO,KAAOA,GAONykB,GAAb,gCAMG,cAAuB,IAATxG,EAAS,EAATA,MAAS,+BACb,CAAEA,UAPf,UAA4CD,GCvwCzChC,IAAc,EAYlB,SAAS0I,GAAeC,GACpB,IAAMC,EAXV,SAAqBD,GACjB,IAAMf,EAAQ3J,EAAY0K,GAC1B,MAAO,CACHR,aAAcP,EAAMO,aAAeP,EAAMW,WACzCH,YAAaR,EAAMQ,YAAcR,EAAMW,WACvCF,mBAAoBT,EAAMS,mBAAqBT,EAAMW,WACrDD,oBAAqBV,EAAMU,oBAAsBV,EAAMW,YAK1CM,CAAYF,GACvBG,EAAmBF,EAASN,oBAAqD,EAA9BM,EAASP,mBAA0B,GACxFU,EAAI,EAOR,OALIA,EADAD,EAAmB,IACf,KAAQA,EAAmB,GAE3B,MAAQA,EAAmB,KAAO,GAGnC,EAAK,MADZC,GAAKH,EAASR,YAAcQ,EAAST,aAAe,KAC1B,KAAWY,GAAKA,EAAI,KAAO,IAAMA,GAGxD,SAASC,KACZhJ,IAAc,EAGX,SAASiJ,KACZ,GAAKjJ,IAAgB/B,EAArB,CAGA,IAAMiL,EAAkBR,GAAe,qBACjCS,EAAkBT,GAAe,sBAEvC,OADAzK,EAAc,KACV5Q,MAAM8b,IAAoB9b,MAAM6b,GACzB,EACA7b,MAAM8b,GACND,EACA7b,MAAM6b,GACNC,EAEAC,KAAKC,IAAIH,EAAiBC,IAIlC,SAASG,KACZrL,EAAc,IAAI8J,GAAkB,CAACC,kBAAmB,IAAIE,GAAU,CAACC,aAAc,EAAGC,YAAa,EAAGC,mBAAoB,EAAGC,oBAAqB,IACzHL,mBAAoB,IAAIC,GAAU,CAACC,aAAc,EAAGC,YAAa,EAAGC,mBAAoB,EAAGC,oBAAqB,MAGxI,SAASiB,GAAiBC,GACzBvL,GACAuL,EAAW7d,SAAQ,SAACic,GACZA,EAAMI,oBACN/J,EAAY+J,kBAAkBO,aAC9BtK,EAAY+J,kBAAkBG,cAAuD,EAAvCP,EAAMI,kBAAkBG,aACtElK,EAAY+J,kBAAkBI,aAAqD,EAAtCR,EAAMI,kBAAkBI,YACrEnK,EAAY+J,kBAAkBK,oBAAmE,EAA7CT,EAAMI,kBAAkBK,mBAC5EpK,EAAY+J,kBAAkBM,qBAAqE,EAA9CV,EAAMI,kBAAkBM,qBAE7EV,EAAMK,qBACNhK,EAAYgK,mBAAmBM,aAC/BtK,EAAYgK,mBAAmBE,cAAwD,EAAxCP,EAAMK,mBAAmBE,aACxElK,EAAYgK,mBAAmBG,aAAsD,EAAvCR,EAAMK,mBAAmBG,YACvEnK,EAAYgK,mBAAmBI,oBAAoE,EAA9CT,EAAMK,mBAAmBI,mBAC9EpK,EAAYgK,mBAAmBK,qBAAsE,EAA/CV,EAAMK,mBAAmBK,wBCjD/F,SAASmB,GAAatZ,GAClB,OAAOA,GAAKA,EAAElF,KAAOkF,EAAElF,KAAOkF,EAwClC,SAASuZ,GAAgBvZ,GACrB,OAAOA,GAAKA,EAAEsO,QAAUtO,EAAEsO,QAAUtO,EAQxC,SAASwZ,GAAiBC,EAAWpD,EAASqD,GAC1C,IAAMC,EA3CV,SAASC,EAAgBvD,GACrB,GAAIA,EAAS,CACT,GAAyB,mBAAbA,EAER,OACG,GAAyB,WAArB,IAAQA,GAAuB,CACtC,IAAMwD,EAAUrJ,MAAMqJ,QAAQxD,GACxBsD,EAAmBE,EAAU,GAAK,GAExC,GAAIA,EACAxD,EAAQ7a,SAAQ,SAAAse,GACZH,EAAiB/c,KAAKgd,EAAgBE,YAG1C,IAAK,IAAMzkB,KAAYghB,EACF,gBAAbhhB,GACa,WAAbA,GACa,SAAbA,GACa,mBAAbA,IACAskB,EAAiBtkB,GAAYukB,EAAgBvD,EAAQhhB,KAIjE,OAAOskB,GAGf,OAAOtD,EAiBkBuD,CAAgBvD,GAEzCxK,EAAI,CAAC4N,YAAWpD,WADCqD,EAAUzN,EAAUjB,UAAUvI,MAAQwJ,EAAUjB,UAAUrI,KACvCsJ,EAAUhB,WAAWC,QAEzD6C,EAAYgM,YAAY,CACpBjf,KAAMmR,EAAUhM,aAAaG,IAC7BiW,QAAS,CAAEoD,YAAWpD,QAASsD,EAAkBD,aASzD,SAASM,GAAcP,EAAWpD,GAA6B,IAApB4D,IAAoB,yDAC3DlM,EAAYgM,YAAY,CACpBjf,KAAMmR,EAAUhM,aAAaI,2BAC7BgW,QAAS,CAAE6D,mBAAoBT,EAAWU,sBAAuB9D,KAEjE4D,GACAT,GAAiBC,EAAWpD,GAAS,GAU7C,SAAS+D,GAAcC,EAAW1jB,EAAO8iB,GAErCa,QAAQ3jB,MAAR,+BAAsC0jB,EAAtC,0BAAiEZ,GAAa9iB,GAC9EqjB,GAAc/N,EAAUhK,WAAWQ,MAAO,CAAE6L,QAASrC,EAAUxH,WAAW4V,KAAc,GACxFb,GAAiBC,EAAW,CAAEY,YAAW1jB,UAAS,GAQtD,SAAS4jB,GAAoB5jB,EAAO8iB,GAEhC,IAAMpD,EAAU,CACZmE,YAAa,CACTpM,UAAWzX,EAAMyX,UACjBC,UAAW1X,EAAM0X,UACjBC,QAAS3X,EAAM2X,UAGvBgM,QAAQ3jB,MAAR,oDAA2D8iB,GAAapD,GACxE2D,GAAc/N,EAAUhK,WAAWQ,MAAO4T,GAAS,GACnDmD,GAAiBC,EAAW,CAAEY,UAAWpO,EAAUxH,WAAWC,aAAc/N,UAAS,GAGzF,SAAS8jB,GAAahB,EAAWpD,GAE7BiE,QAAQ5jB,KAAR,oDAA0D+iB,EAA1D,yBAAoFhO,KAAKC,UAAU2K,KACnG2D,GAAc/N,EAAUhK,WAAWU,KAAM,CAAE2L,QAASrC,EAAU1H,UAAUkV,KAAc,GACtFD,GAAiBC,EAAWpD,GAAS,G,SAM1BqE,K,sEAAf,0CAAA/a,EAAA,+EAEwCqO,EAAgB2M,iBAFxD,cAEcC,EAFd,gBAGyC5M,EAAgB6M,kBAHzD,cAGcC,EAHd,OAIQvM,GAAUU,oBAAoB2L,EAAmBvK,GACjD9B,GAAUU,oBAAoB6L,EAAoB3L,GAC9C2L,EAAmBjL,aACnBgJ,KAPZ,UASwC7K,EAAgB+M,iBATxD,QAScC,EATd,OAUQzM,GAAUU,oBAAoB+L,EAAmBlM,GAC3CC,EAAciM,EAAkBjM,YAChCjU,EAAOmR,EAAUhM,aAAaE,gBAC9BkW,EAAU,CACZ4E,aAAW,WAENhP,EAAUrD,kBAAkBE,OAAU8R,EAAkBtK,QAFlD,MAGNrE,EAAUrD,kBAAkBG,eAAkB6R,EAAkBrK,eAH1D,GAKX2K,cAAY,WACPjP,EAAUjD,kBAAkBvI,KAAQqa,EAAmB1L,SADhD,MAEPnD,EAAUjD,kBAAkBC,OAAU6R,EAAmBzL,WAFlD,MAGPpD,EAAUjD,kBAAkBE,MAAS4R,EAAmBxL,UAHjD,MAIPrD,EAAUjD,kBAAkBG,KAAQ2R,EAAmBvL,SAJhD,MAKPtD,EAAUjD,kBAAkBlF,qBAAwBgX,EAAmBtL,uBALhE,MAMPvD,EAAUjD,kBAAkBI,cAAiB0R,EAAmBrL,cANzD,MAOPxD,EAAUjD,kBAAkBK,eAAkByR,EAAmBpL,kBAP1D,MAQPzD,EAAUjD,kBAAkBM,6BAAgCwR,EAAmBnL,sBARxE,MASP1D,EAAUjD,kBAAkBO,gCAAmCuR,EAAmBlL,kBAT3E,MAUP3D,EAAUjD,kBAAkBQ,qBAAwBsR,EAAmBhL,uBAVhE,MAWP7D,EAAUjD,kBAAkBjH,oBAAuB+Y,EAAmB/K,sBAX/D,MAYP9D,EAAUjD,kBAAkBS,IAAOqR,EAAmBjL,aAZ/C,MAaP5D,EAAUjD,kBAAkBU,eAAkBoR,EAAmB9K,kBAb1D,MAcP/D,EAAUjD,kBAAkBW,sBAAyBmR,EAAmB7K,uBAdjE,MAePhE,EAAUjD,kBAAkBY,sBAAyBkR,EAAmB5K,wBAfjE,MAgBPjE,EAAUjD,kBAAkBR,UAAasS,EAAmB3K,cAhBrD,GAkBZgL,eAAgBpM,EAAYjX,OAAS,EAAIiX,EAAY,GAAK,MAE9DhB,EAAYgM,YAAY,CACpBjf,OACAub,YAEJmD,GAAiB1e,EAAMub,GAAS,GA3CxC,kDA8CQtI,EAAYgM,YAAY,CACpBjf,KAAMmR,EAAUhM,aAAaE,gBAC7BkW,QAAS,KAEbmD,GAAiBvN,EAAUhM,aAAaE,gBAAiB,IAAI,GAlDrE,2D,+BAuDeib,G,yEAAf,WAAqC9M,GAArC,+HAAA3O,EAAA,uDACU8Z,EAAYnL,EAAQ5B,KAAK5R,QACbmR,EAAUhM,aAAaG,KACrCoZ,GAAiBC,EAAWnL,EAAQ5B,MAAM,GAHlD,KAKY+M,EALZ,cAMaxN,EAAUhM,aAAaK,YANpC,SAiCa2L,EAAUhM,aAAaM,aAjCpC,UA+Ca0L,EAAUhM,aAAaO,SA/CpC,UAqEayL,EAAUhM,aAAaQ,KArEpC,UAiFawL,EAAUhM,aAAaS,OAjFpC,UA6FauL,EAAUhM,aAAaU,KA7FpC,UAgHasL,EAAUhM,aAAaW,OAhHpC,WAmIaqL,EAAUhM,aAAaY,iBAnIpC,WA6JaoL,EAAUhM,aAAaa,iBA7JpC,WA0KamL,EAAUhM,aAAac,KA1KpC,WAmMakL,EAAUhM,aAAae,YAnMpC,WA0MaiL,EAAUhM,aAAagB,mBA1MpC,WAyOagL,EAAUhM,aAAaiB,kBAzOpC,WAuPa+K,EAAUhM,aAAamB,WAvPpC,WAmQa6K,EAAUhM,aAAakB,gBAnQpC,WA6Ra8K,EAAUhM,aAAaoB,gBA7RpC,WAySa4K,EAAUhM,aAAaqB,iBAzSpC,WAqTa2K,EAAUhM,aAAasB,OArTpC,WAmUa0K,EAAUhM,aAAauB,QAnUpC,WAuUayK,EAAUhM,aAAawB,aAvUpC,WA0UawK,EAAUhM,aAAayB,gBA1UpC,WAmYauK,EAAUhM,aAAa0B,iBAnYpC,WAgZasK,EAAUhM,aAAa2B,yBAhZpC,WA+ZaqK,EAAUhM,aAAa4B,qBA/ZpC,WAkaaoK,EAAUhM,aAAaG,IAlapC,WAuaa6L,EAAUhM,aAAa6B,eAvapC,WA2bamK,EAAUhM,aAAa+B,sBA3bpC,WAycaiK,EAAUhM,aAAa8B,oBAzcpC,kCAQoBuM,EAAQ5B,KAAK7Y,OAAQya,EAAQ5B,KAAK7Y,KAAKyhB,UACvChH,EAAQ5B,KAAK7Y,KAAKyhB,SAAS+F,gBAAkBpP,EAAUnE,UAAUE,SAASqT,cAT9F,oDAYgBlC,MACIlL,EAbpB,kCAcgDD,EAAgBsN,uBAdhE,QAc0BC,EAd1B,OAeoBhN,GAAUU,oBAAoBsM,EAAejD,IAC7CrK,GAAwB,EACxB+L,GAAc/N,EAAUhK,WAAWmC,kBAAmBmX,EAAczJ,OAjBxF,yBAmBoC9D,EAAgBwN,WAAWlN,EAAQ5B,KAAK7Y,MAnB5E,QAmBoBwiB,EAnBpB,OAoBgB9H,GAAUU,oBAAoBoH,EAASzE,GAEvCoI,IADQnmB,EAASwiB,EAATxiB,MACWyhB,SAAS+F,gBAAkBpP,EAAUnE,UAAUG,SAASoT,cACvEpP,EAAUhK,WAAWE,aAAe8J,EAAUhK,WAAWG,eAAgBvO,GAvB7F,kDAyBgBoa,GAAwB,EACpB,gBAAaE,EACboM,GAAoB,EAAD,GAAItO,EAAUhM,aAAaK,aAE9Cma,GAAaxO,EAAU1H,UAAUC,wBAAyB,CAACiX,YAAaxP,EAAUhM,aAAaK,YAAaob,eAAgB,EAAF,KA7B9I,wEAmCuC1N,EAAgB2N,YAAYrN,EAAQ5B,KAAK7Y,MAnChF,QAmCsBwiB,EAnCtB,OAoCgB9H,GAAUU,oBAAoBoH,EAASzE,GAC/B/d,EAASwiB,EAATxiB,KACRmmB,GAAc/N,EAAUhK,WAAWO,OAAQ3O,GAtC3D,mDAwCoB,gBAAasa,EACboM,GAAoB,EAAD,GAAItO,EAAUhM,aAAaM,cAE9C6Z,GAAcnO,EAAUxH,WAAWS,yBAAtB,KAAmD+G,EAAUhM,aAAaM,cA3C3G,wEAiDsCyN,EAAgB4N,QAAQtN,EAAQ5B,KAAK7Y,KAAMya,EAAQ5B,KAAKgJ,aAjD9F,eAiDsBW,EAjDtB,OAkDgB9H,GAAUU,oBAAoBoH,EAASxE,GAlDvD,UAmDgD7D,EAAgB+M,iBAnDhE,QAmDsBC,EAnDtB,OAoDgBzM,GAAUU,oBAAoB+L,EAAmBlM,GAC3CC,EAAciM,EAAkBjM,YAC9B+C,EAAUuE,EAAVvE,MAEmB,IAAvB/C,EAAYjX,OACZkiB,GAAc/N,EAAUhK,WAAWO,OAAQsP,GAE3CkI,GAAc/N,EAAUhK,WAAWc,oBAAqB+O,EAAMha,OAAS,GAAKga,EAAM,IA3DtG,mDA8DoB,gBAAa3D,EACboM,GAAoB,EAAD,GAAItO,EAAUhM,aAAaO,UAE9C4Z,GAAcnO,EAAUxH,WAAWU,qBAAtB,KAA+C8G,EAAUhM,aAAaO,UAjEvG,wEAuEsCwN,EAAgB6N,OAvEtD,QAuEsBxF,EAvEtB,OAwEgByF,GAAa,CAACrC,UAAWxN,EAAUhK,WAAWK,YAAa+T,YAxE3E,mDA0EoB,gBAAalI,EACboM,GAAoB,EAAD,GAAItO,EAAUhM,aAAaQ,MAE9C2Z,GAAcnO,EAAUxH,WAAWa,kBAAtB,KAA4C2G,EAAUhM,aAAaQ,MA7EpG,wEAmFsCuN,EAAgB+N,SAnFtD,QAmFsB1F,EAnFtB,OAoFgByF,GAAa,CAACrC,UAAWxN,EAAUhK,WAAWK,YAAa+T,YApF3E,mDAsFoB,gBAAalI,EACboM,GAAoB,EAAD,GAAItO,EAAUhM,aAAaS,QAE9C0Z,GAAcnO,EAAUxH,WAAWc,oBAAtB,KAA8C0G,EAAUhM,aAAaS,QAzFtG,wEA+FsCsN,EAAgBgO,KAAK1N,EAAQ5B,KAAK7Y,MA/FxE,QA+FsBwiB,EA/FtB,OAgGgByF,GAAa,CAACrC,UAAWxN,EAAUhK,WAAWM,YAAa8T,YAhG3E,yDAkGoB,gBAAalI,GAlGjC,iBAmGoBoM,GAAoB,EAAD,GAAItO,EAAUhM,aAAaU,MAnGlE,8BAqG2B2Y,GAAa,EAAD,IArGvC,cAsG6BrN,EAAUxH,WAAWkB,oBAtGlD,4BAuG4ByU,GAAcnO,EAAUxH,WAAWkB,oBAAqB4T,GAAgB,EAAD,IAAKtN,EAAUhM,aAAaU,MAvG/H,sCA0G4ByZ,GAAcnO,EAAUxH,WAAWW,kBAAmBmU,GAAgB,EAAD,IAAKtN,EAAUhM,aAAaU,MA1G7H,kGAkHsCqN,EAAgBiO,OAAO3N,EAAQ5B,KAAK7Y,MAlH1E,SAkHsBwiB,EAlHtB,OAmHgByF,GAAa,CAACrC,UAAWxN,EAAUhK,WAAWM,YAAa8T,YAnH3E,4DAqHoB,gBAAalI,GArHjC,kBAsHoBoM,GAAoB,EAAD,GAAItO,EAAUhM,aAAaW,QAtHlE,+BAwH2B0Y,GAAa,EAAD,IAxHvC,cAyH6BrN,EAAUxH,WAAWkB,oBAzHlD,8BA0H4ByU,GAAcnO,EAAUxH,WAAWkB,oBAAqB4T,GAAgB,EAAD,IAAKtN,EAAUhM,aAAaW,QA1H/H,sCA6H4BwZ,GAAcnO,EAAUxH,WAAWY,oBAAqBkU,GAAgB,EAAD,IAAKtN,EAAUhM,aAAaW,QA7H/H,uFAqIsBiV,EAAavH,EAAQ5B,KAAKmJ,YAAc,GACxCC,EAAmBxH,EAAQ5B,KAAKoJ,mBAAoB,EAtI1E,WAuIsC9H,EAAgBkO,eAAe5N,EAAQ5B,KAAKgJ,YAAaG,EAAYC,GAvI3G,SAuIsBO,EAvItB,OAwIgB9H,GAAUU,oBAAoBoH,EAAS3D,IAC/BP,EAAYkE,EAAZlE,QACR6H,GAAc/N,EAAUhK,WAAWsB,wBAAyB,CAAE4O,YA1I9E,6DA4IoB,iBAAahE,GA5IjC,kBA6IoBoM,GAAoB,EAAD,IAAItO,EAAUhM,aAAaY,kBA7IlE,0BA+IwByN,EAAQ5B,KAAKmJ,YACbmE,GAAc/N,EAAUhK,WAAWsB,wBAAyB,CAAE4O,SAAS,IAhJ/F,MAkJ2BmH,GAAa,EAAD,KAlJvC,eAmJ6BrN,EAAUxH,WAAWM,qBAnJlD,8BAoJ4BqV,GAAcnO,EAAUxH,WAAWM,qBAAsBwU,GAAgB,EAAD,KAAKtN,EAAUhM,aAAaY,kBApJhI,sCAuJ4BuZ,GAAcnO,EAAUxH,WAAWO,yBAA0BuU,GAAgB,EAAD,KAAKtN,EAAUhM,aAAaY,kBAvJpI,kGA+JsCmN,EAAgBmO,iBA/JtD,SA+JsB9F,EA/JtB,OAgKgB9H,GAAUU,oBAAoBoH,EAASS,IACvCkD,GAAc/N,EAAUhK,WAAWuB,wBAAyB6S,GAjK5E,wDAmKoB,iBAAalI,EACboM,GAAoB,EAAD,IAAItO,EAAUhM,aAAaa,kBAE9CsZ,GAAcnO,EAAUxH,WAAWyC,yBAA0BqS,GAAgB,EAAD,KAAKtN,EAAUhM,aAAaa,kBAtK5H,4EA4KsCkN,EAAgBoO,KAAK,IAAI1K,GAAQpD,EAAQ5B,KAAK+E,UA5KpF,SA4KsB4E,EA5KtB,OA6KgB9H,GAAUU,oBAAoBoH,EAASzE,GAC/B/d,EAASwiB,EAATxiB,KACRmmB,GAAc/N,EAAUhK,WAAWE,aAActO,GA/KjE,2DAiLgBmmB,GAAc/N,EAAUhK,WAAWI,eAC/B,iBAAa8L,GAlLjC,kBAmLoBoM,GAAoB,EAAD,IAAItO,EAAUhM,aAAac,MAnLlE,gCAqL2BuY,GAAa,EAAD,KArLvC,eAsL6BrN,EAAUxH,WAAWyB,oBAtLlD,YAyL6B+F,EAAUxH,WAAWE,cAzLlD,8BAuL4ByV,GAAcnO,EAAUxH,WAAWyB,oBAAqBqT,GAAgB,EAAD,KAAKtN,EAAUhM,aAAac,MAvL/H,sCA0L4BqZ,GAAcnO,EAAUxH,WAAWE,cAAe4U,GAAgB,EAAD,KAAKtN,EAAUhM,aAAac,MA1LzH,sCA6L4BqZ,GAAcnO,EAAUxH,WAAW8B,uBAAwBgT,GAAgB,EAAD,KAAKtN,EAAUhM,aAAac,MA7LlI,kGAqMsBiN,EAAgBqO,WAAW/N,EAAQ5B,KAAKsJ,QArM9D,iEAuMgBwD,GAAiBvN,EAAUhM,aAAae,YAAasN,EAAQ5B,KAAKsJ,QAAQ,GAvM1F,4EA4MsChI,EAAgBsO,iBAAiBhO,EAAQ5B,KAAK6P,QA5MpF,SA4MsBlG,EA5MtB,OA6MgB9H,GAAUU,oBAAoBoH,EAAS/E,GACjCC,EAAW8E,EAAQ9E,SAASiL,KAAI,SAAC/K,GACnC,MAAO,CACH8C,GAAI9C,EAAQ8C,GACZzZ,KAAM2W,EAAQ3W,KACd7G,KAAMwd,EAAQxd,KACdkd,YAAaM,EAAQN,YACrBqD,OAAQ/C,EAAQ+C,OAChBC,UAAWhD,EAAQgD,UACnBC,YAAajD,EAAQiD,YACrBC,MAAOlD,EAAQkD,MACfC,aAAcnD,EAAQmD,aACtBG,cAAetD,EAAQsD,cACvBF,SAAUpD,EAAQoD,SAClBC,YAAarD,EAAQqD,gBAG7BkF,GAAc/N,EAAUhK,WAAWW,eAAgB,CAC/C2O,WAAUC,aAAc6E,EAAQ7E,eA/NpD,wDAkOoB,iBAAarD,EACboM,GAAoB,EAAD,IAAItO,EAAUhM,aAAagB,oBAE9CmZ,GAAcnO,EAAUxH,WAAWsB,2BAAtB,MAAqDkG,EAAUhM,aAAagB,oBArO7G,4EA6OsC+M,EAAgByO,KAAKnO,EAAQ5B,KAAKgQ,WAAYpO,EAAQ5B,KAAKiQ,cA7OjG,SA6OsBtG,EA7OtB,OA8OgByF,GAAa,CAAErC,UAAWxN,EAAUhK,WAAWmB,qBAAsBiT,YA9OrF,wDAgPoB,iBAAalI,EACboM,GAAoB,EAAD,IAAItO,EAAUhM,aAAaiB,mBAE9CkZ,GAAcnO,EAAUxH,WAAWuB,0BAAtB,MAAoDiG,EAAUhM,aAAaiB,mBAnP5G,4EAyPsC8M,EAAgB4O,WAAWtO,EAAQ5B,KAAKoF,OAzP9E,SAyPsBuE,EAzPtB,OA0PgByF,GAAa,CAAErC,UAAWxN,EAAUhK,WAAWoB,yBAA0BgT,YA1PzF,wDA4PoB,iBAAalI,EACboM,GAAoB,EAAD,IAAItO,EAAUhM,aAAamB,YAE9CgZ,GAAcnO,EAAUxH,WAAWwB,mBAAtB,MAA6CgG,EAAUhM,aAAamB,YA/PrG,4EAqQsC4M,EAAgB6O,eAAe,IAAInL,GAAQpD,EAAQ5B,KAAK+E,SAAUnD,EAAQ5B,KAAK7Y,KAAMya,EAAQ5B,KAAKoQ,iBArQxI,SAqQsBzG,EArQtB,OAsQgByF,GAAa,CAAErC,UAAWxN,EAAUhK,WAAWY,kBAAmBwT,YAC9D/H,EAAQ5B,KAAKoQ,iBACb9C,GAAc/N,EAAUhK,WAAWO,OAAQ8L,EAAQ5B,KAAK7Y,MAxQ5E,2DA4QgBmmB,GAAc/N,EAAUhK,WAAWc,oBAAqB,CACpDyS,OAAQvJ,EAAUhK,WAAWQ,MAAM4Y,kBAEnC,iBAAalN,GA/QjC,kBAgRoBoM,GAAoB,EAAD,IAAItO,EAAUhM,aAAakB,iBAhRlE,gCAkR2BmY,GAAa,EAAD,KAlRvC,eAmR6BrN,EAAUxH,WAAWyB,oBAnRlD,8BAoR4BkU,GAAcnO,EAAUxH,WAAWyB,oBAAqBqT,GAAgB,EAAD,KAAKtN,EAAUhM,aAAakB,iBApR/H,sCAuR4BiZ,GAAcnO,EAAUxH,WAAW4B,wBAAyBkT,GAAgB,EAAD,KAAKtN,EAAUhM,aAAakB,iBAvRnI,kGA+RsC6M,EAAgB+O,eAAezO,EAAQ5B,KAAK7Y,MA/RlF,SA+RsBwiB,EA/RtB,OAgSgByF,GAAa,CAAErC,UAAWxN,EAAUhK,WAAWkB,iBAAkBkT,YAhSjF,wDAkSoB,iBAAalI,EACboM,GAAoB,EAAD,IAAItO,EAAUhM,aAAaoB,iBAE9C+Y,GAAcnO,EAAUxH,WAAW+B,wBAAtB,MAAkDyF,EAAUhM,aAAaoB,iBArS1G,4EA2SsC2M,EAAgBgP,gBAAgB1O,EAAQ5B,KAAK7Y,MA3SnF,SA2SsBwiB,EA3StB,OA4SgByF,GAAa,CAAErC,UAAWxN,EAAUhK,WAAWkB,iBAAkBkT,YA5SjF,wDA8SoB,iBAAalI,EACboM,GAAoB,EAAD,IAAItO,EAAUhM,aAAaqB,kBAE9C8Y,GAAcnO,EAAUxH,WAAWgC,yBAAtB,MAAmDwF,EAAUhM,aAAaqB,kBAjT3G,4EAuTsC0M,EAAgBiP,SAvTtD,SAuTsB5G,EAvTtB,OAwTgB9H,GAAUU,oBAAoBoH,EAAS1D,IAC/BR,EAA8BkE,EAA9BlE,QAASM,EAAqB4D,EAArB5D,iBACjBuH,GAAc/N,EAAUhK,WAAWiB,cAAe,CAAEiP,UAASM,qBA1T7E,wDA4ToB,iBAAatE,EACboM,GAAoB,EAAD,IAAItO,EAAUhM,aAAasB,QAE9C6Y,GAAcnO,EAAUxH,WAAWoB,gBAAtB,MAA0CoG,EAAUhM,aAAasB,QA/TlG,sDAqUYyM,EAAgBkP,cAAc5O,EAAQ5B,KAAK4B,SArUvD,sCAwUYN,EAAgBmP,WAAW7O,EAAQ5B,KAAK7Y,MAxUpD,mCA2U6Bya,EAAQ5B,KAAK0Q,YA3U1C,oCA6UgDpP,EAAgB+M,iBA7UhE,SA6UsBC,EA7UtB,OA8UgBzM,GAAUU,oBAAoB+L,EAAmBlM,GAC3CC,EAAciM,EAAkBjM,YA/UtD,QAAApP,EAAA,KAgVqCoP,GAhVrC,sDAgV2BqC,EAhV3B,YAiV0Bvd,EAAOkb,EAAYqC,GACnBiM,GAAexpB,EAAKqd,UAAWrd,EAAKqd,SAAS0C,aAC7C0J,EAAmBzpB,EAAK0hB,gBAAkB1hB,EAAK0hB,eAAeL,kBAAoBjJ,EAAUxE,iBAAiBI,WAC7GwN,EAAwBiI,GAAoBzpB,EAAK0hB,gBAAkB1hB,EAAK0hB,eAAeF,uBACzFgI,EArVxB,kBAsVwBxpB,EAAK0pB,gBAAiB,EAtV9C,MAuV+B1pB,EAAKmG,MAvVpC,eAwViCiS,EAAUpC,WAAWE,UAxVtD,YAmWiCkC,EAAUpC,WAAWC,QAnWtD,YA2WiCmC,EAAUpC,WAAWG,aA3WtD,YAmXiCiC,EAAUpC,WAAWI,YAnXtD,2BAyVoCqT,EAzVpC,yBA0VoCrP,GAAwB,EACxB+L,GAAc/N,EAAUhK,WAAWkC,0BAA2BtQ,GAC1DwhB,GACA2E,GAAc/N,EAAUhK,WAAWgC,qBAAsBpQ,GA7VjG,sCAiWgCmmB,GAAc/N,EAAUhK,WAAWG,eAAgBvO,GAjWnF,mCAoWoCypB,EApWpC,yBAqWoCrP,GAAwB,EACxB+L,GAAc/N,EAAUhK,WAAWiC,wBAAyBrQ,GAtWhG,sCAyWgCmmB,GAAc/N,EAAUhK,WAAWE,aAActO,GAzWjF,sCA4WgCmmB,GAAc/N,EAAUhK,WAAWY,kBAAmB,CAClDsO,YAAatd,EAAK4d,QAAQN,YAC1BD,SAAUrd,EAAKqd,SACfD,oBAAqBpd,EAAK0hB,eAAetE,oBACzCG,OAAQvd,EAAKud,SAhXjD,sCAoXgC4I,GAAc/N,EAAUhK,WAAWa,sBAAuB,CACtDqO,YAAatd,EAAK4d,QAAQN,YAC1BD,SAAUrd,EAAKqd,SACfD,oBAAqBpd,EAAK0hB,eAAetE,oBACzCG,OAAQvd,EAAKud,SAxXjD,kKAqYqCpD,EAAgBwP,eAAelP,EAAQ5B,KAAKkJ,QArYjF,SAqYsB9Z,EArYtB,OAsYgByS,GAAUU,oBAAoBnT,EAAQ4W,IACtCsH,GAAc/N,EAAUhK,WAAW0B,qBAAsB7H,GAvYzE,wDAyYoB,iBAAaqS,EACboM,GAAoB,EAAD,IAAItO,EAAUhM,aAAa0B,kBAE9CyY,GAAcd,GAAa,EAAD,OAAQrN,EAAUxH,WAAWmC,4BAA8BqF,EAAUxH,WAAWmC,4BAA8BqF,EAAUxH,WAAWiC,yBAA2B6S,GAAgB,EAAD,KAAKtN,EAAUhM,aAAa0B,kBA5YvP,mEAkZgE2M,EAAQ5B,KAAhDyJ,EAlZxB,EAkZwBA,aAAcC,EAlZtC,EAkZsCA,cAAehF,GAlZrD,EAkZqDA,OAlZrD,WAmZqCpD,EAAgByP,sBAAsBtH,EAAcC,EAAehF,IAnZxG,SAmZsBtV,GAnZtB,OAoZgByS,GAAUU,oBAAoBnT,GAAQoW,IACtC8H,GAAc/N,EAAUhK,WAAW6B,qBAAsBhI,IArZzE,wDAwZsB4hB,GAA2B,IAAIxL,GAAyB,CAC1DC,SAAS,IAEb6H,GAAc/N,EAAUhK,WAAW6B,qBAAsB4Z,IAA0B,GACnFlE,GAAiBvN,EAAUhM,aAAa2B,yBAA0B8b,IAA0B,GA5Z5G,sDAgaY1P,EAAgBvB,aAAaF,KAhazC,yCAma0D+B,EAAQ5B,KAA1CX,GAnaxB,GAmawBA,SAAUD,GAnalC,GAmakCA,WAAYuK,GAna9C,GAma8CA,QAC9BrI,EAAgB+H,mBAAmBhK,GAAUD,GAAYuK,IApazE,iDAyagBpI,GAAwB,EAzaxC,WA0aqCD,EAAgB2P,cAAcrP,EAAQ5B,KAAK7Y,MA1ahF,gBA0asBiI,GA1atB,OA2agByS,GAAUU,oBAAoBnT,GAAQuc,IA3atD,WA4agDrK,EAAgB2M,iBA5ahE,gBA6aqCpK,cAAczV,OAASmR,EAAU9B,WAAWE,WAC7D2P,GAAc/N,EAAUhK,WAAWkC,0BAA2BrI,GAAOjI,MAErEmmB,GAAc/N,EAAUhK,WAAWiC,wBAAyBpI,GAAOjI,MAhbvF,wDAmbgBoa,GAAwB,EACpB,iBAAaE,EACboM,GAAoB,EAAD,IAAItO,EAAUhM,aAAa6B,gBAE9CsY,GAAcnO,EAAUxH,WAAWqC,uBAAtB,MAAiDmF,EAAUhM,aAAa6B,gBAvbzG,4EA6bqCkM,EAAgBsN,qBAAqBhN,EAAQ5B,KAAK7Y,MA7bvF,SA6bsBiI,GA7btB,OA8bgByS,GAAUU,oBAAoBnT,GAAQwc,IACtCrK,GAAwB,EACxB+L,GAAc/N,EAAUhK,WAAWmC,kBAAmBtI,GAAOgW,OAhc7E,wDAkcoB,iBAAa3D,EACboM,GAAoB,EAAD,IAAItO,EAAUhM,aAAa+B,uBAE9CoY,GAAcnO,EAAUxH,WAAWsC,8BAAtB,MAAwDkF,EAAUhM,aAAa+B,uBArchH,4EA2cqCgM,EAAgB4P,kBAAkBtP,EAAQ5B,KAAK7Y,MA3cpF,SA2csBiI,GA3ctB,OA4cgByS,GAAUU,oBAAoBnT,GAAQuc,IACtC2B,GAAc/N,EAAUhK,WAAWgC,qBAAsBnI,GAAOjI,MA7chF,wDA+coB,iBAAasa,EACboM,GAAoB,EAAD,IAAItO,EAAUhM,aAAa8B,qBAE9CqY,GAAcnO,EAAUxH,WAAWuC,4BAAtB,MAAsDiF,EAAUhM,aAAa8B,qBAld9G,6T,+BA4de8b,G,yEAAf,WAAoCvP,GAApC,qBAAA3O,EAAA,2DACY2O,EAAQ5B,KAAK5R,KADzB,cAEamR,EAAUhM,aAAaC,gBAFpC,qBAGkB4d,EAAW,2NACXC,EAAY,IAAI5Q,IAAImB,EAAQ0P,QAC5B5L,EAAM2L,EAAUE,SAAW,KAAOF,EAAUG,UAE9CJ,EAAStH,KAAKpE,GAP9B,wBAQgBrE,EAAcO,EAAQ6P,MAAM,IAChBC,UAAYhD,GACxB5B,GAAiBvN,EAAUhM,aAAaC,gBAAiBme,GAAuB/P,EAAQ5B,KAAK4R,kBAAkB,GAV/H,oBAY0CtQ,EAAgBuQ,KAAKjQ,EAAQ5B,KAAK4R,iBAZ5E,QAY0BjI,EAZ1B,OAaoB9H,GAAUU,oBAAoBoH,EAAS9D,IACnC8D,EAAQ7D,UACRwH,GAAc/N,EAAUhK,WAAWqB,WAAY,CAC3CmP,iBAAkB4D,EAAQ5D,mBAG9BiI,KAnBxB,wDAsBwB,gBAAavM,GAtBrC,iBAuBwBoM,GAAoB,EAAD,GAAItO,EAAUhM,aAAaC,iBAvBtE,6BAyB+BoZ,GAAa,EAAD,IAzB3C,cA0BiCrN,EAAUxH,WAAWqB,eA1BtD,2BA2BgCsU,GAAcnO,EAAUxH,WAAWqB,eAAgByT,GAAgB,EAAD,IAAKtN,EAAUhM,aAAaC,iBA3B9H,oCA8BgCka,GAAcnO,EAAUxH,WAAWmB,eAAgB2T,GAAgB,EAAD,IAAKtN,EAAUhM,aAAaC,iBA9B9H,oCAoCYse,OAAOC,oBAAoB,UAAWZ,IApClD,qH,sBA4CA,SAASQ,GAAuBhI,GAC5BA,EAAUA,GAAW,GACrB,IAAIxgB,EAAM,GAgBV,OAdAwV,EAAgC7P,SAAQ,SAAAkjB,GAChCrI,EAAQ9gB,eAAempB,KACvB7oB,EAAI6oB,GAAQrI,EAAQqI,OAI5BpT,EAA2C9P,SAAQ,SAAAkjB,GAC/CtqB,OAAOuJ,KAAK0Y,GAAS7a,SAAQ,SAAAvG,GACrBA,EAAI0pB,WAAWD,KAAUnT,EAAkCqT,SAAS3pB,KACpEY,EAAIZ,GAAOohB,EAAQphB,UAKxBY,EAGX,SAASgpB,GAAgBxI,EAASyI,EAAazE,EAAWZ,GACtD,IAEI,OADAlL,GAAUU,oBAAoBoH,EAASyI,IAChC,EACT,MAAO9e,GAIL,OAHIqa,GACAD,GAAcC,EAAWra,EAAGyZ,IAEzB,GASR,SAASsF,GAAoBC,GAChChR,EAAkBgR,EAClBR,OAAOS,iBAAiB,UAAWpB,IAUhC,SAASqB,GAAT,GACH1F,GADwD,EAA/BC,UAA+B,EAApBpD,QAAoB,EAAXqD,SAU1C,SAASyF,GAAT,GAA4C,IAApB1F,EAAoB,EAApBA,UAAW9iB,EAAS,EAATA,MACtC,GAAIA,aAAiBwX,EACjBoM,GAAoB5jB,EAAO8iB,QAI/B,OAAOA,GACH,KAAKxN,EAAUhK,WAAWgB,aACtBmX,GAAcnO,EAAUxH,WAAWmB,eAAgBjP,EAAOsV,EAAUhK,WAAWgB,cAC/E,MACJ,KAAKgJ,EAAUhK,WAAWiB,cACtBkX,GAAcnO,EAAUxH,WAAWoB,gBAAiBlP,EAAOsV,EAAUhK,WAAWiB,eAChF,MACJ,KAAK+I,EAAUhK,WAAWE,aACtBiY,GAAcnO,EAAUxH,WAAW8B,uBAAwB5P,EAAOsV,EAAUhK,WAAWE,cACvF,MACJ,KAAK8J,EAAUhK,WAAWC,oBACtBkY,GAAcnO,EAAUxH,WAAW8B,uBAAwB5P,EAAOsV,EAAUhK,WAAWC,qBACvF,MACJ,KAAK+J,EAAUhK,WAAWG,eACtBgY,GAAcnO,EAAUxH,WAAW8B,uBAAwB5P,EAAOsV,EAAUhK,WAAWG,gBACvF,MACJ,KAAK6J,EAAUhK,WAAWO,OACtB4X,GAAcnO,EAAUxH,WAAWU,qBAAsBxO,EAAOsV,EAAUhK,WAAWO,QACrF,MACJ,KAAKyJ,EAAUhK,WAAWY,kBACtBuX,GAAcd,GAAa3iB,KAAWsV,EAAUxH,WAAWkB,oBAAsBsG,EAAUxH,WAAWkB,oBAAsBsG,EAAUxH,WAAW4B,wBAAyB1P,EAAOsV,EAAUhK,WAAWY,mBACtM,MACJ,KAAKoJ,EAAUhK,WAAWa,sBACtBsX,GAAcnO,EAAUxH,WAAW6B,4BAA6B3P,EAAOsV,EAAUhK,WAAWa,uBAC5F,MACJ,KAAKmJ,EAAUhK,WAAWc,oBACtBqX,GAAcnO,EAAUxH,WAAW2B,2BAA4BzP,EAAOsV,EAAUhK,WAAWc,qBAC3F,MACJ,KAAKkJ,EAAUhK,WAAWK,YACtB8X,GAAcnO,EAAUxH,WAAWe,oBAAqB7O,EAAOsV,EAAUhK,WAAWK,aACpF,MACJ,KAAK2J,EAAUhK,WAAWM,YACtB6X,GAAcd,GAAa3iB,KAAWsV,EAAUxH,WAAWkB,oBAAsBsG,EAAUxH,WAAWkB,oBAAsBsG,EAAUxH,WAAWgB,oBAAqB9O,EAAOsV,EAAUhK,WAAWM,aAClM,MACJ,KAAK0J,EAAUhK,WAAWkB,iBACtBiX,GAAcnO,EAAUxH,WAAWiB,sBAAuB/O,EAAOsV,EAAUhK,WAAWkB,kBACtF,MACJ,KAAK8I,EAAUhK,WAAWmB,qBACtBgX,GAAcnO,EAAUxH,WAAWuB,0BAA2BrP,EAAOsV,EAAUhK,WAAWmB,sBAC1F,MACJ,KAAK6I,EAAUhK,WAAWoB,yBACtB+W,GAAcnO,EAAUxH,WAAWwB,mBAAoBtP,EAAOsV,EAAUhK,WAAWoB,0BACnF,MACJ,KAAK4I,EAAUhK,WAAW2B,YACtBwW,GAAcnO,EAAUxH,WAAWb,YAAajN,EAAOsV,EAAUhK,WAAW2B,aAC5E,MACJ,KAAKqI,EAAUhK,WAAW4B,gBACtB,OAAOyV,GAAa3iB,IAChB,KAAKsV,EAAUxH,WAAWI,oBACtBuV,GAAcnO,EAAUxH,WAAWI,oBAAqBlO,EAAOsV,EAAUhK,WAAW4B,iBACpF,MACJ,KAAKoI,EAAUxH,WAAWG,sBACtBwV,GAAcnO,EAAUxH,WAAWG,sBAAuBjO,EAAOsV,EAAUhK,WAAW4B,iBACtF,MACJ,QACIuW,GAAcnO,EAAUxH,WAAWE,cAAehO,EAAOsV,EAAUhK,WAAW4B,iBAEtF,MACJ,QACIyW,QAAQ3jB,MAAM,2CAA4CO,YAyB/D,SAAe4kB,GAAtB,mC,sCAAO,6FAAAnc,EAAA,sDAA8B8Z,EAA9B,EAA8BA,UAAWpD,EAAzC,EAAyCA,QAAzC,IAAkD4D,mBAAlD,cACIR,EADJ,cAEMxN,EAAUhK,WAAWgB,aAF3B,SAWMgJ,EAAUhK,WAAWiB,cAX3B,SAmBM+I,EAAUhK,WAAWE,aAnB3B,SAwBM8J,EAAUhK,WAAWC,oBAxB3B,UA6BM+J,EAAUhK,WAAWG,eA7B3B,UA2CM6J,EAAUhK,WAAWO,OA3C3B,UAiDMyJ,EAAUhK,WAAWY,kBAjD3B,UA6DMoJ,EAAUhK,WAAWa,sBA7D3B,UAyEMmJ,EAAUhK,WAAWc,oBAzE3B,UAqGMkJ,EAAUhK,WAAWT,QArG3B,UAyGMyK,EAAUhK,WAAWyB,wBAzG3B,UA4GMuI,EAAUhK,WAAWwB,cA5G3B,UAgHMwI,EAAUhK,WAAWmd,kBAhH3B,UAmHMnT,EAAUhK,WAAWK,YAnH3B,UAwHM2J,EAAUhK,WAAWM,YAxH3B,UAmIM0J,EAAUhK,WAAWkB,iBAnI3B,UAqJM8I,EAAUhK,WAAWmB,qBArJ3B,UAgKM6I,EAAUhK,WAAWoB,yBAhK3B,UA0KM4I,EAAUhK,WAAW8B,mBA1K3B,UAwLMkI,EAAUhK,WAAWgC,qBAxL3B,UA+LMgI,EAAUhK,WAAWoC,eA/L3B,UAsMM4H,EAAUhK,WAAWiC,wBAtM3B,UA8MM+H,EAAUhK,WAAWkC,0BA9M3B,UAsNM8H,EAAUhK,WAAWmC,kBAtN3B,UA8NM6H,EAAUhK,WAAWpB,iBA9N3B,UAyOMoL,EAAUhK,WAAWnB,iBAzO3B,UAmPMmL,EAAUhK,WAAWqC,aAnP3B,0BAGSua,GAAgBxI,EAAS3D,GAAezG,EAAUxH,WAAWmB,eAAgBqG,EAAUhK,WAAWgB,gBAClG+W,GAAc/N,EAAUhK,WAAWgB,aAAcoT,EAAS4D,GACtD5D,EAAQlE,SACRuI,MANb,mCAYSmE,GAAgBxI,EAAS1D,GAAc1G,EAAUxH,WAAWoB,gBAAiBoG,EAAUhK,WAAWiB,gBAClG8W,GAAc/N,EAAUhK,WAAWiB,cAAe,CAC9CiP,QAASkE,EAAQlE,QACjBM,iBAAkB4D,EAAQ5D,kBAC3BwH,GAhBZ,mCAoBS4E,GAAgBxI,EAASzE,EAAY3F,EAAUxH,WAAW8B,uBAAwB0F,EAAUhK,WAAWE,eACvG6X,GAAc/N,EAAUhK,WAAWE,aAAckU,EAAQxiB,KAAMomB,GArBxE,oCAyBS4E,GAAgBxI,EAASzE,EAAY3F,EAAUxH,WAAW8B,uBAAwB0F,EAAUhK,WAAWC,sBACvG8X,GAAc/N,EAAUhK,WAAWC,oBAAqBmU,EAAQxiB,KAAMomB,GA1B/E,iCA8BS4E,GAAgBxI,EAASzE,EAAY3F,EAAUxH,WAAW8B,uBAAwB0F,EAAUhK,WAAWG,gBA9BhH,oBA+BS+W,MACIlL,EAhCb,kCAiCyCD,EAAgBsN,uBAjCzD,eAiCmBC,EAjCnB,OAkCahN,GAAUU,oBAAoBsM,EAAejD,IAC7CrK,GAAwB,EACxB+L,GAAc/N,EAAUhK,WAAWmC,kBAAmBmX,EAAetB,GACrED,GAAc/N,EAAUhK,WAAWG,eAAgBiU,EAAQxiB,KAAMomB,GArC9E,6BAwCSD,GAAc/N,EAAUhK,WAAWG,eAAgBiU,EAAQxiB,KAAMomB,GAxC1E,mDA4CS4E,GAAgBxI,EAASxE,EAAc5F,EAAUxH,WAAWU,qBAAsB8G,EAAUhK,WAAWO,SACvGwX,GAAc/N,EAAUhK,WAAWO,OAAQ6T,EAAQvE,MAAOmI,GA7CnE,oCAkDS4E,GAAgBxI,EAASrF,EAAmB/E,EAAUxH,WAAW4B,wBAAyB4F,EAAUhK,WAAWY,qBACvGoO,EAAuDoF,EAAvDpF,oBAAqBC,EAAkCmF,EAAlCnF,SAAUC,EAAwBkF,EAAxBlF,YAAaC,EAAWiF,EAAXjF,OACpD4I,GAAc/N,EAAUhK,WAAWY,kBAAmB,CAClDoO,sBACAC,WACAC,cACAC,UACD6I,IAzDZ,oCA8DS4E,GAAgBxI,EAASrF,EAAmB/E,EAAUxH,WAAW6B,4BAA6B2F,EAAUhK,WAAWa,yBAC3GmO,EAAuDoF,EAAvDpF,oBAAqBC,EAAkCmF,EAAlCnF,SAAUC,EAAwBkF,EAAxBlF,YAAaC,EAAWiF,EAAXjF,OACpD4I,GAAc/N,EAAUhK,WAAWa,sBAAuB,CACtDmO,sBACAC,WACAC,cACAC,UACD6I,IArEZ,iCA6ES4E,GAAgBxI,EAASzE,EAAY3F,EAAUxH,WAAW2B,2BAA4B6F,EAAUhK,WAAWc,qBA7EpH,wBA8EiBlP,EAASwiB,EAATxiB,KA9EjB,UA+EyCma,EAAgB+M,iBA/EzD,QAgFa8D,GADE7D,EA/Ef,OAgFgDlM,KAGR,KADrBC,EAAciM,EAAkBjM,aACtBjX,OACZkiB,GAAc/N,EAAUhK,WAAWO,OAAQ3O,EAAMomB,GAC1CpmB,GAAQA,EAAK0hB,gBAAkB1hB,EAAK0hB,eAAeL,kBAAoBjJ,EAAUxE,iBAAiBE,gBAEnG0X,EAAejrB,OAAOiH,OAAO0T,GAAawN,QAAO,SAAC1mB,GAAD,OAASA,EAAG,WAAiBoW,EAAUnE,UAAU3G,mBAAiBtD,MAEzHmc,GADcqF,EAAarlB,QAAUiS,EAAUpC,WAAWG,aAAeiC,EAAUhK,WAAWY,kBAAoBoJ,EAAUhK,WAAWa,sBAClH,CACjBmO,qBAAsB,KAG1B+I,GAAc/N,EAAUhK,WAAWc,oBAAqB,CACpDyS,OAAQ3hB,EAAMA,EAAK2hB,OAAS,MAC7ByE,IA/FpB,mDAsGKD,GAAc/N,EAAUhK,WAAWT,QAAS6U,EAAS4D,GAtG1D,oCA0GKD,GAAc/N,EAAUhK,WAAWyB,wBAAyB2S,EAAS4D,GA1G1E,oCA6GKD,GAAc/N,EAAUhK,WAAWwB,cAAe4S,EAAS4D,GA7GhE,oCAiHKmB,GAAsB/E,GAjH3B,oCAoHSwI,GAAgBxI,EAASzH,EAAkB3C,EAAUxH,WAAWe,oBAAqByG,EAAUhK,WAAWK,cAC1G0X,GAAc/N,EAAUhK,WAAWK,YAAa+T,EAAS4D,GArHlE,oCAyHajI,EAA+CqE,EAA/CrE,mBAAoBC,EAA2BoE,EAA3BpE,iBAAkBH,EAASuE,EAATvE,MAC1C+M,GAAgBxI,EAAStE,EAAkB9F,EAAUxH,WAAWgB,oBAAqBwG,EAAUhK,WAAWM,cAC1GyX,GAAc/N,EAAUhK,WAAWM,YAAa,CAC5CyP,qBACAC,mBACAH,SACDmI,GA/HZ,oCAoIatJ,EAKJ0F,EALI1F,kBACJC,EAIAyF,EAJAzF,UACAC,EAGAwF,EAHAxF,iBACAC,EAEAuF,EAFAvF,WACAC,EACAsF,EADAtF,OAEA8N,GAAgBxI,EAAS3F,EAAuBzE,EAAUxH,WAAWiB,sBAAuBuG,EAAUhK,WAAWkB,mBACjH6W,GAAc/N,EAAUhK,WAAWkB,iBAAkB,CACjDwN,oBACAC,YACAC,mBACAC,aACAC,UACDkJ,GAjJZ,oCAsJS4E,GAAgBxI,EAAStE,EAAkB9F,EAAUxH,WAAWuB,0BAA2BiG,EAAUhK,WAAWmB,wBACxG4O,EAAgDqE,EAAhDrE,mBAAoBC,EAA4BoE,EAA5BpE,iBAAkBH,EAAUuE,EAAVvE,MAC9CkI,GAAc/N,EAAUhK,WAAWM,YAAa,CAC5CyP,qBACAC,mBACAH,SACDmI,IA5JZ,oCAiKS4E,GAAgBxI,EAAStE,EAAkB9F,EAAUxH,WAAWwB,mBAAoBgG,EAAUhK,WAAWoB,4BACjG2O,EAAyCqE,EAAzCrE,mBAAoBC,EAAqBoE,EAArBpE,iBAC5B+H,GAAc/N,EAAUhK,WAAWM,YAAa,CAC5CyP,qBACAC,oBACDgI,IAtKZ,oCA2KS4E,GAAgBxI,EAASmB,MACrBnB,EAAQoB,OACR2B,GAAiB/C,EAAQoB,OAEzBpB,EAAQqB,uBAAyBrB,EAAQjF,SACnCA,EAASiF,EAAQjF,OACjBkO,EAAMxG,KACZkB,GAAc/N,EAAUhK,WAAW+B,6BAA8B,CAACoN,SAAQkO,OAAMrF,KAlL7F,oCAyLS4E,GAAgBxI,EAASgC,GAAqBpM,EAAUxH,WAAWuC,4BAA6BiF,EAAUhK,WAAWgC,uBACrH+V,GAAc/N,EAAUhK,WAAWgC,qBAAsBoS,EAAQxiB,KAAMomB,GA1LhF,oCAgMS4E,GAAgBxI,EAASc,GAAqBlL,EAAUxH,WAAWE,cAAesH,EAAUhK,WAAWoC,iBACvG2V,GAAc/N,EAAUhK,WAAWoC,eAAgBgS,EAAS4D,GAjMrE,oCAuMS4E,GAAgBxI,EAASgC,GAAsBpM,EAAUxH,WAAWqC,uBAAwBmF,EAAUhK,WAAWiC,2BACjH+J,GAAwB,EACxB+L,GAAc/N,EAAUhK,WAAWiC,wBAAyBmS,EAAQxiB,KAAMomB,IAzMnF,oCA+MS4E,GAAgBxI,EAASgC,GAAsBpM,EAAUxH,WAAWqC,uBAAwBmF,EAAUhK,WAAWkC,6BACjH8J,GAAwB,EACxB+L,GAAc/N,EAAUhK,WAAWkC,0BAA2BkS,EAAQxiB,KAAMomB,IAjNrF,oCAuNS4E,GAAgBxI,EAASiC,GAAyBrM,EAAUxH,WAAWsC,8BAA+BkF,EAAUhK,WAAWmC,qBAC3H6J,GAAwB,EACxB+L,GAAc/N,EAAUhK,WAAWmC,kBAAmBiS,EAAQvE,MAAOmI,IAzN9E,oCA+NS4E,GAAgBxI,EAASK,GAAkBzK,EAAUxH,WAAWO,yBAA0BiH,EAAUhK,WAAWpB,oBACzG8V,EAAWN,EAAQM,SACzBqD,GAAc/N,EAAUhK,WAAWpB,iBAAkB,CAAE8V,YAAYsD,IAjO5E,oCA0OS4E,GAAgBxI,EAASS,GAAuB7K,EAAUxH,WAAWyC,yBAA0B+E,EAAUhK,WAAWnB,mBACpHkZ,GAAc/N,EAAUhK,WAAWnB,iBAAkBuV,GA3O9D,oCAoPQwI,GAAgBxI,EAASW,GAAmB/K,EAAUxH,WAAW0C,4BAA6B8E,EAAUhK,WAAWqC,eAClH0V,GAAc/N,EAAUhK,WAAWqC,aAAc+R,GArP1D,kE","file":"scv-connector-base.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SCVConnectorBase\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SCVConnectorBase\"] = factory();\n\telse\n\t\troot[\"SCVConnectorBase\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","module.exports = require(\"regenerator-runtime\");\n","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n\n    module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n\n    module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var _typeof = require(\"@babel/runtime/helpers/typeof\")[\"default\"];\n\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var getPrototypeOf = require(\"./getPrototypeOf.js\");\n\nvar setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nvar isNativeFunction = require(\"./isNativeFunction.js\");\n\nvar construct = require(\"./construct.js\");\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  return _wrapNativeSuper(Class);\n}\n\nmodule.exports = _wrapNativeSuper;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nmodule.exports = _isNativeFunction;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\n\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct.js\");\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct;\n    module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n\n    module.exports[\"default\"] = module.exports, module.exports.__esModule = true;\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = _isNativeReflectConstruct;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nexport default {\n    MESSAGE_TYPE: {\n        // Framework Message Types\n        SETUP_CONNECTOR: 'SETUP_CONNECTOR',\n        CONNECTOR_READY: 'CONNECTOR_READY',\n\n        // Telephony Message Types: sent from SFDC to Telephony Vendor\n        LOG: 'LOG',\n        TELEPHONY_EVENT_DISPATCHED: 'TELEPHONY_EVENT_DISPATCHED',\n        ACCEPT_CALL: 'ACCEPT_CALL',\n        DECLINE_CALL: 'DECLINE_CALL',\n        END_CALL: 'END_CALL',\n        MUTE: 'MUTE',\n        UNMUTE: 'UNMUTE',\n        HOLD: 'HOLD',\n        RESUME: 'RESUME',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        DIAL: 'DIAL',\n        SEND_DIGITS: 'SEND_DIGITS',\n        GET_PHONE_CONTACTS: 'GET_PHONE_CONTACTS',\n        SWAP_PARTICIPANTS: 'SWAP_PARTICIPANTS',\n        ADD_PARTICIPANT: 'ADD_PARTICIPANT',\n        CONFERENCE: 'CONFERENCE',\n        PAUSE_RECORDING: 'PAUSE_RECORDING',\n        RESUME_RECORDING: 'RESUME_RECORDING',\n        LOGOUT: 'LOGOUT',\n        MESSAGE: 'MESSAGE',\n        WRAP_UP_CALL: 'WRAP_UP_CALL',\n        AGENT_AVAILABLE: 'AGENT_AVAILABLE',\n        SET_AGENT_CONFIG: 'SET_AGENT_CONFIG',\n        GET_SIGNED_RECORDING_URL: 'GET_SIGNED_RECORDING_URL',\n        DOWNLOAD_VENDOR_LOGS: 'DOWNLOAD_VENDOR_LOGS',\n        SUPERVISE_CALL: 'SUPERVISE_CALL',\n        SUPERVISOR_BARGE_IN : 'SUPERVISOR_BARGE_IN',\n        SUPERVISOR_DISCONNECT: 'SUPERVISOR_DISCONNECT'\n    },\n    EVENT_TYPE: {\n        QUEUED_CALL_STARTED: 'QUEUED_CALL_STARTED',\n        CALL_STARTED: 'CALL_STARTED',\n        CALL_CONNECTED: 'CALL_CONNECTED',\n        CALL_FAILED: 'CALL_FAILED',\n        MUTE_TOGGLE: 'MUTE_TOGGLE',\n        HOLD_TOGGLE: 'HOLD_TOGGLE',\n        HANGUP: 'HANGUP',\n        ERROR: 'ERROR',\n        WARNING: 'WARNING',\n        INFO: 'INFO',\n        PHONE_CONTACTS: 'PHONE_CONTACTS',\n        PARTICIPANT_ADDED: 'PARTICIPANT_ADDED',\n        PARTICIPANT_CONNECTED: 'PARTICIPANT_CONNECTED',\n        PARTICIPANT_REMOVED: 'PARTICIPANT_REMOVED',\n        LOGIN_STARTED: 'LOGIN_STARTED',\n        LOGIN_RESULT: 'LOGIN_RESULT', // info about timeout, error, success etc\n        LOGOUT_RESULT: 'LOGOUT_RESULT',\n        RECORDING_TOGGLE: 'RECORDING_TOGGLE',\n        PARTICIPANTS_SWAPPED: 'PARTICIPANTS_SWAPPED',\n        PARTICIPANTS_CONFERENCED: 'PARTICIPANTS_CONFERENCED',\n        SHOW_LOGIN: 'SHOW_LOGIN',\n        SET_AGENT_STATUS_RESULT: 'SET_AGENT_STATUS_RESULT',\n        GET_AGENT_STATUS_RESULT: 'GET_AGENT_STATUS_RESULT',\n        WRAP_UP_ENDED: 'WRAP_UP_ENDED',\n        MESSAGE: 'MESSAGE',\n        AFTER_CALL_WORK_STARTED: 'AFTER_CALL_WORK_STARTED',\n        AGENT_CONFIG_UPDATED: 'AGENT_CONFIG_UPDATED',\n        AGENT_ERROR: 'AGENT_ERROR',\n        SOFTPHONE_ERROR: 'SOFTPHONE_ERROR',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        UPDATE_AUDIO_STATS: 'UPDATE_AUDIO_STATS',\n        UPDATE_AUDIO_STATS_COMPLETED: 'UPDATE_AUDIO_STATS_COMPLETED',\n        SUPERVISOR_BARGED_IN: 'SUPERVISOR_BARGED_IN',\n        SUPERVISOR_CALL_STARTED : 'SUPERVISOR_CALL_STARTED',\n        SUPERVISOR_CALL_CONNECTED: 'SUPERVISOR_CALL_CONNECTED',\n        SUPERVISOR_HANGUP : 'SUPERVISOR_HANGUP',\n        CALL_BARGED_IN : 'CALL_BARGED_IN',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        STATE_CHANGE: 'STATE_CHANGE'\n    },\n    INFO_TYPE: {\n        CAN_NOT_ACCEPT_THE_CALL: 'CAN_NOT_ACCEPT_THE_CALL'\n    },\n    ERROR_TYPE: {\n        CUSTOM_ERROR: 'CUSTOM_ERROR',\n        GENERIC_ERROR: 'GENERIC_ERROR',\n        AGENT_ERROR: 'AGENT_ERROR',\n        MICROPHONE_NOT_SHARED: 'MICROPHONE_NOT_SHARED',\n        UNSUPPORTED_BROWSER: 'UNSUPPORTED_BROWSER',\n        AUTHENTICATION_ERROR: 'AUTHENTICATION_ERROR',\n        INVALID_AGENT_STATUS: 'INVALID_AGENT_STATUS',\n        CAN_NOT_SET_AGENT_STATUS: 'CAN_NOT_SET_AGENT_STATUS',\n        LOGIN_REQUIRED: 'LOGIN_REQUIRED',\n        CAN_NOT_DECLINE_THE_CALL: 'CAN_NOT_DECLINE_THE_CALL',\n        CAN_NOT_END_THE_CALL: 'CAN_NOT_END_THE_CALL',\n        CAN_NOT_HOLD_CALL: 'CAN_NOT_HOLD_CALL',\n        CAN_NOT_RESUME_CALL: 'CAN_NOT_RESUME_CALL',\n        CAN_NOT_MUTE_CALL: 'CAN_NOT_MUTE_CALL',\n        CAN_NOT_UNMUTE_CALL: 'CAN_NOT_UNMUTE_CALL',\n        CAN_NOT_TOGGLE_MUTE: 'CAN_NOT_TOGGLE_MUTE',\n        CAN_NOT_TOGGLE_HOLD: 'CAN_NOT_TOGGLE_HOLD',\n        CAN_NOT_TOGGLE_RECORD: 'CAN_NOT_TOGGLE_RECORD',\n        INVALID_PARTICIPANT: 'INVALID_PARTICIPANT',\n        CAN_NOT_LOG_IN: 'CAN_NOT_LOG_IN',\n        CAN_NOT_LOG_OUT: 'CAN_NOT_LOG_OUT',\n        INVALID_PARAMS: 'INVALID_PARAMS',\n        CAN_NOT_GET_PHONE_CONTACTS: 'CAN_NOT_GET_PHONE_CONTACTS',\n        CAN_NOT_SWAP_PARTICIPANTS: 'CAN_NOT_SWAP_PARTICIPANTS',\n        CAN_NOT_CONFERENCE: 'CAN_NOT_CONFERENCE',\n        INVALID_DESTINATION: 'INVALID_DESTINATION',\n        INVALID_PHONE_NUMBER: 'INVALID_PHONE_NUMBER',\n        CAN_NOT_HANGUP_PARTICIPANT: 'CAN_NOT_HANGUP_PARTICIPANT',\n        CAN_NOT_ADD_PARTICIPANT: 'CAN_NOT_ADD_PARTICIPANT',\n        CAN_NOT_CONNECT_PARTICIPANT: 'CAN_NOT_CONNECT_PARTICIPANT',\n        CAN_NOT_START_THE_CALL: 'CAN_NOT_START_THE_CALL',\n        CAN_NOT_PAUSE_RECORDING: 'CAN_NOT_PAUSE_RECORDING',\n        CAN_NOT_RESUME_RECORDING: 'CAN_NOT_RESUME_RECORDING',\n        CAN_NOT_SET_AGENT_CONFIG: 'CAN_NOT_SET_AGENT_CONFIG',\n        CAN_NOT_SET_CAPABILITIES: 'CAN_NOT_SET_CAPABILITIES',\n        CAN_NOT_UPDATE_PHONE_NUMBER: 'CAN_NOT_UPDATE_PHONE_NUMBER',\n        CAN_NOT_GET_SIGNED_RECORDING_URL: 'CAN_NOT_GET_SIGNED_RECORDING_URL',\n        CAN_NOT_SUPERVISE_CALL : 'CAN_NOT_SUPERVISE_CALL',\n        CAN_NOT_DISCONNECT_SUPERVISOR : 'CAN_NOT_DISCONNECT_SUPERVISOR',\n        CAN_NOT_BARGE_IN_SUPERVISOR: 'CAN_NOT_BARGE_IN_SUPERVISOR',\n        CAN_NOT_BARGE_IN_CALL: 'CAN_NOT_BARGE_IN_CALL',\n        CAN_NOT_GET_AGENT_STATUS: 'CAN_NOT_GET_AGENT_STATUS',\n        INVALID_STATE_CHANGE_RESULT: 'INVALID_STATE_CHANGE_RESULT'\n    },\n    AGENT_STATUS: {\n        ONLINE: 'Online',\n        OFFLINE: 'Offline',\n        ACW : 'AfterCallWork',\n        CALLBACK_MISSED_OR_REJECTED: 'CallbackMissedOrRejected' // Used only for Amazon; workaround for https://github.com/amazon-connect/amazon-connect-streams/issues/344\n    },\n    PARTICIPANT_TYPE: {\n        AGENT: 'Agent',\n        INITIAL_CALLER: 'Initial_Caller',\n        THIRD_PARTY: 'Third_Party',\n        SUPERVISOR: 'Supervisor'\n    },\n    CALL_TYPE: {\n        INBOUND: 'Inbound',\n        OUTBOUND: 'Outbound',\n        CALLBACK: 'Callback',\n        ADD_PARTICIPANT: 'AddParticipant',\n        TRANSFER:'Transfer',\n        INTERNAL_CALL: 'InternalCall'\n    },\n    DIALER_TYPE: {\n        OUTBOUND_PREVIEW: 'OutboundPreview',\n        NONE: 'None'\n    },\n    CONTACT_TYPE: {\n        PHONEBOOK: 'PhoneBook',\n        QUEUE: 'Queue',\n        PHONENUMBER: 'PhoneNumber',\n        AGENT: 'Agent',\n        FLOW: 'Flow'\n    },\n    AGENT_CONFIG_TYPE: {\n        SHOW_AGENT_SETTINGS: 'SHOW_AGENT_SETTINGS',\n        PHONES: 'PHONES',\n        SELECTED_PHONE: 'SELECTED_PHONE'\n    },\n    CAPABILITIES_TYPE: {\n        MUTE: 'MUTE',\n        RECORD: 'RECORD',\n        MERGE: 'MERGE',\n        SWAP: 'SWAP',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        DEBUG_ENABLED: 'DEBUG_ENABLED',\n        CONTACT_SEARCH: 'CONTACT_SEARCH',\n        VENDOR_PROVIDED_AVAILABILITY: 'VENDOR_PROVIDED_AVAILABILITY',\n        VENDOR_PROVIDED_QUEUE_WAIT_TIME: 'VENDOR_PROVIDED_QUEUE_WAIT_TIME',\n        SUPERVISOR_LISTEN_IN: 'SUPERVISOR_LISTEN_IN',\n        SUPERVISOR_BARGE_IN: 'SUPERVISOR_BARGE_IN',\n        MOS: 'MOS',\n        BLIND_TRANSFER: 'BLIND_TRANSFER',\n        TRANSFER_TO_OMNI_FLOW: 'TRANSFER_TO_OMNI_FLOW',\n        PENDING_STATUS_CHANGE: 'PENDING_STATUS_CHANGE',\n        PHONEBOOK: 'PHONEBOOK'\n    },\n    CALL_STATE: {\n        RINGING: 'ringing',\n        CONNECTED: 'connected',\n        TRANSFERRING: 'transferring',\n        TRANSFERRED: 'transferred',\n        ENDED: 'ended'\n    },\n    PHONE_TYPE: {\n        DESK_PHONE: 'DESK_PHONE',\n        SOFT_PHONE: 'SOFT_PHONE'\n    },\n    HANGUP_REASON: {\n        PHONE_CALL_ERROR: \"error\",\n        PHONE_CALL_ENDED: \"ended\"\n    },\n    AGENT_AVAILABILITY: {\n        AVAILABLE: \"AVAILABLE\",\n        BUSY: \"BUSY\",\n        OFFLINE: \"OFFLINE\"\n    },\n    REMOVE_PARTICIPANT_VARIANT: {\n        ALWAYS : 'ALWAYS',\n        NEVER: 'NEVER',\n        ALWAYS_EXCEPT_ON_HOLD: 'ALWAYS_EXCEPT_ON_HOLD'\n    },\n    LOG_LEVEL: {\n        ERROR: \"ERROR\",\n        INFO: \"INFO\"\n    },\n    LOG_SOURCE: {\n        SYSTEM: \"SYSTEM\",\n        PARTNER: \"PARTNER\"\n    },\n    CONTACTS_FILTER_TYPES: {\n        \"AGENT\": \"AGENT\",\n        \"QUEUE\": \"QUEUE\",\n        \"CONTACT\": \"CONTACT\",\n        \"DIRECTORY\": \"DIRECTORY\",\n        \"FLOW\": \"FLOW\",\n        \"AVAILABLE\": \"AVAILABLE\"\n    }\n};\n\n/**\n * Fields in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS = [\n    \"/internalNameLabel\",\n    \"/reqGeneralInfo/reqAdapterUrl\",\n    \"/reqGeneralInfo/reqVendorInfoApiName\",\n    \"isACWAllowed\",\n    \"isHVSEnabled\",\n    \"orgDomainName\",\n    \"phoneServiceChannelId\",\n    \"telephonySettingsComponentFqn\"\n];\n\n/**\n * Fields that starts with string in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH = [\n    \"/reqHvcc\"\n];\n\n/**\n * Fields in the connector configuration that are NOT logged. \n */\nexport const CONNECTOR_CONFIG_EXCEPTION_FIELDS = [\n    \"/reqHvcc/reqTelephonyIntegrationCertificate\"\n];\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { downloadData } from './downloadData.js';\nimport constants from './constants';\n\n//The max size of the logs in # of characaters\nconst MAX_LOGS_SIZE = 1.5e7/2; //15 MB or 7.5M characters\n\nconst _strify = obj => (typeof obj === 'string') ? obj : JSON.stringify(obj);\n\nlet LOGS_SIZE = 0;\nlet logs = [];\n\nfunction _log(logLevel, logMessage, logSource) {\n    if(!logMessage) {\n        throw new Error(\"Log Message required\");\n    }\n    logLevel  = logLevel  || constants.LOG_LEVEL.INFO;\n    logSource = logSource || constants.LOG_SOURCE.PARTNER;\n\n    const logStr = [new Date().toISOString(), _strify(logLevel), _strify(logSource), `${_strify(logMessage)}\\n`].join(\"|\");\n    \n    //If logs size is greater than max size, empty it.\n    if(LOGS_SIZE + logStr.length >= MAX_LOGS_SIZE) {\n        logs = []; \n        LOGS_SIZE = 0;\n    }\n    LOGS_SIZE += logStr.length;\n    logs.push(logStr);\n}\n\n/**\n * Log a message at a custom level.\n * @param {object} logMessage\n * @param {string} logLevel \n * @param {string} [logSource]\n */\nexport function log(logMessage, logLevel, logSource) {\n    _log(logLevel, logMessage, logSource);\n}\n\n/**\n * \n * @returns a deep copy of the logs array\n */\nexport function getLogs() {\n    return JSON.parse(JSON.stringify(logs));\n}\n\n/**\n * Download the logs as a file\n */\nexport function downloadLogs() {\n    downloadData(logs.join(''), `log-${new Date().getTime()}.txt`, 'text/plain');\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * Download data as a file.\n * @param {object} data \n * @param {string} fileName \n * @param {string} fileType\n */\nexport function downloadData(data, fileName, fileType) {\n    if(!document || !data) return;\n    \n    const dataStr = (typeof data === 'string') ? data : JSON.stringify(data);\n    const file = new Blob([dataStr], {type: fileType});\n    let a = document.createElement(\"a\") \n    const blobURL = URL.createObjectURL(file);\n    a.download = fileName;\n    a.href = blobURL;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(blobURL);\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { downloadLogs } from './logger.js';\n\nexport const Constants = {\n    EVENT_TYPE: {\n        LOGIN_RESULT: constants.EVENT_TYPE.LOGIN_RESULT,\n        LOGOUT_RESULT: constants.EVENT_TYPE.LOGOUT_RESULT,\n        CALL_STARTED: constants.EVENT_TYPE.CALL_STARTED,\n        QUEUED_CALL_STARTED: constants.EVENT_TYPE.QUEUED_CALL_STARTED,\n        CALL_CONNECTED: constants.EVENT_TYPE.CALL_CONNECTED,\n        HANGUP: constants.EVENT_TYPE.HANGUP,\n        MUTE_TOGGLE: constants.EVENT_TYPE.MUTE_TOGGLE,\n        HOLD_TOGGLE: constants.EVENT_TYPE.HOLD_TOGGLE,\n        RECORDING_TOGGLE: constants.EVENT_TYPE.RECORDING_TOGGLE,\n        PARTICIPANTS_SWAPPED: constants.EVENT_TYPE.PARTICIPANTS_SWAPPED,\n        PARTICIPANTS_CONFERENCED: constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED,\n        PARTICIPANT_ADDED: constants.EVENT_TYPE.PARTICIPANT_ADDED, \n        PARTICIPANT_CONNECTED: constants.EVENT_TYPE.PARTICIPANT_CONNECTED,\n        PARTICIPANT_REMOVED: constants.EVENT_TYPE.PARTICIPANT_REMOVED,\n        MESSAGE: constants.EVENT_TYPE.MESSAGE,\n        AFTER_CALL_WORK_STARTED: constants.EVENT_TYPE.AFTER_CALL_WORK_STARTED,\n        WRAP_UP_ENDED: constants.EVENT_TYPE.WRAP_UP_ENDED,\n        AGENT_ERROR: constants.EVENT_TYPE.AGENT_ERROR,\n        SOFTPHONE_ERROR: constants.EVENT_TYPE.SOFTPHONE_ERROR,\n        UPDATE_AUDIO_STATS: constants.EVENT_TYPE.UPDATE_AUDIO_STATS,\n        SUPERVISOR_BARGED_IN: constants.EVENT_TYPE.SUPERVISOR_BARGED_IN,\n        SUPERVISOR_CALL_STARTED : constants.EVENT_TYPE.SUPERVISOR_CALL_STARTED,\n        SUPERVISOR_CALL_CONNECTED: constants.EVENT_TYPE.SUPERVISOR_CALL_CONNECTED,\n        SUPERVISOR_HANGUP : constants.EVENT_TYPE.SUPERVISOR_HANGUP,\n        SET_AGENT_STATUS: constants.EVENT_TYPE.SET_AGENT_STATUS,\n        GET_AGENT_STATUS: constants.EVENT_TYPE.GET_AGENT_STATUS,\n        STATE_CHANGE: constants.EVENT_TYPE.STATE_CHANGE\n    },\n    /**\n    * @enum {string}\n    */\n    ERROR_TYPE: {\n        GENERIC_ERROR: constants.ERROR_TYPE.GENERIC_ERROR,\n        INVALID_PARTICIPANT: constants.ERROR_TYPE.INVALID_PARTICIPANT,\n        INVALID_DESTINATION: constants.ERROR_TYPE.INVALID_DESTINATION,\n        INVALID_PARAMS: constants.ERROR_TYPE.INVALID_PARAMS,\n        INVALID_AGENT_STATUS: constants.ERROR_TYPE.INVALID_AGENT_STATUS,\n        CAN_NOT_UPDATE_PHONE_NUMBER: constants.ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER\n    },\n    /**\n    * @enum {string}\n    */\n    AGENT_STATUS: { ...constants.AGENT_STATUS },\n    /**\n    * @enum {string}\n    */\n    PARTICIPANT_TYPE: { ...constants.PARTICIPANT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_TYPE: { ...constants.CALL_TYPE },\n    /**\n    * @enum {string}\n    */\n    DIALER_TYPE: { ...constants.DIALER_TYPE },\n    /**\n    * @enum {string}\n    */\n    CONTACT_TYPE: { ...constants.CONTACT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_STATE: { ...constants.CALL_STATE },\n    /**\n    * @enum {string}\n    */\n    HANGUP_REASON: { ...constants.HANGUP_REASON },\n    /**\n    * @enum {string}\n    */\n    PHONE_TYPE: { ...constants.PHONE_TYPE },\n    /**\n     * @enum {String}\n     */\n    AGENT_AVAILABILITY: { ...constants.AGENT_AVAILABILITY },\n    /**\n     * @enum (String)\n     */\n     REMOVE_PARTICIPANT_VARIANT: { ...constants.REMOVE_PARTICIPANT_VARIANT },\n    /**\n     * @enum {String}\n     */\n    LOG_LEVEL: { ...constants.LOG_LEVEL },\n    /**\n     * @enum {String}\n     */\n    CONTACTS_FILTER_TYPES: { ...constants.CONTACTS_FILTER_TYPES }\n};\n\n/**\n * Class representing a Custom Error\n */\nexport class CustomError extends Error {\n    /**\n     * Create Phone\n     * @param {object} param\n     * @param {String} param.labelName\n     * @param {String} param.namespace\n     * @param {String} [param.message]\n     */\n    constructor({ labelName, namespace, message }) {\n        super(message);\n\n        Validator.validateString(labelName);\n        Validator.validateString(namespace);\n        if (message) {\n            Validator.validateString(message);\n        }\n        this.labelName = labelName;\n        this.namespace = namespace;\n        this.message = message;\n    }\n}\n\n/**\n * Class representing a Phone type\n */\n export class Phone {\n    /**\n     * Create Phone\n     * @param {object} param\n     * @param {PHONE_TYPE} param.type\n     * @param {string} [param.number]\n     */\n    constructor({ type, number}) {\n        Validator.validateEnum(type, Object.values(constants.PHONE_TYPE));\n        if(number) {\n            Validator.validateString(number);\n        }\n        this.type = type;\n        this.number = number;\n    }\n}\n\n/**\n * Class representing result type for mute() & unmute()\n */\nexport class MuteToggleResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {boolean} param.isMuted\n     */\n    constructor({ isMuted }) {\n        this.isMuted = isMuted;\n    }\n}\n\n/**\n * Class representing result type for getActiveCalls()\n */\nexport class ActiveCallsResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {PhoneCall[]} [param.activeCalls]\n     */\n    constructor({ activeCalls = [] }) {\n        if (activeCalls.length > 0) {\n            activeCalls.forEach(activeCall => {\n                Validator.validateClassObject(activeCall, PhoneCall);\n            });\n        }\n        this.activeCalls = activeCalls;\n    }\n}\n\n/**\n * Class representing result type for getCapabilities()\n */\nexport class CapabilitiesResult {\n    /**\n     * Create CapabilitiesResult\n     * @param {object} param\n     * @param {boolean} [param.hasMute]\n     * @param {boolean} [param.hasRecord]\n     * @param {boolean} [param.hasMerge]\n     * @param {boolean} [param.hasSwap]\n     * @param {boolean} [param.hasSignedRecordingUrl]\n     * @param {boolean} [param.debugEnabled]\n     * @param {boolean} [param.hasContactSearch] True if getPhoneContacts uses the 'contain' filter\n     * @param {boolean} [param.hasAgentAvailability] True if getPhoneContacts also provides agent availability, false if Salesforce provides it.\n     * @param {boolean} [param.hasQueueWaitTime] True if getPhoneContacts also provides estimated queue wait time, false if Salesforce provides it.\n     * @param {boolean} [param.supportsMos] True if vendor support MOS\n     * @param {boolean} [param.hasSupervisorListenIn] True if vendor supports supervisor listening  to a ongoing call\n     * @param {boolean} [param.hasSupervisorBargeIn] True if vendor supports Supervisor  barging into a ongoing call\n     * @param {boolean} [param.hasBlindTransfer] True if vendor supports blind transfers\n     * @param {boolean} [param.hasBlindTransfer] True if vendor supports transfer to omni flows\n     * @param {boolean} [param.hasPendingStatusChange] True if vendor supports Pending Status Change\n     * @param {boolean} [param.hasPhoneBook] True if vendor supports the phoneBook UI\n     */\n     constructor({ hasMute = true, hasRecord = true, hasMerge = true, hasSwap = true, hasSignedRecordingUrl = false, debugEnabled = true, hasContactSearch = false, hasAgentAvailability = false, hasQueueWaitTime = false, supportsMos = false, hasSupervisorListenIn = false, hasSupervisorBargeIn = false, hasBlindTransfer = false, hasTransferToOmniFlow = false, hasPendingStatusChange=false, hasPhoneBook=false }) {\n        Validator.validateBoolean(hasMute);\n        Validator.validateBoolean(hasRecord);\n        Validator.validateBoolean(hasMerge);\n        Validator.validateBoolean(hasSwap);\n        Validator.validateBoolean(hasSignedRecordingUrl);\n        Validator.validateBoolean(debugEnabled);\n        Validator.validateBoolean(hasContactSearch);\n        Validator.validateBoolean(hasAgentAvailability);\n        Validator.validateBoolean(hasQueueWaitTime);\n        Validator.validateBoolean(supportsMos);\n        Validator.validateBoolean(hasSupervisorListenIn);\n        Validator.validateBoolean(hasSupervisorBargeIn);\n        Validator.validateBoolean(hasBlindTransfer);\n        Validator.validateBoolean(hasTransferToOmniFlow);\n        Validator.validateBoolean(hasPendingStatusChange);\n        Validator.validateBoolean(hasPhoneBook)\n\n        this.hasMute = hasMute;\n        this.hasRecord = hasRecord;\n        this.hasMerge = hasMerge;\n        this.hasSwap = hasSwap;\n        this.hasSignedRecordingUrl = hasSignedRecordingUrl;\n        this.debugEnabled = debugEnabled;\n        this.hasContactSearch = hasContactSearch;\n        this.hasAgentAvailability = hasAgentAvailability;\n        this.hasQueueWaitTime = hasQueueWaitTime;\n        this.supportsMos = supportsMos;\n        this.hasSupervisorListenIn = hasSupervisorListenIn;\n        this.hasSupervisorBargeIn = hasSupervisorBargeIn;\n        this.hasBlindTransfer = hasBlindTransfer;\n        this.hasTransferToOmniFlow = hasTransferToOmniFlow;\n        this.hasPendingStatusChange = hasPendingStatusChange;\n        this.hasPhoneBook = hasPhoneBook;\n    }\n}\n\n/**\n * Class representing result type for getAgentConfig()\n */\nexport class AgentConfigResult {\n    /**\n     * Create AgentConfigResult\n     * @param {object} param\n     * @param {Phone[]} [param.phones]\n     * @param {Phone} [param.selectedPhone]\n     */\n    constructor({ phones = [constants.PHONE_TYPE.SOFT_PHONE], selectedPhone = new Phone({type: constants.PHONE_TYPE.SOFT_PHONE}) }) {\n        Validator.validateClassObject(phones, Array);\n        Validator.validateClassObject(selectedPhone, Phone);\n\n        this.phones = phones;\n        this.selectedPhone = selectedPhone;\n    }\n}\n\n/**\n * Class representing AgentConfig type for setAgentConfig()\n */\nexport class AgentConfig {\n    /**\n     * Create AgentConfig\n     * @param {object} param\n     * @param {Phone} [param.selectedPhone]\n     */\n    constructor({ selectedPhone }) {\n        Validator.validateClassObject(selectedPhone, Phone);\n        this.selectedPhone = selectedPhone;\n    }\n}\n\n/**\n * Class representing result type for pauseRecording() & resumeRecording\n */\nexport class RecordingToggleResult {\n    /**\n     * Create RecordingToggleResult\n     * @param {object} param\n     * @param {boolean} param.isRecordingPaused\n     * @param {string} [param.contactId]\n     * @param {string} [param.initialContactId]\n     * @param {string} [param.instanceId]\n     * @param {string} [param.region]\n     */\n    constructor({ isRecordingPaused, contactId = null, initialContactId = null, instanceId = null, region = null }) {\n        this.isRecordingPaused = isRecordingPaused;\n        this.contactId = contactId;\n        this.initialContactId = initialContactId;\n        this.instanceId = instanceId;\n        this.region = region;\n    }\n}\n\n/**\n * Class representing result type for addParticipant()\n */\nexport class ParticipantResult {\n    /**\n     * Create ParticipantResult\n     * @param {object} param\n     * @param {boolean} param.initialCallHasEnded\n     * @param {CallInfo} param.callInfo\n     * @param {string} param.phoneNumber\n     * @param {string} param.callId\n     */\n    constructor({ initialCallHasEnded, callInfo, phoneNumber, callId }) {\n        Validator.validateClassObject(callInfo, CallInfo);\n        this.initialCallHasEnded = initialCallHasEnded;\n        this.callInfo = callInfo;\n        this.phoneNumber = phoneNumber;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for getPhoneContacts()\n */\nexport class PhoneContactsResult {\n    /**\n     * Create PhoneContactsResult\n     * @param {object} param\n     * @param {Contact[]} [param.contacts]\n     * @param {Array} [param.contactTypes]\n     */\n    constructor({ contacts = [], contactTypes = [] }) {\n        if (contacts.length > 0) {\n            contacts.forEach(contact => {\n                Validator.validateClassObject(contact, Contact);\n            });\n        }\n        if (contactTypes.length > 0) {\n            contactTypes.forEach(filterType => {\n                Validator.validateEnum(filterType, Object.values(constants.CONTACT_TYPE));\n            });\n        }\n        this.contacts = contacts;\n        this.contactTypes = contactTypes;\n    }\n}\n\n/**\n * Class representing result type for accept(), decline(), dial()\n */\nexport class CallResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall} [param.call]\n     */\n    constructor({ call }) {\n        if (call !== undefined) {\n            Validator.validateClassObject(call, PhoneCall);\n        }\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for endCall(), hangup()\n */\nexport class HangupResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls (can be multiple calls in case of agent endcall/hangup)\n     */\n    constructor({ calls }) {\n        if (calls instanceof Array) {\n            calls.forEach(call => Validator.validateClassObject(call, PhoneCall));\n            this.calls = calls;\n        } else {\n            Validator.validateClassObject(calls, PhoneCall);\n            this.calls = [calls];\n        }\n    }\n}\n\n/**\n * Class representing result type for hold() & resume()\n */\nexport class HoldToggleResult {\n    /**\n     * Create HoldToggleResult\n     * @param {object} param\n     * @param {boolean} param.isThirdPartyOnHold\n     * @param {boolean} param.isCustomerOnHold\n     * @param {PhoneCall[]} [param.calls]\n     */\n    constructor({ isThirdPartyOnHold, isCustomerOnHold, calls }) {\n        if (calls) {\n            Object.values(calls).forEach(call => {\n                Validator.validateClassObject(call, PhoneCall);\n            });\n            this.calls = calls;\n        }\n        this.isThirdPartyOnHold = isThirdPartyOnHold;\n        this.isCustomerOnHold = isCustomerOnHold;\n    }\n}\n\n/**\n * Class representing result type for getRecordingUrl\n */\n export class SignedRecordingUrlResult {\n    /**\n     * Create SignedRecordingUrlResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {string} [param.url]\n     * @param {number} [param.duration] in seconds\n     * @param {string} [param.callId] Salesforce callId of the voice call\n     */\n    constructor({ success, url, duration, callId }) {\n        if (success) {\n            // For a successfull result, url is required\n            Validator.validateString(url);\n            Validator.validateString(callId);\n            if (duration) {\n                Validator.validateNumber(duration);\n            }\n        }\n        this.success = success;\n        this.url = url;\n        this.duration = duration;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for init()\n */\nexport class InitResult {\n    /**\n     * Create InitResult\n     * @param {object} param\n     * @param {boolean} [param.showLogin]\n     * @param {number} [param.loginFrameHeight]\n     */\n    constructor({ showLogin = false, loginFrameHeight = 350 }) {\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class representing generic result type\n */\nexport class GenericResult {\n    /**\n     * Create GenericResult\n     * @param {object} param\n     * @param {boolean} param.success\n     */\n    constructor({ success }) {\n        this.success = success;\n    }\n}\n\n/**\n * Class representing logout result type\n */\n export class LogoutResult {\n    /**\n     * Create LogoutResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {number} [param.loginFrameHeight]\n     */\n    constructor({ success, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class representing callInfo class (call metadata)\n */\nexport class CallInfo {\n    /**\n     * Create CallInfo\n     * @param {object} param\n     * @param {boolean} param.isOnHold\n     * @param {boolean} param.isRecordingPaused\n     * @param {boolean} param.isMuted\n     * @param {string} [param.initialCallId]\n     * @param {Date} [param.callStateTimestamp]\n     * @param {string} [param.queueName]\n     * @param {string} [param.queueId]\n     * @param {Date} [param.queueTimestamp]\n     * @param {boolean} [param.isSoftphoneCall] - is it a softphone call \n     * @param {boolean} [param.acceptEnabled]\n     * @param {boolean} [param.declineEnabled]\n     * @param {boolean} [param.muteEnabled]\n     * @param {boolean} [param.swapEnabled]\n     * @param {boolean} [param.conferenceEnabled]\n     * @param {boolean} [param.holdEnabled]\n     * @param {boolean} [param.recordEnabled]\n     * @param {boolean} [param.addCallerEnabled]\n     * @param {boolean} [param.extensionEnabled]\n     * @param {boolean} [param.isReplayable]\n     * @param {boolean} [param.isBargeable]\n     * @param {boolean} [param.isExternalTransfer]\n     * @param {boolean} [param.showMuteButton]\n     * @param {boolean} [param.showRecordButton]\n     * @param {boolean} [param.showAddCallerButton]\n     * @param {boolean} [param.showAddBlindTransferButton]\n     * @param {boolean} [param.showMergeButton]\n     * @param {boolean} [param.showSwapButton]\n     * @param {(\"ALWAYS\"|\"NEVER\"|\"ALWAYS_EXCEPT_ON_HOLD\")} [param.removeParticipantVariant] - The type of remove participant variant when in a transfer call.\n     */\n    constructor({ callStateTimestamp = null, isOnHold, isMuted = false, isRecordingPaused = false, initialCallId, queueId = null, queueName = null, queueTimestamp = null, isSoftphoneCall = true, \n        acceptEnabled = true, declineEnabled = true, muteEnabled = true, swapEnabled = true, conferenceEnabled = true, holdEnabled = true,\n        recordEnabled = true, addCallerEnabled = true, extensionEnabled = true, isReplayable = true, isBargeable = false, isExternalTransfer, \n        showMuteButton = true, showRecordButton = true, showAddCallerButton = true, showAddBlindTransferButton = true, showMergeButton = true,\n        showSwapButton = true, removeParticipantVariant = Constants.REMOVE_PARTICIPANT_VARIANT.ALWAYS}) {\n        if (callStateTimestamp) {\n            Validator.validateDate(callStateTimestamp);\n        }\n        if (queueTimestamp) {\n            Validator.validateDate(queueTimestamp);\n        }\n        if (queueId) {\n            Validator.validateString(queueId);\n        }\n        if (queueName) {\n            Validator.validateString(queueName);\n        }\n        Validator.validateBoolean(isRecordingPaused);\n        Validator.validateBoolean(isMuted);\n        Validator.validateBoolean(isSoftphoneCall);\n        Validator.validateBoolean(acceptEnabled);\n        Validator.validateBoolean(declineEnabled);\n        Validator.validateBoolean(muteEnabled);\n        Validator.validateBoolean(swapEnabled);\n        Validator.validateBoolean(conferenceEnabled);\n        Validator.validateBoolean(holdEnabled);\n        Validator.validateBoolean(recordEnabled);\n        Validator.validateBoolean(addCallerEnabled);\n        Validator.validateBoolean(extensionEnabled);\n        Validator.validateBoolean(isBargeable);\n        Validator.validateBoolean(showMuteButton);\n        Validator.validateBoolean(showRecordButton);\n        Validator.validateBoolean(showAddCallerButton);\n        Validator.validateBoolean(showAddBlindTransferButton);\n        Validator.validateBoolean(showMergeButton);\n        Validator.validateBoolean(showSwapButton);\n        if (isExternalTransfer !== undefined) {\n            Validator.validateBoolean(isExternalTransfer);\n        }\n        Validator.validateEnum(removeParticipantVariant, Object.values(constants.REMOVE_PARTICIPANT_VARIANT));\n        this.callStateTimestamp = callStateTimestamp;\n        this.isRecordingPaused = isRecordingPaused;\n        this.isMuted = isMuted;\n        this.isOnHold = isOnHold;\n        this.initialCallId = initialCallId;\n        this.queueName = queueName;\n        this.queueId = queueId;\n        this.queueTimestamp = queueTimestamp;\n        this.isSoftphoneCall = isSoftphoneCall;\n        this.acceptEnabled = acceptEnabled;\n        this.declineEnabled = declineEnabled;\n        this.muteEnabled = muteEnabled;\n        this.swapEnabled = swapEnabled;\n        this.conferenceEnabled = conferenceEnabled;\n        this.holdEnabled = holdEnabled;\n        this.recordEnabled = recordEnabled;\n        this.addCallerEnabled = addCallerEnabled;\n        this.extensionEnabled = extensionEnabled;\n        this.isReplayable = isReplayable;\n        this.isBargeable = isBargeable;\n        this.isExternalTransfer = isExternalTransfer;\n        this.removeParticipantVariant = removeParticipantVariant;\n        this.showMuteButton = showMuteButton;\n        this.showRecordButton = showRecordButton;\n        this.showAddCallerButton = showAddCallerButton;\n        this.showAddBlindTransferButton = showAddBlindTransferButton;\n        this.showMergeButton = showMergeButton;\n        this.showSwapButton = showSwapButton;\n    }\n}\n\n/** \n * Class representing a Contact. This object is used to represent \n * phone system contact or any call target\n */\n\nexport class Contact {\n    /**\n     * Create a Contact.\n     * @param {object} param\n     * @param {string} [param.id] - The unique contactId\n     * @param {(\"PhoneBook\"|\"Queue\"|\"PhoneNumber\"|\"Agent\")} [param.type] - The type of the contact, one of the CONTACT_TYPE values\n     * @param {string} [param.name] - The label for this contact to be displayed in the UI\n     * @param {string} [param.phoneNumber] - The phone number associcated with this contact\n     * @param {string} [param.prefix] - Any prefix to be dialed before dialing the number (i.e. +1)\n     * @param {string} [param.extension] - Any extension to be dialed after dialing the number\n     * @param {string} [param.endpointARN]\n     * @param {string} [param.queue]\n     * @param {string} [param.availability]\n     * @param {string} [param.recordId] - Salesforce RecordId\n     * @param {string} [param.description] - Contact Description\n     * @param {string} [param.queueWaitTime] - Estimated Queue Wait Time \n     */\n    constructor({phoneNumber, id, type, name, prefix, extension, endpointARN, queue, availability, recordId, description, queueWaitTime}) {\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n        }\n        if (type) {\n            Validator.validateEnum(type, Object.values(constants.CONTACT_TYPE));\n        }\n        if (id) {\n            Validator.validateString(id);\n        }\n        if (name) {\n            Validator.validateString(name);\n        }\n        if (prefix) {\n            Validator.validateString(prefix);\n        }\n        if (extension) {\n            Validator.validateString(extension);\n        }\n        if (availability) {\n            Validator.validateEnum(availability, Object.values(constants.AGENT_AVAILABILITY));\n        }\n        if (recordId) {\n            Validator.validateString(recordId);\n        }\n        if (description) {\n            Validator.validateString(description);\n        }\n        if (queueWaitTime) {\n            Validator.validateString(queueWaitTime);\n        }\n\n        this.phoneNumber = phoneNumber;\n        this.id = id;\n        this.type = type;\n        this.name = name;\n        this.prefix = prefix;\n        this.extension = extension;\n        this.endpointARN = endpointARN;\n        this.queue = queue;\n        if (constants.CONTACT_TYPE.AGENT === this.type) {\n            this.availability = availability;\n        } else {\n            this.availability = null;\n        }\n        this.queueWaitTime = queueWaitTime;\n        this.recordId = recordId;\n        this.description = description;\n    }\n}\n\n/** \n* Class representing PhoneCallAttributes\n*/\n\nexport class PhoneCallAttributes {\n    /**\n     * Create PhoneCallAttributes.\n     * @param {object} param\n     * @param {string} [param.voiceCallId] - The voice call id\n     * @param {PARTICIPANT_TYPE} [param.participantType] - The participant type of the call\n     * @param {DIALER_TYPE} [param.dialerType] - The dialer type of the call\n     * @param {string} [param.parentId] - The parent call id of the call\n     * @param {boolean} [param.isOnHold]\n     * @param {boolean} [param.hasSupervisorBargedIn]\n     */\n    constructor({ voiceCallId, participantType, dialerType = Constants.DIALER_TYPE.NONE, parentId, isOnHold, hasSupervisorBargedIn = false }) {\n        if (voiceCallId) {\n            Validator.validateString(voiceCallId);\n        }\n        if (participantType) {\n            Validator.validateEnum(participantType, Object.values(constants.PARTICIPANT_TYPE));\n        }\n        if (parentId) {\n            Validator.validateString(parentId);\n        }\n        if (isOnHold !== undefined) {\n            Validator.validateBoolean(isOnHold);\n        }\n\n        Validator.validateBoolean(hasSupervisorBargedIn);\n        Validator.validateEnum(dialerType, Object.values(constants.DIALER_TYPE));\n\n        this.voiceCallId = voiceCallId;\n        this.participantType = participantType;\n        this.parentId = parentId;\n        this.isOnHold = isOnHold;\n        this.dialerType = dialerType;\n        this.hasSupervisorBargedIn = hasSupervisorBargedIn;\n    }\n}\n\n/** \n* Class representing a PhoneCall. \n*/\n\nexport class PhoneCall {\n    /**\n     * Create a PhoneCall.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId. This is a required parameter\n     * @param {CALL_TYPE} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {Contact} [param.contact] - The Call Target / Contact \n     * @param {string} [param.state] - The state of the call, i.e. ringing, connected, declined, failed \n     * @param {PhoneCallAttributes} [param.callAttributes] - Any additional call attributes\n     * @param {string} [param.phoneNumber] - The phone number associated with this call (usually external number)\n     * @param {CallInfo} [param.callInfo]\n     * @param {string} [param.reason]\n     * @param {boolean} [param.closeCallOnError]\n     * @param {string} [param.agentStatus]\n     */\n    constructor({callId, callType, contact, state, callAttributes, phoneNumber, callInfo, reason, closeCallOnError, agentStatus }) {\n        // TODO: Revisit the required fields\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n        if (callType) {\n            Validator.validateEnum(callType, Object.values(constants.CALL_TYPE));\n            this.callType = callType;\n        }\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n            this.phoneNumber = phoneNumber;\n        }\n        if (callInfo) {\n            Validator.validateClassObject(callInfo, CallInfo);\n            this.callInfo = callInfo;\n        }\n        if (contact) {\n            Validator.validateClassObject(contact, Contact);\n            this.contact = contact;\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        if (closeCallOnError) {\n            this.closeCallOnError = closeCallOnError;\n        }\n        if (agentStatus) {\n            this.agentStatus = agentStatus;\n        }\n        this.state = state;\n        this.callAttributes = callAttributes;\n    }\n}\n\n/** \n* Class representing a VendorConnector\n*/\nexport class VendorConnector {\n    /**\n     * Initialize the connector\n     * @param {object} connectorConfig\n     * @returns {Promise<InitResult>} \n     * \n     */\n    init(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get the currently active calls\n     * @returns {Promise<ActiveCallsResult>} \n     * \n     */\n    getActiveCalls() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Accept call\n     * @param {PhoneCall} call - The call to be accepted\n     * @returns {Promise<CallResult>} \n     * \n     */\n    acceptCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Decline call\n     * @param {PhoneCall} call - The call to be declined\n     * @returns {Promise<CallResult>} \n     * \n     */\n    declineCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * End call\n     * @param {PhoneCall} call - The call to be ended\n     * @param {AGENT_STATUS} agentStatus\n     * @returns {Promise<HangupResult>} \n     * \n     */\n    endCall(call, agentStatus) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    mute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Unmute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    unmute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Hold call\n     * @param {PhoneCall} call - The call to be held\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    hold(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume call\n     * @param {PhoneCall} call - The call to be resumed\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    resume(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set agent status\n     * @param {string} agentStatus\n     * @param {StatusInfo} statusInfo\n     * @param {Boolean} enqueueNextState - flag to determine if this status change request should be enqueued if neccessary\n     * @returns {Promise<GenericResult>} \n     * \n     */\n    setAgentStatus(agentStatus, statusInfo, enqueueNextState) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agent status\n     * @returns {Promise<AgentStatusInfo>} \n     * \n     */\n     getAgentStatus() {\n        this.logMessageToVendor(constants.LOG_LEVEL.INFO, 'getAgentStatus API is NOT Implemented' );\n    }\n\n    /**\n     * Dial out Number\n     * @param {Contact} contact\n     * @returns {Promise<CallResult>} \n     * \n     */\n    dial(contact) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Send digits\n     * @param {string} digits\n     */\n    sendDigits(digits) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get phone contacts\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getPhoneContacts() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Swap calls\n     * @param {PhoneCall} call1\n     * @param {PhoneCall} call2\n     * @returns {Promise<HoldToggleResult>} \n     */\n    swap(call1, call2) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Conference calls\n     * @param {PhoneCall[]} calls\n     * @returns {Promise<HoldToggleResult>} \n     */\n    conference(calls) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Add participant to call\n     * @param {Contact} contact\n     * @param {PhoneCall} call\n     * @returns {Promise<ParticipantResult>} \n     */\n    addParticipant(contact, call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Pause recording\n     * @param {PhoneCall} call\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    pauseRecording(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume recording\n     * @param {PhoneCall} call\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    resumeRecording(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agentConfig\n     * @returns {Promise<AgentConfigResult>}\n     */\n    getAgentConfig() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set Agent Config\n     * @param {AgentConfig} config\n     * @returns {Promise<GenericResult>}\n     */\n    setAgentConfig(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get Capabilities\n     * @returns {Promise<CapabilitiesResult>}\n     */\n    getCapabilities() {\n        throw new Error('Not implemented');\n    }\n    \n\n    /**\n     * Logout from Omni\n     * @returns {Promise<LogoutResult>} \n     */\n    logout() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Handle message from LWC/Aura component\n     * @param {object} message\n     */\n    handleMessage(message) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Wrap up call\n     * @param {PhoneCall} call\n     */\n    wrapUpCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n    * Get the signed recording url\n    * @param {String} recordingUrl\n    * @param {String} vendorCallKey\n    * @param {String} callId\n    * @returns {Promise<SignedRecordingUrlResult>} \n    */\n    getSignedRecordingUrl(recordingUrl, vendorCallKey, callId) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Triggers a browser download for Vendor Logs\n     * @param {String[]} logs Array of log messages.\n     */\n    downloadLogs(logs) {\n        downloadLogs();\n    }\n\n    /**\n     * Sends the logs with a logLevel and payload to the vendor connector.\n     * Does a no-op, if not implemented.\n     * @param {String} logLevel Log Level (INFO, WARN, ERROR)\n     * @param {String} message Message to be logged\n     * @param {Object} payload An optional payload to be logged\n     */\n    logMessageToVendor(logLevel, message, payload) {}\n\n    /**\n     * Supervise a call\n     * @param {PhoneCall} call Call to be supervised\n     */\n     superviseCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor disconnects from a call\n     * @param {PhoneCall} call Call to be disconnected\n     */\n    supervisorDisconnect(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor Barges into a ongoing call\n     * @param {PhoneCall} call Call which supervisor barges in\n     */\n    supervisorBargeIn(call) {\n        throw new Error('Not implemented');\n    }\n}\n\nexport class Validator {\n    static validateString(value) {\n        if (typeof value !== 'string') {\n            throw new Error(`Invalid argument. Expecting a string but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateNumber(value) {\n        if (typeof value !== 'number') {\n            throw new Error(`Invalid argument. Expecting a number but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateBoolean(value) {\n        if (typeof value !== 'boolean') {\n            throw new Error(`Invalid argument. Expecting a boolean but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateEnum(value, enumValues) {\n        const regex = new RegExp(enumValues.join( \"|\" ), \"i\");\n        if (!regex.test(value)) {\n            throw new Error(`Invalid argument. Expecting a value from ${JSON.stringify(enumValues)} but got ${value}`);\n        }\n        return this;\n    }\n\n    static validateDate(value) {\n        if (!(value instanceof Date)) {\n            throw new Error(`Invalid argument. Expecting a Date object but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateClassObject(object, className) {\n        if (!(object instanceof className)) {\n            throw new Error(`Invalid className. Expecting object of class ${className} but got ${typeof object}`);\n        }\n        return this;\n    }\n}\n\n/** \n * Class representing an Agent status information. This object is used to represent \n * agent status information\n */\n\nexport class AgentStatusInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (required)\n     * @param {string} [param.statusApiName] - The status API name\n     * @param {string} [param.statusName] - The label for this status to be displayed in the UI\n     */\n    constructor({statusId, statusApiName, statusName}) {\n        Validator.validateString(statusId);\n        if (statusApiName) {\n            Validator.validateString(statusApiName);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusApiName = statusApiName;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * Class representing an Agent Vendor status information. This object is used to represent \n * agent vendor side status information\n */\nexport class AgentVendorStatusInfo {\n    /**\n     * Create a AgentVendorStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (e.g agentStateARN)\n     * @param {string} [param.statusType] - The agent's current availability state type\n     * @param {string} [param.statusName] - The name of the agent's current availability state\n     */\n    constructor({statusId, statusType, statusName}) {\n        if (statusId) {\n            Validator.validateString(statusId);\n        }\n        if (statusType) {\n            Validator.validateString(statusType);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusType = statusType;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * NOTE: SALESFORCE INTERNAL USE ONLY\n * Class representing an State Change Result information. This object is used to represent \n * Agent State Change Infomation\n */\n export class StateChangeResult {\n    /**\n     * Create a StateChangeResult.\n     * @param {object} param\n     * @param {AgentVendorStatusInfo} [param.newVendorStateInfo] - newStateName (e.g 'Available') (required), newStateType (e.g 'routable')\n     * @param {AgentVendorStatusInfo} [param.oldVendorStateInfo] - oldStateName (e.g 'offline'), oldStateType (e.g 'Offline')\n     */\n    constructor({newVendorStateInfo, oldVendorStateInfo}) {\n        Validator.validateClassObject(newVendorStateInfo, AgentVendorStatusInfo);\n        Validator.validateString(newVendorStateInfo.statusName);\n        if (oldVendorStateInfo) {\n            Validator.validateClassObject(oldVendorStateInfo, AgentVendorStatusInfo);\n        }\n        this.newVendorStateInfo = newVendorStateInfo;\n        this.oldVendorStateInfo = oldVendorStateInfo;\n    }\n}\n\n/** \n * Class representing a Supervised Call Info. This object is used to represent \n * information about a call that is being supervised by a supervisor.\n */\nexport class SupervisedCallInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique supervised vendor call ID (required)\n     * @param {string} [param.voiceCallId] - The supervised salesforce voice call ID\n     * @param {string} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {string} [param.from] - From phone number (for Inbound calls)\n     * @param {string} [param.to] - To phone number (for Outbound calls)\n     * @param {string} [param.supervisorName] - The supervisor name (shown to the supervised agent on barge in)\n     * @param {boolean} [param.isBargedIn] - True if the Supervisor has barged in, False if the supervisor is listening in.\n     */\n\n    constructor({callId, voiceCallId, callType, from, to, supervisorName, isBargedIn}) {\n        Validator.validateString(callId);\n        this.callId = callId;\n        this.voiceCallId = voiceCallId;\n        this.callType = callType;\n        this.from = from;\n        this.to = to;\n        this.supervisorName = supervisorName;\n        this.isBargedIn = isBargedIn;\n    }\n}\n\n/**\n * Class representing a Audio Stats, which contains array of AudioStats. This object is used to calculate the MOS Score\n */\n\nexport class AudioStats {\n    /**\n     * Create a AudioStats\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId.\n     * @param {AudioStatsElement[]} param.stats - array of AudioStatsElement\n     * @param {boolean} [param.isAudioStatsCompleted] - True if the audio stats is completed, will calculate MOS and update VoiceCall record\n     */\n    constructor({ callId, stats, isAudioStatsCompleted }) {\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n\n        if (stats) {\n            Validator.validateClassObject(stats, Array);\n            stats.forEach(audioStatsElement => Validator.validateClassObject(audioStatsElement, AudioStatsElement));\n            this.stats = stats;\n        }\n\n        if (isAudioStatsCompleted) {\n            Validator.validateBoolean(isAudioStatsCompleted);\n            this.isAudioStatsCompleted = isAudioStatsCompleted;\n        }\n    }\n}\n\n/**\n * Class representing a Audio Stats Element. This object is used to calculate the MOS Score\n */\n\nexport class AudioStatsElement {\n    /**\n     * Create a AudioStatsElement\n     * @param {object} param\n     * @param {StatsInfo} [param.inputChannelStats] - the inputChannel stream stats\n     * @param {StatsInfo} [param.outputChannelStats] - the ouputChannel stream stats\n     */\n    constructor({inputChannelStats, outputChannelStats}) {\n        if (inputChannelStats) {\n            Validator.validateClassObject(inputChannelStats, StatsInfo);\n        }\n        if (outputChannelStats) {\n            Validator.validateClassObject(outputChannelStats, StatsInfo);\n        }\n        \n        this.inputChannelStats = inputChannelStats;\n        this.outputChannelStats = outputChannelStats;\n    }\n}\n\n/**\n * Class representing a Stream Stats. This object is used to calculate the MOS Score\n */\n\nexport class StatsInfo {\n    /**\n     * Create a StatsInfo\n     * @param {object} param\n     * @param {number} [param.packetsCount] - the packets count\n     * @param {number} [param.packetsLost] - packets lost count\n     * @param {number} [param.jitterBufferMillis] - jitter buffer in milliseconds\n     * @param {number} [param.roundTripTimeMillis] - round trip time in milliseconds\n     */\n    constructor({packetsCount, packetsLost, jitterBufferMillis, roundTripTimeMillis}) {\n        packetsCount = (packetsCount == null || packetsCount < 0) ? 0 : packetsCount;\n        packetsLost = (packetsLost == null || packetsLost < 0) ? 0 : packetsLost;\n        jitterBufferMillis = (jitterBufferMillis == null || jitterBufferMillis < 0) ? 0 : jitterBufferMillis;\n        roundTripTimeMillis = (roundTripTimeMillis == null || roundTripTimeMillis < 0) ? 0 : roundTripTimeMillis;\n\n        this.statsCount = 0;\n        this.packetsCount = packetsCount;\n        this.packetsLost = packetsLost;\n        this.jitterBufferMillis = jitterBufferMillis;\n        this.roundTripTimeMillis = roundTripTimeMillis;\n    }\n}\n\n/**\n * Class representing supervise call result\n */\n export class  SuperviseCallResult {\n    /**\n     * Create a SuperviseCallResult\n     * @param {object} param\n     * @param {PhoneCall} param.call\n     */\n    constructor({call}) {\n        Validator.validateClassObject(call, PhoneCall);\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for supervisorDisconnected()\n */\n export class SupervisorHangupResult extends HangupResult {\n     /**\n     * Create SupervisorHangupResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls when supervisor hangsup\n     */\n    constructor({ calls }) {\n        super({ calls });\n    }\n }","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport { AudioStatsElement, StatsInfo } from './types';\nlet audioStatus;\nlet supportsMos = false;\n\nfunction getAvgStats(streamType) {\n    const stats = audioStatus[streamType];\n    return {\n        packetsCount: stats.packetsCount / stats.statsCount,\n        packetsLost: stats.packetsLost / stats.statsCount,\n        jitterBufferMillis: stats.jitterBufferMillis / stats.statsCount,\n        roundTripTimeMillis: stats.roundTripTimeMillis / stats.statsCount\n    };\n}\n\nfunction getMOSByStream(streamType) {\n    const avgStats = getAvgStats(streamType);\n    const effectiveLatency = avgStats.roundTripTimeMillis + (avgStats.jitterBufferMillis * 2) + 10.0;\n    let R = 0;\n    if (effectiveLatency < 160) {\n        R = 93.2 - (effectiveLatency / 40);\n    } else {\n        R = 93.2 - (effectiveLatency - 120) / 10;\n    }\n    R -= avgStats.packetsLost / avgStats.packetsCount * 2.50;\n    return 1 + (0.035) * R + (.000007) * R * (R - 60) * (100 - R);\n}\n\nexport function enableMos() {\n    supportsMos = true;\n}\n\nexport function getMOS() {\n    if (!supportsMos || !audioStatus) {\n        return undefined;\n    }\n    const inputChannelMOS = getMOSByStream('inputChannelStats');\n    const ouputChannelMOS = getMOSByStream('outputChannelStats');\n    audioStatus = null;\n    if (isNaN(ouputChannelMOS) && isNaN(inputChannelMOS)) {\n        return 0;\n    } else if (isNaN(ouputChannelMOS)) {\n        return inputChannelMOS;\n    } else if (isNaN(inputChannelMOS)) {\n        return ouputChannelMOS;\n    } else {\n        return Math.min(inputChannelMOS, ouputChannelMOS);\n    }\n}\n\nexport function initAudioStats() {\n    audioStatus = new AudioStatsElement({inputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0}), \n                               outputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0})});\n}\n\nexport function updateAudioStats(statsArray) {\n    if (audioStatus) {\n        statsArray.forEach((stats) => {\n            if (stats.inputChannelStats) {\n                audioStatus.inputChannelStats.statsCount++;\n                audioStatus.inputChannelStats.packetsCount += stats.inputChannelStats.packetsCount | 0;\n                audioStatus.inputChannelStats.packetsLost += stats.inputChannelStats.packetsLost | 0;\n                audioStatus.inputChannelStats.jitterBufferMillis += stats.inputChannelStats.jitterBufferMillis | 0;\n                audioStatus.inputChannelStats.roundTripTimeMillis += stats.inputChannelStats.roundTripTimeMillis | 0;\n            }\n            if (stats.outputChannelStats) {\n                audioStatus.outputChannelStats.statsCount++;\n                audioStatus.outputChannelStats.packetsCount += stats.outputChannelStats.packetsCount | 0;\n                audioStatus.outputChannelStats.packetsLost += stats.outputChannelStats.packetsLost | 0;\n                audioStatus.outputChannelStats.jitterBufferMillis += stats.outputChannelStats.jitterBufferMillis | 0;\n                audioStatus.outputChannelStats.roundTripTimeMillis += stats.outputChannelStats.roundTripTimeMillis | 0;\n            }\n        });\n    }\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { CONNECTOR_CONFIG_EXPOSED_FIELDS, CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH, CONNECTOR_CONFIG_EXCEPTION_FIELDS } from './constants.js';\nimport { Validator, GenericResult, InitResult, CallResult, HangupResult, HoldToggleResult, PhoneContactsResult, MuteToggleResult,\n    ParticipantResult, RecordingToggleResult, AgentConfigResult, ActiveCallsResult, SignedRecordingUrlResult, LogoutResult,\n    VendorConnector, Contact, AudioStats, SuperviseCallResult, SupervisorHangupResult, AgentStatusInfo, SupervisedCallInfo, \n    CapabilitiesResult, AgentVendorStatusInfo, StateChangeResult, CustomError } from './types';\nimport { enableMos, getMOS, initAudioStats, updateAudioStats } from './mosUtil';\nimport { log, getLogs } from './logger';\n\nlet channelPort;\nlet vendorConnector;\nlet agentAvailable;\nlet isSupervisorConnected;\n\n/**\n * Gets the error type from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorType(e) {\n    return e && e.type ? e.type : e;\n}\n\n/**\n * Sanitizes the object by removing any PII data\n * @param {object} payload\n */\nfunction sanitizePayload(payload) {\n    if (payload) {\n        if (typeof (payload) === 'function') {\n            // remove functions from the payload, because they cannot be copied by the postMessage function\n            return;\n        } else if (typeof (payload) === 'object') {\n            const isArray = Array.isArray(payload);\n            const sanitizedPayload = isArray ? [] : {};\n\n            if (isArray) {\n                payload.forEach(element => {\n                    sanitizedPayload.push(sanitizePayload(element));\n                });\n            } else {\n                for (const property in payload) {\n                    if (property !== 'phoneNumber' &&\n                        property !== 'number' &&\n                        property !== 'name' &&\n                        property !== 'callAttributes') {\n                        sanitizedPayload[property] = sanitizePayload(payload[property]);\n                    }\n                }\n            }\n            return sanitizedPayload;\n        }\n    }\n    return payload;\n}\n\n/**\n * Gets the error message from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorMessage(e) {\n    return e && e.message ? e.message : e;\n}\n/** \n * Dispatch a telephony event log to Salesforce\n * @param {String} eventType event type, i.e. constants.EVENT_TYPE.CALL_STARTED    \n * @param {Object} payload event payload\n * @param {Boolean} isError error scenario\n */\nfunction dispatchEventLog(eventType, payload, isError) {\n    const sanitizedPayload = sanitizePayload(payload);\n    const logLevel = isError ? constants.LOG_LEVEL.ERROR : constants.LOG_LEVEL.INFO;\n    log({eventType, payload}, logLevel, constants.LOG_SOURCE.SYSTEM);\n\n    channelPort.postMessage({\n        type: constants.MESSAGE_TYPE.LOG,\n        payload: { eventType, payload: sanitizedPayload, isError }\n    });\n}\n/** \n * Dispatch a telephony event to Salesforce\n * @param {String} eventType event type, i.e. constants.EVENT_TYPE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} registerLog optional argument to not register the event\n */\nfunction dispatchEvent(eventType, payload, registerLog = true) {\n    channelPort.postMessage({\n        type: constants.MESSAGE_TYPE.TELEPHONY_EVENT_DISPATCHED,\n        payload: { telephonyEventType: eventType, telephonyEventPayload: payload }\n    });\n    if (registerLog) {\n        dispatchEventLog(eventType, payload, false);\n    }\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {string} errorType Error Type, ex: constants.ErrorType.MICROPHONE_NOT_SHARED\n * @param {object} error Error object representing the error\n * @param {string} eventType The event that caused this error, ex: constants.MESSAGE_TYPE.ACCEPT_CALL\n */\nfunction dispatchError(errorType, error, eventType) {\n    // eslint-disable-next-line no-console\n    console.error(`SCV dispatched error ${errorType} for eventType ${eventType}`, error);\n    dispatchEvent(constants.EVENT_TYPE.ERROR, { message: constants.ERROR_TYPE[errorType] }, false);\n    dispatchEventLog(eventType, { errorType, error }, true);\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {CustomError} error Error object representing the custom error\n * @param {string} eventType The event that caused this error, ex: constants.MESSAGE_TYPE.ACCEPT_CALL\n */\nfunction dispatchCustomError(error, eventType) {\n    // eslint-disable-next-line no-console\n    const payload = {\n        customError: {\n            labelName: error.labelName,\n            namespace: error.namespace,\n            message: error.message\n        }\n    };\n    console.error(`SCV dispatched custom error for eventType ${eventType}`, payload);\n    dispatchEvent(constants.EVENT_TYPE.ERROR, payload, false);\n    dispatchEventLog(eventType, { errorType: constants.ERROR_TYPE.CUSTOM_ERROR, error }, true);\n}\n\nfunction dispatchInfo(eventType, payload) {\n    // eslint-disable-next-line no-console\n    console.info(`SCV info message dispatched for eventType ${eventType} with payload ${JSON.stringify(payload)}`);\n    dispatchEvent(constants.EVENT_TYPE.INFO, { message: constants.INFO_TYPE[eventType] }, false);\n    dispatchEventLog(eventType, payload, false);\n}\n\n/** \n * Notify Salesforce that the connector is ready\n */\nasync function setConnectorReady() {\n    try {\n        const agentConfigResult = await vendorConnector.getAgentConfig();\n        const capabilitiesResult = await vendorConnector.getCapabilities();\n        Validator.validateClassObject(agentConfigResult, AgentConfigResult);\n        Validator.validateClassObject(capabilitiesResult, CapabilitiesResult);\n        if (capabilitiesResult.supportsMos) {\n            enableMos();\n        }\n        const activeCallsResult = await vendorConnector.getActiveCalls();\n        Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n        const activeCalls = activeCallsResult.activeCalls;\n        const type = constants.MESSAGE_TYPE.CONNECTOR_READY;\n        const payload = {\n            agentConfig: {\n\n                [constants.AGENT_CONFIG_TYPE.PHONES] : agentConfigResult.phones,\n                [constants.AGENT_CONFIG_TYPE.SELECTED_PHONE] : agentConfigResult.selectedPhone\n            },\n            capabilities: {\n                [constants.CAPABILITIES_TYPE.MUTE] : capabilitiesResult.hasMute,\n                [constants.CAPABILITIES_TYPE.RECORD] : capabilitiesResult.hasRecord,\n                [constants.CAPABILITIES_TYPE.MERGE] : capabilitiesResult.hasMerge,\n                [constants.CAPABILITIES_TYPE.SWAP] : capabilitiesResult.hasSwap,\n                [constants.CAPABILITIES_TYPE.SIGNED_RECORDING_URL] : capabilitiesResult.hasSignedRecordingUrl,\n                [constants.CAPABILITIES_TYPE.DEBUG_ENABLED] : capabilitiesResult.debugEnabled,\n                [constants.CAPABILITIES_TYPE.CONTACT_SEARCH] : capabilitiesResult.hasContactSearch,\n                [constants.CAPABILITIES_TYPE.VENDOR_PROVIDED_AVAILABILITY] : capabilitiesResult.hasAgentAvailability,\n                [constants.CAPABILITIES_TYPE.VENDOR_PROVIDED_QUEUE_WAIT_TIME] : capabilitiesResult.hasQueueWaitTime,\n                [constants.CAPABILITIES_TYPE.SUPERVISOR_LISTEN_IN] : capabilitiesResult.hasSupervisorListenIn,\n                [constants.CAPABILITIES_TYPE.SUPERVISOR_BARGE_IN] : capabilitiesResult.hasSupervisorBargeIn,\n                [constants.CAPABILITIES_TYPE.MOS] : capabilitiesResult.supportsMos,\n                [constants.CAPABILITIES_TYPE.BLIND_TRANSFER] : capabilitiesResult.hasBlindTransfer,\n                [constants.CAPABILITIES_TYPE.TRANSFER_TO_OMNI_FLOW] : capabilitiesResult.hasTransferToOmniFlow,\n                [constants.CAPABILITIES_TYPE.PENDING_STATUS_CHANGE] : capabilitiesResult.hasPendingStatusChange,\n                [constants.CAPABILITIES_TYPE.PHONEBOOK] : capabilitiesResult.hasPhoneBook\n            },\n            callInProgress: activeCalls.length > 0 ? activeCalls[0] : null\n        }\n        channelPort.postMessage({\n            type,\n            payload\n        });\n        dispatchEventLog(type, payload, false);\n    } catch (e) {\n        // Post CONNECTOR_READY even if getAgentConfig is not implemented\n        channelPort.postMessage({\n            type: constants.MESSAGE_TYPE.CONNECTOR_READY,\n            payload: {}\n        });\n        dispatchEventLog(constants.MESSAGE_TYPE.CONNECTOR_READY, {}, false);\n    }\n}\n\n//TODO: 230 we should convert call object to PhoneCall object\nasync function channelMessageHandler(message) { \n    const eventType = message.data.type;\n    if (eventType !== constants.MESSAGE_TYPE.LOG) {\n        dispatchEventLog(eventType, message.data, false);\n    }\n    switch (eventType) {\n        case constants.MESSAGE_TYPE.ACCEPT_CALL:\n            try {\n                if (message.data.call && message.data.call.callType &&\n                    message.data.call.callType.toLowerCase() === constants.CALL_TYPE.OUTBOUND.toLowerCase()) {\n                    return;\n                }\n                initAudioStats();\n                if (isSupervisorConnected) {\n                    const hangupPayload = await vendorConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_HANGUP, hangupPayload.calls);\n                }\n                let payload = await vendorConnector.acceptCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(call.callType.toLowerCase() === constants.CALL_TYPE.CALLBACK.toLowerCase() ?\n                    constants.EVENT_TYPE.CALL_STARTED : constants.EVENT_TYPE.CALL_CONNECTED, call);\n            } catch (e) {\n                isSupervisorConnected = false;\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.ACCEPT_CALL);\n                } else {\n                    dispatchInfo(constants.INFO_TYPE.CAN_NOT_ACCEPT_THE_CALL, {messagetype: constants.MESSAGE_TYPE.ACCEPT_CALL, additionalInfo: e});\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.DECLINE_CALL:\n            try {\n                const payload =  await vendorConnector.declineCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(constants.EVENT_TYPE.HANGUP, call);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.DECLINE_CALL);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_DECLINE_THE_CALL, e, constants.MESSAGE_TYPE.DECLINE_CALL);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.END_CALL:\n            try {\n                const payload = await vendorConnector.endCall(message.data.call, message.data.agentStatus);\n                Validator.validateClassObject(payload, HangupResult);\n                const activeCallsResult = await vendorConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                const { calls } = payload;\n                // after end calls from vendor side, if no more active calls, fire HANGUP, otherwise, fire PARTICIPANT_REMOVED\n                if (activeCalls.length === 0) {\n                    dispatchEvent(constants.EVENT_TYPE.HANGUP, calls);\n                } else {\n                    dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_REMOVED, calls.length > 0 && calls[0]);\n                }\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.END_CALL);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_END_THE_CALL, e, constants.MESSAGE_TYPE.END_CALL);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.MUTE:\n            try {\n                const payload = await vendorConnector.mute();\n                publishEvent({eventType: constants.EVENT_TYPE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.MUTE);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_MUTE_CALL, e, constants.MESSAGE_TYPE.MUTE);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.UNMUTE:\n            try {\n                const payload = await vendorConnector.unmute();\n                publishEvent({eventType: constants.EVENT_TYPE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.UNMUTE);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_UNMUTE_CALL, e, constants.MESSAGE_TYPE.UNMUTE);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.HOLD:\n            try {\n                const payload = await vendorConnector.hold(message.data.call);\n                publishEvent({eventType: constants.EVENT_TYPE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.HOLD);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.INVALID_PARTICIPANT:\n                            dispatchError(constants.ERROR_TYPE.INVALID_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.HOLD);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.CAN_NOT_HOLD_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.HOLD);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.RESUME:\n            try {\n                const payload = await vendorConnector.resume(message.data.call);\n                publishEvent({eventType: constants.EVENT_TYPE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.RESUME);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.INVALID_PARTICIPANT:\n                            dispatchError(constants.ERROR_TYPE.INVALID_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.RESUME);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.CAN_NOT_RESUME_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.RESUME);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.SET_AGENT_STATUS:\n            try {\n                const statusInfo = message.data.statusInfo || {};\n                const enqueueNextState = message.data.enqueueNextState || false;\n                const payload = await vendorConnector.setAgentStatus(message.data.agentStatus, statusInfo, enqueueNextState);\n                Validator.validateClassObject(payload, GenericResult);\n                const { success } = payload;\n                dispatchEvent(constants.EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.SET_AGENT_STATUS);\n                } else {\n                    if (message.data.statusInfo) {\n                        dispatchEvent(constants.EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success: false });\n                    }\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.INVALID_AGENT_STATUS:\n                            dispatchError(constants.ERROR_TYPE.INVALID_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.SET_AGENT_STATUS);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.SET_AGENT_STATUS);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.GET_AGENT_STATUS:\n            try {\n                const payload = await vendorConnector.getAgentStatus();\n                Validator.validateClassObject(payload, AgentVendorStatusInfo);\n                dispatchEvent(constants.EVENT_TYPE.GET_AGENT_STATUS_RESULT, payload);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.GET_AGENT_STATUS);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.GET_AGENT_STATUS);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.DIAL:\n            try {\n                const payload = await vendorConnector.dial(new Contact(message.data.contact));\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(constants.EVENT_TYPE.CALL_STARTED, call);\n            } catch (e) {\n                dispatchEvent(constants.EVENT_TYPE.CALL_FAILED);\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.DIAL);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.INVALID_DESTINATION:\n                            dispatchError(constants.ERROR_TYPE.INVALID_DESTINATION, getErrorMessage(e), constants.MESSAGE_TYPE.DIAL);\n                            break;\n                        case constants.ERROR_TYPE.GENERIC_ERROR:\n                            dispatchError(constants.ERROR_TYPE.GENERIC_ERROR, getErrorMessage(e), constants.MESSAGE_TYPE.DIAL);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.DIAL);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.SEND_DIGITS:\n            try {\n                await vendorConnector.sendDigits(message.data.digits);\n            } catch (e) {\n                dispatchEventLog(constants.MESSAGE_TYPE.SEND_DIGITS, message.data.digits, true);\n            }\n            break;\n        case constants.MESSAGE_TYPE.GET_PHONE_CONTACTS:\n            try  {\n                const payload = await vendorConnector.getPhoneContacts(message.data.filter);\n                Validator.validateClassObject(payload, PhoneContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        type: contact.type,\n                        name: contact.name,\n                        phoneNumber: contact.phoneNumber,\n                        prefix: contact.prefix,\n                        extension: contact.extension,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        availability: contact.availability,\n                        queueWaitTime: contact.queueWaitTime,\n                        recordId: contact.recordId,\n                        description: contact.description\n                    };\n                });\n                dispatchEvent(constants.EVENT_TYPE.PHONE_CONTACTS, {\n                    contacts, contactTypes: payload.contactTypes\n                });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.GET_PHONE_CONTACTS);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_GET_PHONE_CONTACTS, e, constants.MESSAGE_TYPE.GET_PHONE_CONTACTS);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.SWAP_PARTICIPANTS:\n            try {\n                // TODO: Create PhoneCall from call1.callId & call2.callId\n                // TODO: rename to call1 and call2\n                const payload = await vendorConnector.swap(message.data.callToHold, message.data.callToResume);\n                publishEvent({ eventType: constants.EVENT_TYPE.PARTICIPANTS_SWAPPED, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.SWAP_PARTICIPANTS);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, e, constants.MESSAGE_TYPE.SWAP_PARTICIPANTS);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.CONFERENCE:\n            try {\n                const payload = await vendorConnector.conference(message.data.calls);\n                publishEvent({ eventType: constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.CONFERENCE);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_CONFERENCE, e, constants.MESSAGE_TYPE.CONFERENCE);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.ADD_PARTICIPANT:\n            try {\n                const payload = await vendorConnector.addParticipant(new Contact(message.data.contact), message.data.call, message.data.isBlindTransfer);\n                publishEvent({ eventType: constants.EVENT_TYPE.PARTICIPANT_ADDED, payload });\n                if (message.data.isBlindTransfer) {\n                    dispatchEvent(constants.EVENT_TYPE.HANGUP, message.data.call);\n                }\n            } catch (e) {\n                // TODO: Can we avoid passing in reason field\n                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_REMOVED, {\n                    reason: constants.EVENT_TYPE.ERROR.toLowerCase()\n                });\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.ADD_PARTICIPANT);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.INVALID_DESTINATION:\n                            dispatchError(constants.ERROR_TYPE.INVALID_DESTINATION, getErrorMessage(e), constants.MESSAGE_TYPE.ADD_PARTICIPANT);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.ADD_PARTICIPANT);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.PAUSE_RECORDING:\n            try {\n                const payload = await vendorConnector.pauseRecording(message.data.call);\n                publishEvent({ eventType: constants.EVENT_TYPE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.PAUSE_RECORDING);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_PAUSE_RECORDING, e, constants.MESSAGE_TYPE.PAUSE_RECORDING);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.RESUME_RECORDING:\n            try {\n                const payload = await vendorConnector.resumeRecording(message.data.call);\n                publishEvent({ eventType: constants.EVENT_TYPE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.RESUME_RECORDING);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_RESUME_RECORDING, e, constants.MESSAGE_TYPE.RESUME_RECORDING);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.LOGOUT:\n            try {\n                const payload = await vendorConnector.logout();\n                Validator.validateClassObject(payload, LogoutResult);\n                const { success, loginFrameHeight } = payload;\n                dispatchEvent(constants.EVENT_TYPE.LOGOUT_RESULT, { success, loginFrameHeight });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.LOGOUT);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_OUT, e, constants.MESSAGE_TYPE.LOGOUT);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.MESSAGE:\n            // TODO: Define a return type for handling message\n            vendorConnector.handleMessage(message.data.message);\n        break;\n        case constants.MESSAGE_TYPE.WRAP_UP_CALL:\n            vendorConnector.wrapUpCall(message.data.call);\n        break;\n        case constants.MESSAGE_TYPE.AGENT_AVAILABLE: {\n            agentAvailable = message.data.isAvailable;\n            if (agentAvailable) {\n                const activeCallsResult = await vendorConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                for (const callId in activeCalls) {\n                    const call = activeCalls[callId];\n                    const shouldReplay = call.callInfo ? call.callInfo.isReplayable : true;\n                    const isSupervisorCall = call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.SUPERVISOR;\n                    const hasSupervisorBargedIn = isSupervisorCall && call.callAttributes && call.callAttributes.hasSupervisorBargedIn;\n                    if (shouldReplay) {\n                        call.isReplayedCall = true;\n                        switch(call.state) {\n                            case constants.CALL_STATE.CONNECTED:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, call);\n                                    if (hasSupervisorBargedIn) {\n                                        dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_BARGED_IN, call);\n                                    }\n                                    break;\n                                }\n                                dispatchEvent(constants.EVENT_TYPE.CALL_CONNECTED, call);\n                                break;\n                            case constants.CALL_STATE.RINGING:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_CALL_STARTED, call);\n                                    break;\n                                }\n                                dispatchEvent(constants.EVENT_TYPE.CALL_STARTED, call);\n                                break;\n                            case constants.CALL_STATE.TRANSFERRING:\n                                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_ADDED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            case constants.CALL_STATE.TRANSFERRED:\n                                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_CONNECTED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        break;\n        case constants.MESSAGE_TYPE.SET_AGENT_CONFIG:\n            try {\n                const result = await vendorConnector.setAgentConfig(message.data.config);\n                Validator.validateClassObject(result, GenericResult);\n                dispatchEvent(constants.EVENT_TYPE.AGENT_CONFIG_UPDATED, result);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.SET_AGENT_CONFIG);\n                } else {\n                    dispatchError(getErrorType(e) === constants.ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER ? constants.ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER : constants.ERROR_TYPE.CAN_NOT_SET_AGENT_CONFIG , getErrorMessage(e), constants.MESSAGE_TYPE.SET_AGENT_CONFIG);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.GET_SIGNED_RECORDING_URL:\n            try {\n                const { recordingUrl, vendorCallKey, callId } = message.data;\n                const result = await vendorConnector.getSignedRecordingUrl(recordingUrl, vendorCallKey, callId);\n                Validator.validateClassObject(result, SignedRecordingUrlResult);\n                dispatchEvent(constants.EVENT_TYPE.SIGNED_RECORDING_URL, result);\n            } catch (e) {\n                // In case of an error, we want to show an error message in the recording player\n                const signedRecordingUrlResult = new SignedRecordingUrlResult({\n                    success: false\n                });\n                dispatchEvent(constants.EVENT_TYPE.SIGNED_RECORDING_URL, signedRecordingUrlResult, false);\n                dispatchEventLog(constants.MESSAGE_TYPE.GET_SIGNED_RECORDING_URL, signedRecordingUrlResult, true);\n            }\n        break;\n        case constants.MESSAGE_TYPE.DOWNLOAD_VENDOR_LOGS:\n            vendorConnector.downloadLogs(getLogs());\n        break;\n        case constants.MESSAGE_TYPE.LOG: {\n                const { logLevel, logMessage, payload } = message.data;\n                vendorConnector.logMessageToVendor(logLevel, logMessage, payload);\n            }\n        break;\n        case constants.MESSAGE_TYPE.SUPERVISE_CALL:\n            try {\n                isSupervisorConnected = true;\n                const result = await vendorConnector.superviseCall(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                const agentConfigResult = await vendorConnector.getAgentConfig();\n                if(agentConfigResult.selectedPhone.type === constants.PHONE_TYPE.SOFT_PHONE) {\n                    dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, result.call);\n                } else {\n                    dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_CALL_STARTED, result.call);\n                }\n            } catch (e){\n                isSupervisorConnected = false;\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.SUPERVISE_CALL);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, e, constants.MESSAGE_TYPE.SUPERVISE_CALL);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.SUPERVISOR_DISCONNECT:\n            try {\n                const result = await vendorConnector.supervisorDisconnect(message.data.call);\n                Validator.validateClassObject(result, SupervisorHangupResult);\n                isSupervisorConnected = false;\n                dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_HANGUP, result.calls);\n            } catch (e){\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.SUPERVISOR_DISCONNECT);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_DISCONNECT_SUPERVISOR, e, constants.MESSAGE_TYPE.SUPERVISOR_DISCONNECT);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.SUPERVISOR_BARGE_IN:\n            try {\n                const result = await vendorConnector.supervisorBargeIn(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_BARGED_IN, result.call );\n            } catch (e){\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.SUPERVISOR_BARGE_IN);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_BARGE_IN_SUPERVISOR, e, constants.MESSAGE_TYPE.SUPERVISOR_BARGE_IN);\n                }\n            }\n        break;\n        default:\n            break;\n    }\n}\n\n\nasync function windowMessageHandler(message) {\n    switch (message.data.type) {\n        case constants.MESSAGE_TYPE.SETUP_CONNECTOR: {\n            const sfDomain = /^https:\\/\\/[\\w-.]+(lightning\\.[\\w]+\\.soma\\.force\\.com|\\.lightning\\.force\\.com|\\.lightning\\.pc-rnd\\.force\\.com|\\.stm\\.force\\.com|\\.salesforce\\.com|\\.my\\.salesforce-sites\\.com|\\.lightning\\.localhost\\.[\\w]+\\.force.com)$/;\n            const originUrl = new URL(message.origin);\n            const url = originUrl.protocol + '//' + originUrl.hostname;\n\n            if (sfDomain.test(url)) {\n                channelPort = message.ports[0];\n                channelPort.onmessage = channelMessageHandler;\n                dispatchEventLog(constants.MESSAGE_TYPE.SETUP_CONNECTOR, exposedConnectorConfig(message.data.connectorConfig), false);\n                try {\n                    const payload = await vendorConnector.init(message.data.connectorConfig);\n                    Validator.validateClassObject(payload, InitResult);\n                    if (payload.showLogin) {\n                        dispatchEvent(constants.EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        });\n                    } else {\n                        setConnectorReady();\n                    }\n                } catch (e) {\n                    if (e instanceof CustomError) {\n                        dispatchCustomError(e, constants.MESSAGE_TYPE.SETUP_CONNECTOR);\n                    } else {\n                        switch(getErrorType(e)) {\n                            case constants.ERROR_TYPE.INVALID_PARAMS:\n                                dispatchError(constants.ERROR_TYPE.INVALID_PARAMS, getErrorMessage(e), constants.MESSAGE_TYPE.SETUP_CONNECTOR);\n                                break;\n                            default:\n                                dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_IN, getErrorMessage(e), constants.MESSAGE_TYPE.SETUP_CONNECTOR);\n                                break;\n                        }\n                    }\n                }\n            }\n            window.removeEventListener('message', windowMessageHandler);\n        }\n            break;\n        default:\n            break;\n    }\n}\n\nfunction exposedConnectorConfig(payload) {\n    payload = payload || {};\n    let obj = {};\n    //properties that are equal to key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS.forEach(prop => {\n        if (payload.hasOwnProperty(prop)) {\n            obj[prop] = payload[prop];\n        }\n    });\n    //properties that start with key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH.forEach(prop => {\n        Object.keys(payload).forEach(key => {\n            if (key.startsWith(prop) && !CONNECTOR_CONFIG_EXCEPTION_FIELDS.includes(key)) {\n                obj[key] = payload[key];\n            }\n        });\n    });\n\n    return obj;\n}\n\nfunction validatePayload(payload, payloadType, errorType, eventType) {\n    try {\n        Validator.validateClassObject(payload, payloadType);\n        return true;\n    } catch (e) {\n        if (errorType) {\n            dispatchError(errorType, e, eventType);\n        }\n        return false;\n    }\n}\n\n/*========================== Exported Functions ==========================*/\n/**\n * Initialize a vendor connector\n * @param {VendorConnector} connector\n */\nexport function initializeConnector(connector) {\n    vendorConnector = connector;\n    window.addEventListener('message', windowMessageHandler);\n}\n\n/**\n * Publish an event or error log to Salesforce\n * @param {object} param\n * @param {string} param.eventType Any event type to be logged\n * @param {object} param.payload Any payload for the log that needs to be logged\n * @param {boolean} param.isError\n */\nexport function publishLog({ eventType, payload, isError }) {\n    dispatchEventLog(eventType, payload, isError);\n}\n\n/**\n * Publish a telephony error to Salesforce\n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\"|\"AGENT_ERROR\"|\"SOFTPHONE_ERROR\")} param.eventType Event type to publish.\n * @param {object} param.error Error object representing the error\n */\nexport function publishError({ eventType, error }) {\n    if (error instanceof CustomError) {\n        dispatchCustomError(error, eventType);\n        return;\n    }\n\n    switch(eventType) {\n        case constants.EVENT_TYPE.LOGIN_RESULT:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_IN, error, constants.EVENT_TYPE.LOGIN_RESULT);\n            break;\n        case constants.EVENT_TYPE.LOGOUT_RESULT:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_OUT, error, constants.EVENT_TYPE.LOGOUT_RESULT);\n            break;\n        case constants.EVENT_TYPE.CALL_STARTED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.CALL_STARTED);\n            break;\n        case constants.EVENT_TYPE.QUEUED_CALL_STARTED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.QUEUED_CALL_STARTED);\n            break;\n        case constants.EVENT_TYPE.CALL_CONNECTED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.CALL_CONNECTED);\n            break;\n        case constants.EVENT_TYPE.HANGUP: \n            dispatchError(constants.ERROR_TYPE.CAN_NOT_END_THE_CALL, error, constants.EVENT_TYPE.HANGUP);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANT_ADDED:\n            dispatchError(getErrorType(error) === constants.ERROR_TYPE.INVALID_PARTICIPANT ? constants.ERROR_TYPE.INVALID_PARTICIPANT : constants.ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, error, constants.EVENT_TYPE.PARTICIPANT_ADDED);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANT_CONNECTED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT, error, constants.EVENT_TYPE.PARTICIPANT_CONNECTED);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANT_REMOVED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT, error, constants.EVENT_TYPE.PARTICIPANT_REMOVED); \n            break;\n        case constants.EVENT_TYPE.MUTE_TOGGLE:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_TOGGLE_MUTE, error, constants.EVENT_TYPE.MUTE_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.HOLD_TOGGLE: \n            dispatchError(getErrorType(error) === constants.ERROR_TYPE.INVALID_PARTICIPANT ? constants.ERROR_TYPE.INVALID_PARTICIPANT : constants.ERROR_TYPE.CAN_NOT_TOGGLE_HOLD, error, constants.EVENT_TYPE.HOLD_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.RECORDING_TOGGLE:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_TOGGLE_RECORD, error, constants.EVENT_TYPE.RECORDING_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANTS_SWAPPED: \n            dispatchError(constants.ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, error, constants.EVENT_TYPE.PARTICIPANTS_SWAPPED);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_CONFERENCE, error, constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED);\n            break;\n        case constants.EVENT_TYPE.AGENT_ERROR:\n            dispatchError(constants.ERROR_TYPE.AGENT_ERROR, error, constants.EVENT_TYPE.AGENT_ERROR);\n            break;\n        case constants.EVENT_TYPE.SOFTPHONE_ERROR:\n            switch(getErrorType(error)) {\n                case constants.ERROR_TYPE.UNSUPPORTED_BROWSER:\n                    dispatchError(constants.ERROR_TYPE.UNSUPPORTED_BROWSER, error, constants.EVENT_TYPE.SOFTPHONE_ERROR);\n                    break;\n                case constants.ERROR_TYPE.MICROPHONE_NOT_SHARED:\n                    dispatchError(constants.ERROR_TYPE.MICROPHONE_NOT_SHARED, error, constants.EVENT_TYPE.SOFTPHONE_ERROR);\n                    break;\n                default:\n                    dispatchError(constants.ERROR_TYPE.GENERIC_ERROR, error, constants.EVENT_TYPE.SOFTPHONE_ERROR);\n            }\n            break;\n        default:\n            console.error('Unhandled error scenario with arguments ', arguments);\n    }\n}\n\n/**\n * Publish an event to Sfdc. The event payload will be verified to be the correct type before being published. \n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\")} param.eventType Event type to publish\n * @param {object} param.payload Payload for the event. Must to be an object of the payload class associated with the EVENT_TYPE else the event is NOT dispatched\n * @param {boolean} param.registerLog Boolean to opt out of registering logs for events\n * LOGIN_RESULT - GenericResult\n * LOGOUT_RESULT - LogoutResult\n * CALL_STARTED - CallResult\n * QUEUED_CALL_STARTED - CallResult\n * CALL_CONNECTED - CallResult\n * HANGUP - CallResult\n * PARTICIPANT_CONNECTED - ParticipantResult\n * PARTICIPANT_ADDED - ParticipantResult\n * PARTICIPANTS_SWAPPED - HoldToggleResult\n * PARTICIPANTS_CONFERENCED - HoldToggleResult\n * MESSAGE - object\n * MUTE_TOGGLE - MuteToggleResult\n * HOLD_TOGGLE - HoldToggleResult\n * RECORDING_TOGGLE - RecordingToggleResult\n */\nexport async function publishEvent({ eventType, payload, registerLog = true }) {\n    switch(eventType) {\n        case constants.EVENT_TYPE.LOGIN_RESULT: {\n            if (validatePayload(payload, GenericResult, constants.ERROR_TYPE.CAN_NOT_LOG_IN, constants.EVENT_TYPE.LOGIN_RESULT)) {\n                dispatchEvent(constants.EVENT_TYPE.LOGIN_RESULT, payload, registerLog);\n                if (payload.success) {\n                    setConnectorReady();\n                }\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.LOGOUT_RESULT:\n            if (validatePayload(payload, LogoutResult, constants.ERROR_TYPE.CAN_NOT_LOG_OUT, constants.EVENT_TYPE.LOGOUT_RESULT)) {\n                dispatchEvent(constants.EVENT_TYPE.LOGOUT_RESULT, {\n                    success: payload.success,\n                    loginFrameHeight: payload.loginFrameHeight\n                }, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.CALL_STARTED)) {\n                dispatchEvent(constants.EVENT_TYPE.CALL_STARTED, payload.call, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.QUEUED_CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.QUEUED_CALL_STARTED)) {\n                dispatchEvent(constants.EVENT_TYPE.QUEUED_CALL_STARTED, payload.call, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.CALL_CONNECTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.CALL_CONNECTED)) {\n                initAudioStats();\n                if (isSupervisorConnected) {\n                    const hangupPayload = await vendorConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_HANGUP, hangupPayload, registerLog);\n                    dispatchEvent(constants.EVENT_TYPE.CALL_CONNECTED, payload.call, registerLog);\n                    break;\n                } \n                dispatchEvent(constants.EVENT_TYPE.CALL_CONNECTED, payload.call, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.HANGUP: {\n            if (validatePayload(payload, HangupResult, constants.ERROR_TYPE.CAN_NOT_END_THE_CALL, constants.EVENT_TYPE.HANGUP)) {\n                dispatchEvent(constants.EVENT_TYPE.HANGUP, payload.calls, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.PARTICIPANT_ADDED: {\n            if (validatePayload(payload, ParticipantResult, constants.ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, constants.EVENT_TYPE.PARTICIPANT_ADDED)) {\n                const { initialCallHasEnded, callInfo, phoneNumber, callId } = payload;\n                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_ADDED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    phoneNumber,\n                    callId\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.PARTICIPANT_CONNECTED: {\n            if (validatePayload(payload, ParticipantResult, constants.ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT, constants.EVENT_TYPE.PARTICIPANT_CONNECTED)) {\n                const { initialCallHasEnded, callInfo, phoneNumber, callId } = payload;\n                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_CONNECTED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    phoneNumber,\n                    callId\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.PARTICIPANT_REMOVED: {\n            // TODO: The logic here needs to be modified. Ideally firing CallResult with \n            // correct participantType should do the trick but we are firing PARTICIPANT_CONNECTED because of a bug W-8601645\n            // Once the bug is fixed, this code needs to be updated\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT, constants.EVENT_TYPE.PARTICIPANT_REMOVED)) { \n                const { call } = payload;\n                const activeCallsResult = await vendorConnector.getActiveCalls();\n                if (validatePayload(activeCallsResult, ActiveCallsResult)) {\n                    // when no more active calls, fire HANGUP\n                    const activeCalls = activeCallsResult.activeCalls;\n                    if (activeCalls.length === 0) {\n                        dispatchEvent(constants.EVENT_TYPE.HANGUP, call, registerLog);\n                    } else if (call && call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.INITIAL_CALLER) {\n                        // when there is still transfer call, based on the state of the transfer call, fire PARTICIPANT_ADDED or PARTICIPANT_CONNECTED\n                        const transferCall = Object.values(activeCalls).filter((obj) => obj['callType'] === constants.CALL_TYPE.ADD_PARTICIPANT).pop();\n                        const event = transferCall.state === constants.CALL_STATE.TRANSFERRING ? constants.EVENT_TYPE.PARTICIPANT_ADDED : constants.EVENT_TYPE.PARTICIPANT_CONNECTED;\n                        dispatchEvent(event, {\n                            initialCallHasEnded : true\n                        })\n                    } else {\n                        dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_REMOVED, {\n                            reason: call? call.reason : null\n                        }, registerLog);\n                    }\n                }\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.MESSAGE:\n            dispatchEvent(constants.EVENT_TYPE.MESSAGE, payload, registerLog);\n            break;\n        // TODO: Add validations for the ACW & Wrap up ended\n        case constants.EVENT_TYPE.AFTER_CALL_WORK_STARTED:\n            dispatchEvent(constants.EVENT_TYPE.AFTER_CALL_WORK_STARTED, payload, registerLog);\n            break;\n        case constants.EVENT_TYPE.WRAP_UP_ENDED:\n            dispatchEvent(constants.EVENT_TYPE.WRAP_UP_ENDED, payload, registerLog);\n            break;\n        /* This is only added to aid in connector development */\n        case constants.EVENT_TYPE.REMOTE_CONTROLLER:\n            channelMessageHandler(payload);\n            break;\n        case constants.EVENT_TYPE.MUTE_TOGGLE:\n            if (validatePayload(payload, MuteToggleResult, constants.ERROR_TYPE.CAN_NOT_TOGGLE_MUTE, constants.EVENT_TYPE.MUTE_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.MUTE_TOGGLE, payload, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.HOLD_TOGGLE: {\n            const { isThirdPartyOnHold, isCustomerOnHold, calls} = payload;\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.CAN_NOT_TOGGLE_HOLD, constants.EVENT_TYPE.HOLD_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.RECORDING_TOGGLE: {\n            const { isRecordingPaused,\n                contactId,\n                initialContactId,\n                instanceId,\n                region\n            } = payload;\n            if (validatePayload(payload, RecordingToggleResult, constants.ERROR_TYPE.CAN_NOT_TOGGLE_RECORD, constants.EVENT_TYPE.RECORDING_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.RECORDING_TOGGLE, {\n                    isRecordingPaused,\n                    contactId,\n                    initialContactId,\n                    instanceId,\n                    region\n                }, registerLog);\n            }\n        break;\n        }\n        case constants.EVENT_TYPE.PARTICIPANTS_SWAPPED: {\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, constants.EVENT_TYPE.PARTICIPANTS_SWAPPED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold, calls } = payload;\n                dispatchEvent(constants.EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, registerLog);\n            }\n        }\n        break;\n        case constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED: {\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.CAN_NOT_CONFERENCE, constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold } = payload;\n                dispatchEvent(constants.EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold\n                }, registerLog);\n            }\n        break;\n        }\n        case constants.EVENT_TYPE.UPDATE_AUDIO_STATS: {\n            if (validatePayload(payload, AudioStats)) {\n                if (payload.stats) {\n                    updateAudioStats(payload.stats);\n                }\n                if (payload.isAudioStatsCompleted && payload.callId) {\n                    const callId = payload.callId;\n                    const mos = getMOS();\n                    dispatchEvent(constants.EVENT_TYPE.UPDATE_AUDIO_STATS_COMPLETED, {callId, mos}, registerLog);\n                }\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.SUPERVISOR_BARGED_IN: {\n            if (validatePayload(payload, SuperviseCallResult, constants.ERROR_TYPE.CAN_NOT_BARGE_IN_SUPERVISOR, constants.EVENT_TYPE.SUPERVISOR_BARGED_IN)) {\n                dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_BARGED_IN, payload.call, registerLog);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.CALL_BARGED_IN: {\n            if (validatePayload(payload, SupervisedCallInfo,  constants.ERROR_TYPE.GENERIC_ERROR, constants.EVENT_TYPE.CALL_BARGED_IN)) {\n                dispatchEvent(constants.EVENT_TYPE.CALL_BARGED_IN, payload, registerLog);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.SUPERVISOR_CALL_STARTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, constants.EVENT_TYPE.SUPERVISOR_CALL_STARTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_CALL_STARTED, payload.call, registerLog);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.SUPERVISOR_CALL_CONNECTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, constants.EVENT_TYPE.SUPERVISOR_CALL_CONNECTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, payload.call, registerLog);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.SUPERVISOR_HANGUP: {\n            if (validatePayload(payload, SupervisorHangupResult,  constants.ERROR_TYPE.CAN_NOT_DISCONNECT_SUPERVISOR, constants.EVENT_TYPE.SUPERVISOR_HANGUP)) {\n                isSupervisorConnected = false;\n                dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_HANGUP, payload.calls, registerLog);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.SET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentStatusInfo,  constants.ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, constants.EVENT_TYPE.SET_AGENT_STATUS)) {\n                const statusId = payload.statusId;\n                dispatchEvent(constants.EVENT_TYPE.SET_AGENT_STATUS, { statusId }, registerLog);\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.EVENT_TYPE.GET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentVendorStatusInfo, constants.ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, constants.EVENT_TYPE.GET_AGENT_STATUS)) {\n                dispatchEvent(constants.EVENT_TYPE.GET_AGENT_STATUS, payload);\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.EVENT_TYPE.STATE_CHANGE: {\n            if(validatePayload(payload, StateChangeResult, constants.ERROR_TYPE.INVALID_STATE_CHANGE_RESULT, constants.EVENT_TYPE.STATE_CHANGE)) {\n                dispatchEvent(constants.EVENT_TYPE.STATE_CHANGE, payload);\n            }\n            break;\n        }\n    }\n}"],"sourceRoot":""}