{"version":3,"sources":["webpack://SCVConnectorBase/webpack/universalModuleDefinition","webpack://SCVConnectorBase/webpack/bootstrap","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/createClass.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/typeof.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/regenerator/index.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/getPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/inherits.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/toPropertyKey.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/wrapNativeSuper.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/toPrimitive.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/isNativeFunction.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/construct.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js","webpack://SCVConnectorBase/./src/main/constants.js","webpack://SCVConnectorBase/./src/main/logger.js","webpack://SCVConnectorBase/./src/main/downloadData.js","webpack://SCVConnectorBase/./src/main/types.js","webpack://SCVConnectorBase/./src/main/mosUtil.js","webpack://SCVConnectorBase/./src/main/baseConnector.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","toPropertyKey","_defineProperties","target","props","length","descriptor","configurable","writable","Constructor","protoProps","staticProps","instance","TypeError","obj","_typeof","iterator","constructor","runtime","regeneratorRuntime","accidentalStrictMode","globalThis","Function","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","fn","self","args","arguments","apply","err","undefined","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","_setPrototypeOf","subClass","superClass","toPrimitive","String","assertThisInitialized","isNativeFunction","construct","_wrapNativeSuper","Class","_cache","Map","has","set","Wrapper","e","Number","_regeneratorRuntime","a","asyncIterator","u","wrap","Generator","Context","makeInvokeMethod","tryCatch","type","h","f","y","GeneratorFunction","GeneratorFunctionPrototype","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","__await","callInvokeWithMethodAndArg","Error","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","awrap","async","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","ReferenceError","toString","indexOf","isNativeReflectConstruct","Reflect","_isNativeReflectConstruct","Boolean","valueOf","MESSAGE_TYPE","SETUP_CONNECTOR","CONNECTOR_READY","LOG","TELEPHONY_EVENT_DISPATCHED","SET_AGENT_STATUS","GET_AGENT_STATUS","LOGOUT","MESSAGE","DOWNLOAD_VENDOR_LOGS","AGENT_WORK_EVENT","GET_CONTACTS","VOICE","ACCEPT_CALL","DECLINE_CALL","END_CALL","MUTE","UNMUTE","HOLD","RESUME","DIAL","SEND_DIGITS","GET_PHONE_CONTACTS","SWAP_PARTICIPANTS","ADD_PARTICIPANT","CONFERENCE","PAUSE_RECORDING","RESUME_RECORDING","SUPERVISE_CALL","SUPERVISOR_BARGE_IN","SUPERVISOR_DISCONNECT","SET_AGENT_CONFIG","GET_SIGNED_RECORDING_URL","WRAP_UP_CALL","AGENT_AVAILABLE","EVENT_TYPE","ERROR","WARNING","INFO","LOGIN_STARTED","LOGIN_RESULT","LOGOUT_RESULT","SHOW_LOGIN","SET_AGENT_STATUS_RESULT","GET_AGENT_STATUS_RESULT","STATE_CHANGE","REMOTE_CONTROLLER","SHOW_STORAGE_ACCESS","STORAGE_ACCESS_RESULT","GET_CONTACTS_RESULT","QUEUED_CALL_STARTED","CALL_STARTED","CALL_CONNECTED","CALL_FAILED","MUTE_TOGGLE","HOLD_TOGGLE","PHONE_CONTACTS","PARTICIPANT_ADDED","PARTICIPANT_CONNECTED","PARTICIPANT_REMOVED","RECORDING_TOGGLE","PARTICIPANTS_SWAPPED","PARTICIPANTS_CONFERENCED","SIGNED_RECORDING_URL","UPDATE_AUDIO_STATS","UPDATE_AUDIO_STATS_COMPLETED","SUPERVISOR_BARGED_IN","SUPERVISOR_CALL_STARTED","SUPERVISOR_CALL_CONNECTED","SUPERVISOR_HANGUP","CALL_BARGED_IN","WRAP_UP_ENDED","AFTER_CALL_WORK_STARTED","AGENT_CONFIG_UPDATED","AGENT_ERROR","HANGUP","SOFTPHONE_ERROR","SHOW_TRANSFER_VIEW","INFO_TYPE","CAN_NOT_ACCEPT_THE_CALL","ERROR_TYPE","CAN_NOT_DECLINE_THE_CALL","CAN_NOT_END_THE_CALL","CAN_NOT_HOLD_CALL","CAN_NOT_RESUME_CALL","CAN_NOT_MUTE_CALL","CAN_NOT_UNMUTE_CALL","CAN_NOT_TOGGLE_MUTE","CAN_NOT_TOGGLE_HOLD","CAN_NOT_TOGGLE_RECORD","INVALID_PARTICIPANT","INVALID_PARAMS","CAN_NOT_GET_PHONE_CONTACTS","CAN_NOT_SWAP_PARTICIPANTS","CAN_NOT_CONFERENCE","INVALID_DESTINATION","INVALID_PHONE_NUMBER","CAN_NOT_HANGUP_PARTICIPANT","CAN_NOT_ADD_PARTICIPANT","CAN_NOT_CONNECT_PARTICIPANT","CAN_NOT_START_THE_CALL","CAN_NOT_PAUSE_RECORDING","CAN_NOT_RESUME_RECORDING","CAN_NOT_SET_AGENT_CONFIG","CAN_NOT_SET_CAPABILITIES","CAN_NOT_UPDATE_PHONE_NUMBER","CAN_NOT_GET_SIGNED_RECORDING_URL","CAN_NOT_SUPERVISE_CALL","CAN_NOT_DISCONNECT_SUPERVISOR","CAN_NOT_BARGE_IN_SUPERVISOR","CAN_NOT_BARGE_IN_CALL","MICROPHONE_NOT_SHARED","UNSUPPORTED_BROWSER","CUSTOM_ERROR","GENERIC_ERROR","AUTHENTICATION_ERROR","INVALID_AGENT_STATUS","CAN_NOT_GET_AGENT_STATUS","CAN_NOT_SET_AGENT_STATUS","LOGIN_REQUIRED","CAN_NOT_LOG_IN","CAN_NOT_LOG_OUT","INVALID_STATE_CHANGE_RESULT","INVALID_STORAGE_ACCESS_RESULT","AGENT_STATUS","ONLINE","OFFLINE","ACW","CALLBACK_MISSED_OR_REJECTED","PARTICIPANT_TYPE","AGENT","INITIAL_CALLER","THIRD_PARTY","SUPERVISOR","CALL_TYPE","INBOUND","OUTBOUND","CALLBACK","TRANSFER","INTERNAL_CALL","DIALED_CALLBACK","DIALER_TYPE","OUTBOUND_PREVIEW","NONE","CONTACT_TYPE","PHONEBOOK","QUEUE","PHONENUMBER","FLOW","AGENT_CONFIG_TYPE","SHOW_AGENT_SETTINGS","PHONES","SELECTED_PHONE","CAPABILITIES_TYPE","RECORD","MERGE","SWAP","DEBUG_ENABLED","CONTACT_SEARCH","VENDOR_PROVIDED_AVAILABILITY","VENDOR_PROVIDED_QUEUE_WAIT_TIME","SUPERVISOR_LISTEN_IN","MOS","BLIND_TRANSFER","TRANSFER_TO_OMNI_FLOW","PENDING_STATUS_CHANGE","CALL_STATE","RINGING","CONNECTED","TRANSFERRING","TRANSFERRED","ENDED","PHONE_TYPE","DESK_PHONE","SOFT_PHONE","HANGUP_REASON","PHONE_CALL_ERROR","PHONE_CALL_ENDED","AGENT_AVAILABILITY","AVAILABLE","BUSY","REMOVE_PARTICIPANT_VARIANT","ALWAYS","NEVER","ALWAYS_EXCEPT_ON_HOLD","LOG_LEVEL","LOG_SOURCE","SYSTEM","PARTNER","CONTACTS_FILTER_TYPES","CONTACT","DIRECTORY","WORK_EVENT","ASSIGNED","ACCEPTED","DECLINED","COMPLETED","CLOSED","DIAL_OPTIONS","CONNECTOR_CONFIG_EXPOSED_FIELDS","CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH","CONNECTOR_CONFIG_EXCEPTION_FIELDS","_strify","JSON","stringify","LOGS_SIZE","logs","log","logMessage","logLevel","logSource","constants","logStr","Date","toISOString","concat","join","_log","getLogs","parse","downloadLogs","data","fileName","fileType","document","dataStr","file","Blob","createElement","blobURL","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","downloadData","getTime","audioStatus","channelPort","vendorConnector","isSupervisorConnected","Constants","_objectSpread","CustomError","_Error","_ref","_this","labelName","namespace","message","_classCallCheck","_callSuper","Validator","validateString","_inherits","_createClass","Phone","_ref2","number","validateEnum","MuteToggleResult","_ref3","isMuted","ActiveCallsResult","_ref4","_ref4$activeCalls","activeCalls","activeCall","validateClassObject","PhoneCall","CapabilitiesResult","_ref5","_ref5$hasMute","hasMute","_ref5$hasRecord","hasRecord","_ref5$hasMerge","hasMerge","_ref5$hasSwap","hasSwap","_ref5$hasSignedRecord","hasSignedRecordingUrl","_ref5$debugEnabled","debugEnabled","_ref5$hasContactSearc","hasContactSearch","_ref5$hasAgentAvailab","hasAgentAvailability","_ref5$hasQueueWaitTim","hasQueueWaitTime","_ref5$supportsMos","supportsMos","_ref5$hasSupervisorLi","hasSupervisorListenIn","_ref5$hasSupervisorBa","hasSupervisorBargeIn","_ref5$hasBlindTransfe","hasBlindTransfer","_ref5$hasTransferToOm","hasTransferToOmniFlow","_ref5$hasPendingStatu","hasPendingStatusChange","_ref5$hasPhoneBook","hasPhoneBook","validateBoolean","AgentConfigResult","_ref6","_ref6$phones","phones","_ref6$selectedPhone","selectedPhone","Array","AgentConfig","_ref7","RecordingToggleResult","_ref8","isRecordingPaused","_ref8$contactId","contactId","_ref8$initialContactI","initialContactId","_ref8$instanceId","instanceId","_ref8$region","region","ParticipantResult","_ref9","initialCallHasEnded","callInfo","phoneNumber","callId","CallInfo","PhoneContactsResult","_ref10","_ref10$contacts","contacts","_ref10$contactTypes","contactTypes","contact","Contact","filterType","CallResult","_ref11","HangupResult","_ref12","calls","HoldToggleResult","_ref13","isThirdPartyOnHold","isCustomerOnHold","SignedRecordingUrlResult","_ref14","success","url","duration","validateNumber","InitResult","_ref15","_ref15$showLogin","showLogin","_ref15$loginFrameHeig","loginFrameHeight","_ref15$isSilentLogin","isSilentLogin","_ref15$showStorageAcc","showStorageAccess","DialOptions","_ref16","_ref16$isCallback","isCallback","GenericResult","_ref17","LogoutResult","_ref18","_ref18$loginFrameHeig","_ref19","_ref19$callStateTimes","callStateTimestamp","isOnHold","_ref19$isMuted","_ref19$isRecordingPau","initialCallId","_ref19$queueId","queueId","_ref19$queueName","queueName","_ref19$queueTimestamp","queueTimestamp","_ref19$isSoftphoneCal","isSoftphoneCall","_ref19$acceptEnabled","acceptEnabled","_ref19$declineEnabled","declineEnabled","_ref19$muteEnabled","muteEnabled","_ref19$swapEnabled","swapEnabled","_ref19$conferenceEnab","conferenceEnabled","_ref19$holdEnabled","holdEnabled","_ref19$recordEnabled","recordEnabled","_ref19$addCallerEnabl","addCallerEnabled","_ref19$extensionEnabl","extensionEnabled","_ref19$isReplayable","isReplayable","_ref19$isBargeable","isBargeable","isExternalTransfer","_ref19$showMuteButton","showMuteButton","_ref19$showRecordButt","showRecordButton","_ref19$showAddCallerB","showAddCallerButton","_ref19$showAddBlindTr","showAddBlindTransferButton","_ref19$showMergeButto","showMergeButton","_ref19$showSwapButton","showSwapButton","_ref19$removeParticip","removeParticipantVariant","_ref19$additionalFiel","additionalFields","_ref19$isMultiParty","isMultiParty","validateDate","_ref20","id","prefix","extension","endpointARN","queue","availability","recordId","description","queueWaitTime","PhoneCallAttributes","_ref21","voiceCallId","participantType","_ref21$dialerType","dialerType","parentId","_ref21$hasSupervisorB","hasSupervisorBargedIn","_ref22","callType","state","callAttributes","reason","closeCallOnError","agentStatus","TelephonyConnector","dialOptions","digits","filter","call1","call2","parentCall","isBlindTransfer","config","recordingUrl","vendorCallKey","VendorConnector","agentWork","statusInfo","enqueueNextState","logMessageToVendor","payload","workItemId","enumValues","RegExp","test","className","AgentWork","_ref23","workId","workEvent","AgentStatusInfo","_ref24","statusId","statusApiName","statusName","AgentVendorStatusInfo","_ref25","statusType","StateChangeResult","_ref26","newVendorStateInfo","oldVendorStateInfo","SupervisedCallInfo","_ref27","from","to","supervisorName","isBargedIn","AudioStats","_ref28","stats","isAudioStatsCompleted","audioStatsElement","AudioStatsElement","_ref29","inputChannelStats","outputChannelStats","StatsInfo","_ref30","packetsCount","packetsLost","jitterBufferMillis","roundTripTimeMillis","statsCount","SuperviseCallResult","_ref31","SupervisorHangupResult","_HangupResult","_ref32","ShowStorageAccessResult","_ref33","_ref33$success","_ref33$showLogin","_ref33$loginFrameHeig","ContactsFilter","param","_param$contains","contains","_param$limit","limit","_param$offset","offset","_param$types","types","_step","_iterator","_createForOfIteratorHelper","getMOSByStream","streamType","avgStats","getAvgStats","effectiveLatency","R","enableMos","getMOS","inputChannelMOS","ouputChannelMOS","Math","min","initAudioStats","updateAudioStats","statsArray","getErrorType","getErrorMessage","dispatchEventLog","eventType","isError","sanitizedPayload","sanitizePayload","isArray","element","postMessage","dispatchEvent","registerLog","telephonyEventType","telephonyEventPayload","dispatchError","errorType","console","dispatchCustomError","customError","dispatchInfo","setConnectorReady","_setConnectorReady","_asyncToGenerator","_callee","_capabilities","telephonyConnector","agentConfigResult","capabilitiesResult","activeCallsResult","_context","getTelephonyConnector","getAgentConfig","getCapabilities","getActiveCalls","agentConfig","_defineProperty","capabilities","callInProgress","t0","channelMessageHandler","_x","_channelMessageHandler","_callee2","hangupPayload","_telephonyConnector","_payload","_call","_telephonyConnector2","_payload2","_telephonyConnector3","_payload3","_telephonyConnector4","_payload4","_telephonyConnector5","_payload5","_telephonyConnector6","_payload6","_payload7","_payload8","_telephonyConnector7","_payload9","_call2","_telephonyConnector8","_telephonyConnector9","_payload10","_telephonyConnector10","_payload11","_contacts","_telephonyConnector11","_payload12","_telephonyConnector12","_payload13","_telephonyConnector13","_payload14","_telephonyConnector14","_payload15","_telephonyConnector15","_payload16","_payload17","_success","_telephonyConnector17","_activeCallsResult","_activeCalls","_call3","shouldReplay","isSupervisorCall","_telephonyConnector18","result","_message$data","_callId","_telephonyConnector19","_result","signedRecordingUrlResult","_message$data2","_payload18","_telephonyConnector20","_result2","_telephonyConnector21","_result3","_telephonyConnector22","_result4","_message$data$agentWo","_context2","toLowerCase","supervisorDisconnect","acceptCall","t1","messagetype","additionalInfo","declineCall","t2","endCall","t3","mute","publishEvent","t4","unmute","t5","hold","t6","t7","resume","t8","t9","setAgentStatus","t10","t11","getAgentStatus","t12","params","dial","t13","t14","sendDigits","t15","getPhoneContacts","map","t16","t17","swap","callToHold","callToResume","t18","conference","t19","addParticipant","t20","t21","pauseRecording","t22","resumeRecording","t23","logout","t24","handleMessage","wrapUpCall","isAvailable","t25","t26","isReplayedCall","t27","setAgentConfig","t28","getSignedRecordingUrl","t29","superviseCall","t30","t31","supervisorBargeIn","t32","onAgentWorkEvent","windowMessageHandler","_x2","_windowMessageHandler","_callee3","sfDomain","originUrl","_context3","origin","protocol","hostname","ports","onmessage","exposedConnectorConfig","connectorConfig","init","window","removeEventListener","prop","startsWith","includes","validatePayload","payloadType","initializeConnector","connector","addEventListener","publishLog","publishError","_x3","_publishEvent","_callee4","_ref3$registerLog","_initialCallHasEnded","_callInfo","_phoneNumber","_callId2","_telephonyConnector23","transferCall","_isThirdPartyOnHold","_isCustomerOnHold","_calls","_isThirdPartyOnHold2","_isCustomerOnHold2","_callId3","mos","_context4"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,mBAAoB,GAAIH,GACL,iBAAZC,QACdA,QAA0B,iBAAID,IAE9BD,EAAuB,iBAAIC,IAR7B,CASGK,MAAM,WACT,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUP,QAGnC,IAAIC,EAASI,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHT,QAAS,IAUV,OANAU,EAAQH,GAAUI,KAAKV,EAAOD,QAASC,EAAQA,EAAOD,QAASM,GAG/DL,EAAOQ,GAAI,EAGJR,EAAOD,QA0Df,OArDAM,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASd,EAASe,EAAMC,GAC3CV,EAAoBW,EAAEjB,EAASe,IAClCG,OAAOC,eAAenB,EAASe,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAAStB,GACX,oBAAXuB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAenB,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAenB,EAAS,aAAc,CAAEyB,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAShC,GAChC,IAAIe,EAASf,GAAUA,EAAO2B,WAC7B,WAAwB,OAAO3B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAK,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,I,kBClFrD,IAAIC,EAAgB,EAAQ,GAC5B,SAASC,EAAkBC,EAAQC,GACjC,IAAK,IAAInC,EAAI,EAAGA,EAAImC,EAAMC,OAAQpC,IAAK,CACrC,IAAIqC,EAAaF,EAAMnC,GACvBqC,EAAWzB,WAAayB,EAAWzB,aAAc,EACjDyB,EAAWC,cAAe,EACtB,UAAWD,IAAYA,EAAWE,UAAW,GACjD7B,OAAOC,eAAeuB,EAAQF,EAAcK,EAAWd,KAAMc,IAWjE5C,EAAOD,QARP,SAAsBgD,EAAaC,EAAYC,GAM7C,OALID,GAAYR,EAAkBO,EAAYZ,UAAWa,GACrDC,GAAaT,EAAkBO,EAAaE,GAChDhC,OAAOC,eAAe6B,EAAa,YAAa,CAC9CD,UAAU,IAELC,GAEsB/C,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,S,cCbpGC,EAAOD,QALP,SAAyBmD,EAAUH,GACjC,KAAMG,aAAoBH,GACxB,MAAM,IAAII,UAAU,sCAGUnD,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,S,gBCLvG,IAAIwC,EAAgB,EAAQ,GAe5BvC,EAAOD,QAdP,SAAyBqD,EAAKtB,EAAKN,GAYjC,OAXAM,EAAMS,EAAcT,MACTsB,EACTnC,OAAOC,eAAekC,EAAKtB,EAAK,CAC9BN,MAAOA,EACPL,YAAY,EACZ0B,cAAc,EACdC,UAAU,IAGZM,EAAItB,GAAON,EAEN4B,GAEyBpD,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,S,cCfvG,SAASsD,EAAQrC,GAGf,OAAQhB,EAAOD,QAAUsD,EAAU,mBAAqB/B,QAAU,iBAAmBA,OAAOgC,SAAW,SAAUtC,GAC/G,cAAcA,GACZ,SAAUA,GACZ,OAAOA,GAAK,mBAAqBM,QAAUN,EAAEuC,cAAgBjC,QAAUN,IAAMM,OAAOa,UAAY,gBAAkBnB,GACjHhB,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,QAAUsD,EAAQrC,GAE5FhB,EAAOD,QAAUsD,EAASrD,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,S,gBCP/F,IAAIyD,EAAU,EAAQ,GAAR,GACdxD,EAAOD,QAAUyD,EAGjB,IACEC,mBAAqBD,EACrB,MAAOE,GACmB,iBAAfC,WACTA,WAAWF,mBAAqBD,EAEhCI,SAAS,IAAK,yBAAdA,CAAwCJ,K,cCZ5C,SAASK,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQpC,EAAKqC,GACpE,IACE,IAAIC,EAAON,EAAIhC,GAAKqC,GAChB3C,EAAQ4C,EAAK5C,MACjB,MAAO6C,GAEP,YADAL,EAAOK,GAGLD,EAAKE,KACPP,EAAQvC,GAER+C,QAAQR,QAAQvC,GAAOgD,KAAKP,EAAOC,GAmBvClE,EAAOD,QAhBP,SAA2B0E,GACzB,OAAO,WACL,IAAIC,EAAOvE,KACTwE,EAAOC,UACT,OAAO,IAAIL,SAAQ,SAAUR,EAASC,GACpC,IAAIF,EAAMW,EAAGI,MAAMH,EAAMC,GACzB,SAASV,EAAMzC,GACbqC,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQ1C,GAElE,SAAS0C,EAAOY,GACdjB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASY,GAEnEb,OAAMc,QAIwB/E,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,S,cC9BzG,SAASiF,EAAgBhE,GAIvB,OAHAhB,EAAOD,QAAUiF,EAAkB/D,OAAOgE,eAAiBhE,OAAOiE,eAAenD,OAAS,SAAyBf,GACjH,OAAOA,EAAEmE,WAAalE,OAAOiE,eAAelE,IAC3ChB,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,QACjEiF,EAAgBhE,GAEzBhB,EAAOD,QAAUiF,EAAiBhF,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,S,cCNvG,SAASqF,EAAgBpE,EAAGqB,GAK1B,OAJArC,EAAOD,QAAUqF,EAAkBnE,OAAOgE,eAAiBhE,OAAOgE,eAAelD,OAAS,SAAyBf,EAAGqB,GAEpH,OADArB,EAAEmE,UAAY9C,EACPrB,GACNhB,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,QACjEqF,EAAgBpE,EAAGqB,GAE5BrC,EAAOD,QAAUqF,EAAiBpF,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,S,gBCPvG,IAAIkF,EAAiB,EAAQ,GAiB7BjF,EAAOD,QAhBP,SAAmBsF,EAAUC,GAC3B,GAA0B,mBAAfA,GAA4C,OAAfA,EACtC,MAAM,IAAInC,UAAU,sDAEtBkC,EAASlD,UAAYlB,OAAOY,OAAOyD,GAAcA,EAAWnD,UAAW,CACrEoB,YAAa,CACX/B,MAAO6D,EACPvC,UAAU,EACVD,cAAc,KAGlB5B,OAAOC,eAAemE,EAAU,YAAa,CAC3CvC,UAAU,IAERwC,GAAYL,EAAeI,EAAUC,IAEftF,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,S,gBCjBjG,IAAIsD,EAAU,EAAQ,GAAwB,QAC1CkC,EAAc,EAAQ,IAK1BvF,EAAOD,QAJP,SAAuB0B,GACrB,IAAIlB,EAAIgF,EAAY9D,EAAG,UACvB,MAAO,UAAY4B,EAAQ9C,GAAKA,EAAIiF,OAAOjF,IAEbP,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,S,gBCNrG,IAAIsD,EAAU,EAAQ,GAAwB,QAC1CoC,EAAwB,EAAQ,IASpCzF,EAAOD,QARP,SAAoC2E,EAAMhE,GACxC,GAAIA,IAA2B,WAAlB2C,EAAQ3C,IAAsC,mBAATA,GAChD,OAAOA,EACF,QAAa,IAATA,EACT,MAAM,IAAIyC,UAAU,4DAEtB,OAAOsC,EAAsBf,IAEc1E,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,S,gBCVlH,IAAImF,EAAiB,EAAQ,GACzBD,EAAiB,EAAQ,GACzBS,EAAmB,EAAQ,IAC3BC,EAAY,EAAQ,IACxB,SAASC,EAAiBC,GACxB,IAAIC,EAAwB,mBAARC,IAAqB,IAAIA,SAAQhB,EAuBrD,OAtBA/E,EAAOD,QAAU6F,EAAmB,SAA0BC,GAC5D,GAAc,OAAVA,IAAmBH,EAAiBG,GAAQ,OAAOA,EACvD,GAAqB,mBAAVA,EACT,MAAM,IAAI1C,UAAU,sDAEtB,QAAsB,IAAX2C,EAAwB,CACjC,GAAIA,EAAOE,IAAIH,GAAQ,OAAOC,EAAO1E,IAAIyE,GACzCC,EAAOG,IAAIJ,EAAOK,GAEpB,SAASA,IACP,OAAOP,EAAUE,EAAOjB,UAAWM,EAAe/E,MAAMoD,aAU1D,OARA2C,EAAQ/D,UAAYlB,OAAOY,OAAOgE,EAAM1D,UAAW,CACjDoB,YAAa,CACX/B,MAAO0E,EACP/E,YAAY,EACZ2B,UAAU,EACVD,cAAc,KAGXoC,EAAeiB,EAASL,IAC9B7F,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,QACjE6F,EAAiBC,GAE1B7F,EAAOD,QAAU6F,EAAkB5F,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,S,gBC9BxG,IAAIsD,EAAU,EAAQ,GAAwB,QAW9CrD,EAAOD,QAVP,SAAqB0B,EAAGJ,GACtB,GAAI,UAAYgC,EAAQ5B,KAAOA,EAAG,OAAOA,EACzC,IAAI0E,EAAI1E,EAAEH,OAAOiE,aACjB,QAAI,IAAWY,EAAG,CAChB,IAAI5F,EAAI4F,EAAEzF,KAAKe,EAAGJ,GAAK,WACvB,GAAI,UAAYgC,EAAQ9C,GAAI,OAAOA,EACnC,MAAM,IAAI4C,UAAU,gDAEtB,OAAQ,WAAa9B,EAAImE,OAASY,QAAQ3E,IAEdzB,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,S,gBCXnG,IAAIsD,EAAU,EAAQ,GAAwB,QAC9C,SAASgD,IACP,iKACArG,EAAOD,QAAUsG,EAAsB,WACrC,OAAOF,GACNnG,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,QACxE,IAAI0B,EACF0E,EAAI,GACJ9E,EAAIJ,OAAOkB,UACXH,EAAIX,EAAEe,eACNpB,EAAIC,OAAOC,gBAAkB,SAAUO,EAAG0E,EAAG9E,GAC3CI,EAAE0E,GAAK9E,EAAEG,OAEXjB,EAAI,mBAAqBe,OAASA,OAAS,GAC3CgF,EAAI/F,EAAE+C,UAAY,aAClB1C,EAAIL,EAAEgG,eAAiB,kBACvBC,EAAIjG,EAAEgB,aAAe,gBACvB,SAAStB,EAAOwB,EAAG0E,EAAG9E,GACpB,OAAOJ,OAAOC,eAAeO,EAAG0E,EAAG,CACjC3E,MAAOH,EACPF,YAAY,EACZ0B,cAAc,EACdC,UAAU,IACRrB,EAAE0E,GAER,IACElG,EAAO,GAAI,IACX,MAAOwB,GACPxB,EAAS,SAAgBwB,EAAG0E,EAAG9E,GAC7B,OAAOI,EAAE0E,GAAK9E,GAGlB,SAASoF,EAAKhF,EAAG0E,EAAG9E,EAAGW,GACrB,IAAIzB,EAAI4F,GAAKA,EAAEhE,qBAAqBuE,EAAYP,EAAIO,EAClDJ,EAAIrF,OAAOY,OAAOtB,EAAE4B,WACpBvB,EAAI,IAAI+F,EAAQ3E,GAAK,IACvB,OAAOhB,EAAEsF,EAAG,UAAW,CACrB9E,MAAOoF,EAAiBnF,EAAGJ,EAAGT,KAC5B0F,EAEN,SAASO,EAASpF,EAAG0E,EAAG9E,GACtB,IACE,MAAO,CACLyF,KAAM,SACN3C,IAAK1C,EAAEf,KAAKyF,EAAG9E,IAEjB,MAAOI,GACP,MAAO,CACLqF,KAAM,QACN3C,IAAK1C,IAIX0E,EAAEM,KAAOA,EACT,IAAIM,EAAI,iBAENC,EAAI,YACJ1E,EAAI,YACJ2E,EAAI,GACN,SAASP,KACT,SAASQ,KACT,SAASC,KACT,IAAI9E,EAAI,GACRpC,EAAOoC,EAAGiE,GAAG,WACX,OAAOnG,QAET,IAAIU,EAAII,OAAOiE,eACbkC,EAAIvG,GAAKA,EAAEA,EAAEwG,EAAO,MACtBD,GAAKA,IAAM/F,GAAKW,EAAEtB,KAAK0G,EAAGd,KAAOjE,EAAI+E,GACrC,IAAIE,EAAIH,EAA2BhF,UAAYuE,EAAUvE,UAAYlB,OAAOY,OAAOQ,GACnF,SAASkF,EAAsB9F,GAC7B,CAAC,OAAQ,QAAS,UAAU+F,SAAQ,SAAUrB,GAC5ClG,EAAOwB,EAAG0E,GAAG,SAAU1E,GACrB,OAAOtB,KAAKsH,QAAQtB,EAAG1E,SAI7B,SAASiG,EAAcjG,EAAG0E,GACxB,SAASwB,EAAOtG,EAAGL,EAAGT,EAAG+F,GACvB,IAAI1F,EAAIiG,EAASpF,EAAEJ,GAAII,EAAGT,GAC1B,GAAI,UAAYJ,EAAEkG,KAAM,CACtB,IAAIN,EAAI5F,EAAEuD,IACR4C,EAAIP,EAAEhF,MACR,OAAOuF,GAAK,UAAY1D,EAAQ0D,IAAM/E,EAAEtB,KAAKqG,EAAG,WAAaZ,EAAEpC,QAAQgD,EAAEa,SAASpD,MAAK,SAAU/C,GAC/FkG,EAAO,OAAQlG,EAAGlB,EAAG+F,MACpB,SAAU7E,GACXkG,EAAO,QAASlG,EAAGlB,EAAG+F,MACnBH,EAAEpC,QAAQgD,GAAGvC,MAAK,SAAU/C,GAC/B+E,EAAEhF,MAAQC,EAAGlB,EAAEiG,MACd,SAAU/E,GACX,OAAOkG,EAAO,QAASlG,EAAGlB,EAAG+F,MAGjCA,EAAE1F,EAAEuD,KAEN,IAAI9C,EACJL,EAAEb,KAAM,UAAW,CACjBqB,MAAO,SAAeC,EAAGO,GACvB,SAAS6F,IACP,OAAO,IAAI1B,GAAE,SAAUA,EAAG9E,GACxBsG,EAAOlG,EAAGO,EAAGmE,EAAG9E,MAGpB,OAAOA,EAAIA,EAAIA,EAAEmD,KAAKqD,EAA4BA,GAA8BA,OAItF,SAASjB,EAAiBT,EAAG9E,EAAGW,GAC9B,IAAIhB,EAAI+F,EACR,OAAO,SAAUxG,EAAG+F,GAClB,GAAItF,IAAMgG,EAAG,MAAM,IAAIc,MAAM,gCAC7B,GAAI9G,IAAMsB,EAAG,CACX,GAAI,UAAY/B,EAAG,MAAM+F,EACzB,MAAO,CACL9E,MAAOC,EACP6C,MAAM,GAGV,IAAKtC,EAAE+F,OAASxH,EAAGyB,EAAEmC,IAAMmC,IAAK,CAC9B,IAAI1F,EAAIoB,EAAEgG,SACV,GAAIpH,EAAG,CACL,IAAI4F,EAAIyB,EAAoBrH,EAAGoB,GAC/B,GAAIwE,EAAG,CACL,GAAIA,IAAMS,EAAG,SACb,OAAOT,GAGX,GAAI,SAAWxE,EAAE+F,OAAQ/F,EAAEkG,KAAOlG,EAAEmG,MAAQnG,EAAEmC,SAAS,GAAI,UAAYnC,EAAE+F,OAAQ,CAC/E,GAAI/G,IAAM+F,EAAG,MAAM/F,EAAIsB,EAAGN,EAAEmC,IAC5BnC,EAAEoG,kBAAkBpG,EAAEmC,SACjB,WAAanC,EAAE+F,QAAU/F,EAAEqG,OAAO,SAAUrG,EAAEmC,KACrDnD,EAAIgG,EACJ,IAAI3E,EAAIwE,EAASV,EAAG9E,EAAGW,GACvB,GAAI,WAAaK,EAAEyE,KAAM,CACvB,GAAI9F,EAAIgB,EAAEsC,KAAOhC,EA/EnB,iBA+E0BD,EAAE8B,MAAQ8C,EAAG,SACrC,MAAO,CACLzF,MAAOa,EAAE8B,IACTG,KAAMtC,EAAEsC,MAGZ,UAAYjC,EAAEyE,OAAS9F,EAAIsB,EAAGN,EAAE+F,OAAS,QAAS/F,EAAEmC,IAAM9B,EAAE8B,OAIlE,SAAS8D,EAAoB9B,EAAG9E,GAC9B,IAAIW,EAAIX,EAAE0G,OACR/G,EAAImF,EAAE7C,SAAStB,GACjB,GAAIhB,IAAMS,EAAG,OAAOJ,EAAE2G,SAAW,KAAM,UAAYhG,GAAKmE,EAAE7C,SAAiB,SAAMjC,EAAE0G,OAAS,SAAU1G,EAAE8C,IAAM1C,EAAGwG,EAAoB9B,EAAG9E,GAAI,UAAYA,EAAE0G,SAAW,WAAa/F,IAAMX,EAAE0G,OAAS,QAAS1G,EAAE8C,IAAM,IAAIhB,UAAU,oCAAsCnB,EAAI,aAAciF,EAC1R,IAAI1G,EAAIsG,EAAS7F,EAAGmF,EAAE7C,SAAUjC,EAAE8C,KAClC,GAAI,UAAY5D,EAAEuG,KAAM,OAAOzF,EAAE0G,OAAS,QAAS1G,EAAE8C,IAAM5D,EAAE4D,IAAK9C,EAAE2G,SAAW,KAAMf,EACrF,IAAIX,EAAI/F,EAAE4D,IACV,OAAOmC,EAAIA,EAAEhC,MAAQjD,EAAE8E,EAAEmC,YAAchC,EAAE9E,MAAOH,EAAEkH,KAAOpC,EAAEqC,QAAS,WAAanH,EAAE0G,SAAW1G,EAAE0G,OAAS,OAAQ1G,EAAE8C,IAAM1C,GAAIJ,EAAE2G,SAAW,KAAMf,GAAKX,GAAKjF,EAAE0G,OAAS,QAAS1G,EAAE8C,IAAM,IAAIhB,UAAU,oCAAqC9B,EAAE2G,SAAW,KAAMf,GAE9P,SAASwB,EAAahH,GACpB,IAAI0E,EAAI,CACNuC,OAAQjH,EAAE,IAEZ,KAAKA,IAAM0E,EAAEwC,SAAWlH,EAAE,IAAK,KAAKA,IAAM0E,EAAEyC,WAAanH,EAAE,GAAI0E,EAAE0C,SAAWpH,EAAE,IAAKtB,KAAK2I,WAAWC,KAAK5C,GAE1G,SAAS6C,EAAcvH,GACrB,IAAI0E,EAAI1E,EAAEwH,YAAc,GACxB9C,EAAEW,KAAO,gBAAiBX,EAAEhC,IAAK1C,EAAEwH,WAAa9C,EAElD,SAASQ,EAAQlF,GACftB,KAAK2I,WAAa,CAAC,CACjBJ,OAAQ,SACNjH,EAAE+F,QAAQiB,EAActI,MAAOA,KAAK+I,OAAM,GAEhD,SAAS7B,EAAOlB,GACd,GAAIA,GAAK,KAAOA,EAAG,CACjB,IAAI9E,EAAI8E,EAAEG,GACV,GAAIjF,EAAG,OAAOA,EAAEX,KAAKyF,GACrB,GAAI,mBAAqBA,EAAEoC,KAAM,OAAOpC,EACxC,IAAKgD,MAAMhD,EAAExD,QAAS,CACpB,IAAI3B,GAAK,EACPT,EAAI,SAASgI,IACX,OAASvH,EAAImF,EAAExD,QAAS,GAAIX,EAAEtB,KAAKyF,EAAGnF,GAAI,OAAOuH,EAAK/G,MAAQ2E,EAAEnF,GAAIuH,EAAKjE,MAAO,EAAIiE,EACpF,OAAOA,EAAK/G,MAAQC,EAAG8G,EAAKjE,MAAO,EAAIiE,GAE3C,OAAOhI,EAAEgI,KAAOhI,GAGpB,MAAM,IAAI4C,UAAUE,EAAQ8C,GAAK,oBAEnC,OAAOe,EAAkB/E,UAAYgF,EAA4BnG,EAAEsG,EAAG,cAAe,CACnF9F,MAAO2F,EACPtE,cAAc,IACZ7B,EAAEmG,EAA4B,cAAe,CAC/C3F,MAAO0F,EACPrE,cAAc,IACZqE,EAAkBkC,YAAcnJ,EAAOkH,EAA4BX,EAAG,qBAAsBL,EAAEkD,oBAAsB,SAAU5H,GAChI,IAAI0E,EAAI,mBAAqB1E,GAAKA,EAAE8B,YACpC,QAAS4C,IAAMA,IAAMe,GAAqB,uBAAyBf,EAAEiD,aAAejD,EAAErF,QACrFqF,EAAEmD,KAAO,SAAU7H,GACpB,OAAOR,OAAOgE,eAAiBhE,OAAOgE,eAAexD,EAAG0F,IAA+B1F,EAAE0D,UAAYgC,EAA4BlH,EAAOwB,EAAG+E,EAAG,sBAAuB/E,EAAEU,UAAYlB,OAAOY,OAAOyF,GAAI7F,GACpM0E,EAAEoD,MAAQ,SAAU9H,GACrB,MAAO,CACLmG,QAASnG,IAEV8F,EAAsBG,EAAcvF,WAAYlC,EAAOyH,EAAcvF,UAAWvB,GAAG,WACpF,OAAOT,QACLgG,EAAEuB,cAAgBA,EAAevB,EAAEqD,MAAQ,SAAU/H,EAAGJ,EAAGW,EAAGhB,EAAGT,QACnE,IAAWA,IAAMA,EAAIgE,SACrB,IAAI+B,EAAI,IAAIoB,EAAcjB,EAAKhF,EAAGJ,EAAGW,EAAGhB,GAAIT,GAC5C,OAAO4F,EAAEkD,oBAAoBhI,GAAKiF,EAAIA,EAAEiC,OAAO/D,MAAK,SAAU/C,GAC5D,OAAOA,EAAE6C,KAAO7C,EAAED,MAAQ8E,EAAEiC,WAE7BhB,EAAsBD,GAAIrH,EAAOqH,EAAGd,EAAG,aAAcvG,EAAOqH,EAAGhB,GAAG,WACnE,OAAOnG,QACLF,EAAOqH,EAAG,YAAY,WACxB,MAAO,wBACLnB,EAAEsD,KAAO,SAAUhI,GACrB,IAAI0E,EAAIlF,OAAOQ,GACbJ,EAAI,GACN,IAAK,IAAIW,KAAKmE,EAAG9E,EAAE0H,KAAK/G,GACxB,OAAOX,EAAEqI,UAAW,SAASnB,IAC3B,KAAOlH,EAAEsB,QAAS,CAChB,IAAIlB,EAAIJ,EAAEsI,MACV,GAAIlI,KAAK0E,EAAG,OAAOoC,EAAK/G,MAAQC,EAAG8G,EAAKjE,MAAO,EAAIiE,EAErD,OAAOA,EAAKjE,MAAO,EAAIiE,IAExBpC,EAAEkB,OAASA,EAAQV,EAAQxE,UAAY,CACxCoB,YAAaoD,EACbuC,MAAO,SAAe/C,GACpB,GAAIhG,KAAKyJ,KAAO,EAAGzJ,KAAKoI,KAAO,EAAGpI,KAAK+H,KAAO/H,KAAKgI,MAAQ1G,EAAGtB,KAAKmE,MAAO,EAAInE,KAAK6H,SAAW,KAAM7H,KAAK4H,OAAS,OAAQ5H,KAAKgE,IAAM1C,EAAGtB,KAAK2I,WAAWtB,QAAQwB,IAAiB7C,EAAG,IAAK,IAAI9E,KAAKlB,KAAM,MAAQkB,EAAEwI,OAAO,IAAM7H,EAAEtB,KAAKP,KAAMkB,KAAO8H,OAAO9H,EAAEyI,MAAM,MAAQ3J,KAAKkB,GAAKI,IAEtRsI,KAAM,WACJ5J,KAAKmE,MAAO,EACZ,IAAI7C,EAAItB,KAAK2I,WAAW,GAAGG,WAC3B,GAAI,UAAYxH,EAAEqF,KAAM,MAAMrF,EAAE0C,IAChC,OAAOhE,KAAK6J,MAEd5B,kBAAmB,SAA2BjC,GAC5C,GAAIhG,KAAKmE,KAAM,MAAM6B,EACrB,IAAI9E,EAAIlB,KACR,SAAS8J,EAAOjI,EAAGhB,GACjB,OAAOsF,EAAEQ,KAAO,QAASR,EAAEnC,IAAMgC,EAAG9E,EAAEkH,KAAOvG,EAAGhB,IAAMK,EAAE0G,OAAS,OAAQ1G,EAAE8C,IAAM1C,KAAMT,EAEzF,IAAK,IAAIA,EAAIb,KAAK2I,WAAWnG,OAAS,EAAG3B,GAAK,IAAKA,EAAG,CACpD,IAAIT,EAAIJ,KAAK2I,WAAW9H,GACtBsF,EAAI/F,EAAE0I,WACR,GAAI,SAAW1I,EAAEmI,OAAQ,OAAOuB,EAAO,OACvC,GAAI1J,EAAEmI,QAAUvI,KAAKyJ,KAAM,CACzB,IAAIhJ,EAAIoB,EAAEtB,KAAKH,EAAG,YAChBiG,EAAIxE,EAAEtB,KAAKH,EAAG,cAChB,GAAIK,GAAK4F,EAAG,CACV,GAAIrG,KAAKyJ,KAAOrJ,EAAEoI,SAAU,OAAOsB,EAAO1J,EAAEoI,UAAU,GACtD,GAAIxI,KAAKyJ,KAAOrJ,EAAEqI,WAAY,OAAOqB,EAAO1J,EAAEqI,iBACzC,GAAIhI,GACT,GAAIT,KAAKyJ,KAAOrJ,EAAEoI,SAAU,OAAOsB,EAAO1J,EAAEoI,UAAU,OACjD,CACL,IAAKnC,EAAG,MAAM,IAAIsB,MAAM,0CACxB,GAAI3H,KAAKyJ,KAAOrJ,EAAEqI,WAAY,OAAOqB,EAAO1J,EAAEqI,gBAKtDP,OAAQ,SAAgB5G,EAAG0E,GACzB,IAAK,IAAI9E,EAAIlB,KAAK2I,WAAWnG,OAAS,EAAGtB,GAAK,IAAKA,EAAG,CACpD,IAAIL,EAAIb,KAAK2I,WAAWzH,GACxB,GAAIL,EAAE0H,QAAUvI,KAAKyJ,MAAQ5H,EAAEtB,KAAKM,EAAG,eAAiBb,KAAKyJ,KAAO5I,EAAE4H,WAAY,CAChF,IAAIrI,EAAIS,EACR,OAGJT,IAAM,UAAYkB,GAAK,aAAeA,IAAMlB,EAAEmI,QAAUvC,GAAKA,GAAK5F,EAAEqI,aAAerI,EAAI,MACvF,IAAI+F,EAAI/F,EAAIA,EAAE0I,WAAa,GAC3B,OAAO3C,EAAEQ,KAAOrF,EAAG6E,EAAEnC,IAAMgC,EAAG5F,GAAKJ,KAAK4H,OAAS,OAAQ5H,KAAKoI,KAAOhI,EAAEqI,WAAY3B,GAAK9G,KAAK+J,SAAS5D,IAExG4D,SAAU,SAAkBzI,EAAG0E,GAC7B,GAAI,UAAY1E,EAAEqF,KAAM,MAAMrF,EAAE0C,IAChC,MAAO,UAAY1C,EAAEqF,MAAQ,aAAerF,EAAEqF,KAAO3G,KAAKoI,KAAO9G,EAAE0C,IAAM,WAAa1C,EAAEqF,MAAQ3G,KAAK6J,KAAO7J,KAAKgE,IAAM1C,EAAE0C,IAAKhE,KAAK4H,OAAS,SAAU5H,KAAKoI,KAAO,OAAS,WAAa9G,EAAEqF,MAAQX,IAAMhG,KAAKoI,KAAOpC,GAAIc,GAE1NkD,OAAQ,SAAgB1I,GACtB,IAAK,IAAI0E,EAAIhG,KAAK2I,WAAWnG,OAAS,EAAGwD,GAAK,IAAKA,EAAG,CACpD,IAAI9E,EAAIlB,KAAK2I,WAAW3C,GACxB,GAAI9E,EAAEuH,aAAenH,EAAG,OAAOtB,KAAK+J,SAAS7I,EAAE4H,WAAY5H,EAAEwH,UAAWG,EAAc3H,GAAI4F,IAG9F,MAAS,SAAgBxF,GACvB,IAAK,IAAI0E,EAAIhG,KAAK2I,WAAWnG,OAAS,EAAGwD,GAAK,IAAKA,EAAG,CACpD,IAAI9E,EAAIlB,KAAK2I,WAAW3C,GACxB,GAAI9E,EAAEqH,SAAWjH,EAAG,CAClB,IAAIO,EAAIX,EAAE4H,WACV,GAAI,UAAYjH,EAAE8E,KAAM,CACtB,IAAI9F,EAAIgB,EAAEmC,IACV6E,EAAc3H,GAEhB,OAAOL,GAGX,MAAM,IAAI8G,MAAM,0BAElBsC,cAAe,SAAuBjE,EAAG9E,EAAGW,GAC1C,OAAO7B,KAAK6H,SAAW,CACrB1E,SAAU+D,EAAOlB,GACjBmC,WAAYjH,EACZmH,QAASxG,GACR,SAAW7B,KAAK4H,SAAW5H,KAAKgE,IAAM1C,GAAIwF,IAE9Cd,EAELnG,EAAOD,QAAUsG,EAAqBrG,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,S,cCzS3GC,EAAOD,QANP,SAAgC2E,GAC9B,QAAa,IAATA,EACF,MAAM,IAAI2F,eAAe,6DAE3B,OAAO3F,GAEgC1E,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,S,cCC9GC,EAAOD,QAPP,SAA2B0E,GACzB,IACE,OAAgE,IAAzDb,SAAS0G,SAAS5J,KAAK+D,GAAI8F,QAAQ,iBAC1C,MAAOpE,GACP,MAAqB,mBAAP1B,IAGkBzE,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,S,gBCPzG,IAAIkF,EAAiB,EAAQ,GACzBuF,EAA2B,EAAQ,IAQvCxK,EAAOD,QAPP,SAAoB0B,EAAG0E,EAAG9E,GACxB,GAAImJ,IAA4B,OAAOC,QAAQ9E,UAAUd,MAAM,KAAMD,WACrE,IAAI5D,EAAI,CAAC,MACTA,EAAE+H,KAAKlE,MAAM7D,EAAGmF,GAChB,IAAI9D,EAAI,IAAKZ,EAAEM,KAAK8C,MAAMpD,EAAGT,IAC7B,OAAOK,GAAK4D,EAAe5C,EAAGhB,EAAEc,WAAYE,GAEjBrC,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,S,cCTlG,SAAS2K,IACP,IACE,IAAIjJ,GAAKkJ,QAAQxI,UAAUyI,QAAQlK,KAAK+J,QAAQ9E,UAAUgF,QAAS,IAAI,gBACvE,MAAOlJ,IACT,OAAQzB,EAAOD,QAAU2K,EAA4B,WACnD,QAASjJ,GACRzB,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,WAE1EC,EAAOD,QAAU2K,EAA2B1K,EAAOD,QAAQ4B,YAAa,EAAM3B,EAAOD,QAAiB,QAAIC,EAAOD,S,kkECDlG,GACX8K,aAAc,CAEVC,gBAAiB,kBACjBC,gBAAiB,kBACjBC,IAAK,MACLC,2BAA4B,6BAC5BC,iBAAkB,mBAClBC,iBAAkB,mBAClBC,OAAQ,SACRC,QAAS,UACTC,qBAAsB,uBACtBC,iBAAkB,mBAClBC,aAAc,eAGdC,MAAO,CACHC,YAAa,cACbC,aAAc,eACdC,SAAU,WACVC,KAAM,OACNC,OAAQ,SACRC,KAAM,OACNC,OAAQ,SACRC,KAAM,OACNC,YAAa,cACbC,mBAAoB,qBACpBC,kBAAmB,oBACnBC,gBAAiB,kBACjBC,WAAY,aACZC,gBAAiB,kBACjBC,iBAAkB,mBAClBC,eAAgB,iBAChBC,oBAAsB,sBACtBC,sBAAuB,wBACvBC,iBAAkB,mBAClBC,yBAA0B,2BAC1BC,aAAc,eACdC,gBAAiB,oBAGzBC,WAAY,CACRC,MAAO,QACPC,QAAS,UACTC,KAAM,OACNC,cAAe,gBACfC,aAAc,eACdC,cAAe,gBACfC,WAAY,aACZC,wBAAyB,0BACzBC,wBAAyB,0BACzBpC,QAAS,UACTH,iBAAkB,mBAClBC,iBAAkB,mBAClBuC,aAAc,eACdC,kBAAmB,oBACnBC,oBAAqB,sBACrBC,sBAAuB,wBACvBC,oBAAqB,sBACrBrC,MAAO,CACHsC,oBAAqB,sBACrBC,aAAc,eACdC,eAAgB,iBAChBC,YAAa,cACbC,YAAa,cACbC,YAAa,cACbC,eAAgB,iBAChBC,kBAAmB,oBACnBC,sBAAuB,wBACvBC,oBAAqB,sBACrBC,iBAAkB,mBAClBC,qBAAsB,uBACtBC,yBAA0B,2BAC1BC,qBAAsB,uBACtBC,mBAAoB,qBACpBC,6BAA8B,+BAC9BC,qBAAsB,uBACtBC,wBAA0B,0BAC1BC,0BAA2B,4BAC3BC,kBAAoB,oBACpBC,eAAiB,iBACjBC,cAAe,gBACfC,wBAAyB,0BACzBC,qBAAsB,uBACtBC,YAAa,cACbC,OAAQ,SACRC,gBAAiB,kBACjBC,mBAAoB,uBAG5BC,UAAW,CACPlE,MAAO,CACHmE,wBAAyB,4BAGjCC,WAAY,CACRpE,MAAO,CACHqE,yBAA0B,2BAC1BC,qBAAsB,uBACtBC,kBAAmB,oBACnBC,oBAAqB,sBACrBC,kBAAmB,oBACnBC,oBAAqB,sBACrBC,oBAAqB,sBACrBC,oBAAqB,sBACrBC,sBAAuB,wBACvBC,oBAAqB,sBACrBC,eAAgB,iBAChBC,2BAA4B,6BAC5BC,0BAA2B,4BAC3BC,mBAAoB,qBACpBC,oBAAqB,sBACrBC,qBAAsB,uBACtBC,2BAA4B,6BAC5BC,wBAAyB,0BACzBC,4BAA6B,8BAC7BC,uBAAwB,yBACxBC,wBAAyB,0BACzBC,yBAA0B,2BAC1BC,yBAA0B,2BAC1BC,yBAA0B,2BAC1BC,4BAA6B,8BAC7BC,iCAAkC,mCAClCC,uBAAyB,yBACzBC,8BAAgC,gCAChCC,4BAA6B,8BAC7BC,sBAAuB,wBACvBpC,YAAa,cACbqC,sBAAuB,wBACvBC,oBAAqB,uBAEzBC,aAAc,eACdC,cAAe,gBACfC,qBAAsB,uBACtBC,qBAAsB,uBACtBC,yBAA0B,2BAC1BC,yBAA0B,2BAC1BC,eAAgB,iBAChBC,eAAgB,iBAChBC,gBAAiB,kBACjBC,4BAA6B,8BAC7BC,8BAA+B,iCAEnCC,aAAc,CACVC,OAAQ,SACRC,QAAS,UACTC,IAAM,gBACNC,4BAA6B,4BAEjCC,iBAAkB,CACdC,MAAO,QACPC,eAAgB,iBAChBC,YAAa,cACbC,WAAY,cAEhBC,UAAW,CACPC,QAAS,UACTC,SAAU,WACVC,SAAU,WACVjH,gBAAiB,iBACjBkH,SAAS,WACTC,cAAe,eACfC,gBAAiB,kBAErBC,YAAa,CACTC,iBAAkB,kBAClBC,KAAM,QAEVC,aAAc,CACVC,UAAW,YACXC,MAAO,QACPC,YAAa,cACbjB,MAAO,QACPkB,KAAM,QAEVC,kBAAmB,CACfC,oBAAqB,sBACrBC,OAAQ,SACRC,eAAgB,kBAEpBC,kBAAmB,CACfzI,KAAM,OACN0I,OAAQ,SACRC,MAAO,QACPC,KAAM,OACN7F,qBAAsB,uBACtB8F,cAAe,gBACfC,eAAgB,iBAChBC,6BAA8B,+BAC9BC,gCAAiC,kCACjCC,qBAAsB,uBACtBpI,oBAAqB,sBACrBqI,IAAK,MACLC,eAAgB,iBAChBC,sBAAuB,wBACvBC,sBAAuB,wBACvBpB,UAAW,aAEfqB,WAAY,CACRC,QAAS,UACTC,UAAW,YACXC,aAAc,eACdC,YAAa,cACbC,MAAO,SAEXC,WAAY,CACRC,WAAY,aACZC,WAAY,cAEhBC,cAAe,CACXC,iBAAkB,QAClBC,iBAAkB,SAEtBC,mBAAoB,CAChBC,UAAW,YACXC,KAAM,OACNtD,QAAS,WAEbuD,2BAA4B,CACxBC,OAAS,SACTC,MAAO,QACPC,sBAAuB,yBAE3BC,UAAW,CACPrJ,MAAO,QACPE,KAAM,QAEVoJ,WAAY,CACRC,OAAQ,SACRC,QAAS,WAEbC,sBAAuB,CACnB3D,MAAO,QACPgB,MAAO,QACP4C,QAAS,UACTC,UAAW,YACX3C,KAAM,OACN+B,UAAW,aAEfa,WAAY,CACRC,SAAU,WACVC,SAAU,WACVC,SAAU,WACVC,UAAW,YACXC,OAAQ,UAEZC,aAAc,CACV7D,SAAU,oBAOL8D,EAAkC,CAC3C,qBACA,gCACA,uCACA,eACA,eACA,gBACA,wBACA,iCAMSC,EAA6C,CACtD,YAMSC,EAAoC,CAC7C,+C,kGChRJ,IAEMC,EAAU,SAAAnU,GAAG,MAAoB,iBAARA,EAAoBA,EAAMoU,KAAKC,UAAUrU,IAEpEsU,EAAY,EACZC,EAAO,GA0BJ,SAASC,EAAIC,EAAYC,EAAUC,IAxB1C,SAAcD,EAAUD,EAAYE,GAChC,IAAIF,EACA,MAAM,IAAI/P,MAAM,wBAEpBgQ,EAAYA,GAAaE,EAAU1B,UAAUnJ,KAC7C4K,EAAYA,GAAaC,EAAUzB,WAAWE,QAE9C,IAAMwB,EAAS,EAAC,IAAIC,MAAOC,cAAeZ,EAAQO,GAAWP,EAAQQ,GAAY,GAAFK,OAAKb,EAAQM,GAAW,OAAMQ,KAAK,KAG/GX,EAAYO,EAAOtV,QAjBJ,OAkBdgV,EAAO,GACPD,EAAY,GAEhBA,GAAaO,EAAOtV,OACpBgV,EAAK5O,KAAKkP,GAUVK,CAAKR,EAAUD,EAAYE,GAOxB,SAASQ,IACZ,OAAOf,KAAKgB,MAAMhB,KAAKC,UAAUE,IAM9B,SAASc,KC5CR,SAAsBC,EAAMC,EAAUC,GAC1C,GAAIC,UAAaH,EAAjB,CAEA,IAAMI,EAA2B,iBAATJ,EAAqBA,EAAOlB,KAAKC,UAAUiB,GAC7DK,EAAO,IAAIC,KAAK,CAACF,GAAU,CAAChS,KAAM8R,IACpCtS,EAAIuS,SAASI,cAAc,KACzBC,EAAUC,IAAIC,gBAAgBL,GACpCzS,EAAE+S,SAAWV,EACbrS,EAAEgT,KAAOJ,EACTL,SAASU,KAAKC,YAAYlT,GAC1BA,EAAEmT,QACFZ,SAASU,KAAKG,YAAYpT,GAC1B6S,IAAIQ,gBAAgBT,IDiCpBU,CAAajC,EAAKU,KAAK,IAAK,OAAFD,QAAS,IAAIF,MAAO2B,UAAS,QAAQ,c,w0DE/C5D,ICJHC,ECUAC,EACAC,EAEAC,EFTSC,EAAY,CAIrBlN,WAAY,CACRvB,MAAO,CACHuC,aAAcgK,EAAUhL,WAAWvB,MAAMuC,aACzCD,oBAAqBiK,EAAUhL,WAAWvB,MAAMsC,oBAChDE,eAAgB+J,EAAUhL,WAAWvB,MAAMwC,eAC3CuB,OAAQwI,EAAUhL,WAAWvB,MAAM+D,OACnCrB,YAAa6J,EAAUhL,WAAWvB,MAAM0C,YACxCC,YAAa4J,EAAUhL,WAAWvB,MAAM2C,YACxCK,iBAAkBuJ,EAAUhL,WAAWvB,MAAMgD,iBAC7CC,qBAAsBsJ,EAAUhL,WAAWvB,MAAMiD,qBACjDC,yBAA0BqJ,EAAUhL,WAAWvB,MAAMkD,yBACrDL,kBAAmB0J,EAAUhL,WAAWvB,MAAM6C,kBAC9CC,sBAAuByJ,EAAUhL,WAAWvB,MAAM8C,sBAClDC,oBAAqBwJ,EAAUhL,WAAWvB,MAAM+C,oBAChDa,wBAAyB2I,EAAUhL,WAAWvB,MAAM4D,wBACpDD,cAAe4I,EAAUhL,WAAWvB,MAAM2D,cAC1CG,YAAayI,EAAUhL,WAAWvB,MAAM8D,YACxCE,gBAAiBuI,EAAUhL,WAAWvB,MAAMgE,gBAC5CZ,mBAAoBmJ,EAAUhL,WAAWvB,MAAMoD,mBAC/CE,qBAAsBiJ,EAAUhL,WAAWvB,MAAMsD,qBACjDC,wBAA0BgJ,EAAUhL,WAAWvB,MAAMuD,wBACrDC,0BAA2B+I,EAAUhL,WAAWvB,MAAMwD,0BACtDC,kBAAoB8I,EAAUhL,WAAWvB,MAAMyD,kBAC/CQ,mBAAoBsI,EAAUhL,WAAWvB,MAAMiE,oBAEnDrC,aAAc2K,EAAUhL,WAAWK,aACnCC,cAAe0K,EAAUhL,WAAWM,cACpCjC,QAAS2M,EAAUhL,WAAW3B,QAC9BH,iBAAkB8M,EAAUhL,WAAW9B,iBACvCC,iBAAkB6M,EAAUhL,WAAW7B,iBACvCuC,aAAcsK,EAAUhL,WAAWU,aACnCG,sBAAuBmK,EAAUhL,WAAWa,sBAC5CC,oBAAqBkK,EAAUhL,WAAWc,qBAK9C+B,WAAY,CACRpE,MAAO,CACH8E,oBAAqByH,EAAUnI,WAAWpE,MAAM8E,oBAChDK,oBAAqBoH,EAAUnI,WAAWpE,MAAMmF,oBAChDU,4BAA6B0G,EAAUnI,WAAWpE,MAAM6F,4BACxDd,eAAgBwH,EAAUnI,WAAWpE,MAAM+E,gBAE/CuB,cAAeiG,EAAUnI,WAAWkC,cACpCE,qBAAsB+F,EAAUnI,WAAWoC,sBAK/CQ,aAAY0H,EAAA,GAAOnC,EAAUvF,cAI7BK,iBAAgBqH,EAAA,GAAOnC,EAAUlF,kBAIjCK,UAASgH,EAAA,GAAOnC,EAAU7E,WAI1BO,YAAWyG,EAAA,GAAOnC,EAAUtE,aAI5BG,aAAYsG,EAAA,GAAOnC,EAAUnE,cAI7BsB,WAAUgF,EAAA,GAAOnC,EAAU7C,YAI3BS,cAAauE,EAAA,GAAOnC,EAAUpC,eAI9BH,WAAU0E,EAAA,GAAOnC,EAAUvC,YAI3BM,mBAAkBoE,EAAA,GAAOnC,EAAUjC,oBAInCG,2BAA0BiE,EAAA,GAAOnC,EAAU9B,4BAI3CI,UAAS6D,EAAA,GAAOnC,EAAU1B,WAI1BI,sBAAqByD,EAAA,GAAOnC,EAAUtB,uBAItCG,WAAUsD,EAAA,GAAOnC,EAAUnB,aAMlBuD,EAAW,SAAAC,GAQpB,SAAAD,EAAAE,GAA+C,IAAAC,EAAjCC,EAASF,EAATE,UAAWC,EAASH,EAATG,UAAWC,EAAOJ,EAAPI,QAUT,OAVgBC,IAAA,KAAAP,GACvCG,EAAAK,EAAA,KAAAR,EAAA,CAAMM,IAENG,GAAUC,eAAeN,GACzBK,GAAUC,eAAeL,GACrBC,GACAG,GAAUC,eAAeJ,GAE7BH,EAAKC,UAAYA,EACjBD,EAAKE,UAAYA,EACjBF,EAAKG,QAAUA,EAAQH,EAC1B,OAnBmBQ,IAAAX,EAAAC,GAmBnBW,IAAAZ,GAnBmB,CAmBnBxU,IAnB4BkC,QAyBnBmT,EAAKD,KAOf,SAAAC,EAAAC,GAA6B,IAAfpU,EAAIoU,EAAJpU,KAAMqU,EAAMD,EAANC,OAAMR,IAAA,KAAAM,GACtBJ,GAAUO,aAAatU,EAAM7F,OAAOoG,OAAO2Q,EAAUvC,aAClD0F,GACCN,GAAUC,eAAeK,GAE7Bhb,KAAK2G,KAAOA,EACZ3G,KAAKgb,OAASA,KAOTE,EAAgBL,KAMzB,SAAAK,EAAAC,GAAyB,IAAXC,EAAOD,EAAPC,QAAOZ,IAAA,KAAAU,GACjBlb,KAAKob,QAAUA,KAOVC,EAAiBR,KAM1B,SAAAQ,EAAAC,GAAkC,IAAAC,EAAAD,EAApBE,mBAAW,IAAAD,EAAG,GAAEA,EAAAf,IAAA,KAAAa,GACtBG,EAAYhZ,OAAS,GACrBgZ,EAAYnU,SAAQ,SAAAoU,GAChBf,GAAUgB,oBAAoBD,EAAYE,OAGlD3b,KAAKwb,YAAcA,KAOdI,EAAkBf,KAqB1B,SAAAe,EAAAC,GAAsZ,IAAAC,EAAAD,EAAxYE,eAAO,IAAAD,GAAOA,EAAAE,EAAAH,EAAEI,iBAAS,IAAAD,GAAOA,EAAAE,EAAAL,EAAEM,gBAAQ,IAAAD,GAAOA,EAAAE,EAAAP,EAAEQ,eAAO,IAAAD,GAAOA,EAAAE,EAAAT,EAAEU,6BAAqB,IAAAD,GAAQA,EAAAE,EAAAX,EAAEY,oBAAY,IAAAD,GAAOA,EAAAE,EAAAb,EAAEc,wBAAgB,IAAAD,GAAQA,EAAAE,EAAAf,EAAEgB,4BAAoB,IAAAD,GAAQA,EAAAE,EAAAjB,EAAEkB,wBAAgB,IAAAD,GAAQA,EAAAE,EAAAnB,EAAEoB,mBAAW,IAAAD,GAAQA,EAAAE,EAAArB,EAAEsB,6BAAqB,IAAAD,GAAQA,EAAAE,EAAAvB,EAAEwB,4BAAoB,IAAAD,GAAQA,EAAAE,EAAAzB,EAAE0B,wBAAgB,IAAAD,GAAQA,EAAAE,EAAA3B,EAAE4B,6BAAqB,IAAAD,GAAQA,EAAAE,EAAA7B,EAAE8B,8BAAsB,IAAAD,GAAMA,EAAAE,EAAA/B,EAAEgC,oBAAY,IAAAD,GAAMA,EAAApD,IAAA,KAAAoB,GAC/YlB,GAAUoD,gBAAgB/B,GAC1BrB,GAAUoD,gBAAgB7B,GAC1BvB,GAAUoD,gBAAgB3B,GAC1BzB,GAAUoD,gBAAgBzB,GAC1B3B,GAAUoD,gBAAgBvB,GAC1B7B,GAAUoD,gBAAgBrB,GAC1B/B,GAAUoD,gBAAgBnB,GAC1BjC,GAAUoD,gBAAgBjB,GAC1BnC,GAAUoD,gBAAgBf,GAC1BrC,GAAUoD,gBAAgBb,GAC1BvC,GAAUoD,gBAAgBX,GAC1BzC,GAAUoD,gBAAgBT,GAC1B3C,GAAUoD,gBAAgBP,GAC1B7C,GAAUoD,gBAAgBL,GAC1B/C,GAAUoD,gBAAgBH,GAC1BjD,GAAUoD,gBAAgBD,GAE1B7d,KAAK+b,QAAUA,EACf/b,KAAKic,UAAYA,EACjBjc,KAAKmc,SAAWA,EAChBnc,KAAKqc,QAAUA,EACfrc,KAAKuc,sBAAwBA,EAC7Bvc,KAAKyc,aAAeA,EACpBzc,KAAK2c,iBAAmBA,EACxB3c,KAAK6c,qBAAuBA,EAC5B7c,KAAK+c,iBAAmBA,EACxB/c,KAAKid,YAAcA,EACnBjd,KAAKmd,sBAAwBA,EAC7Bnd,KAAKqd,qBAAuBA,EAC5Brd,KAAKud,iBAAmBA,EACxBvd,KAAKyd,sBAAwBA,EAC7Bzd,KAAK2d,uBAAyBA,EAC9B3d,KAAK6d,aAAeA,KAOfE,EAAiBlD,KAO1B,SAAAkD,EAAAC,GAAgI,IAAAC,EAAAD,EAAlHE,cAAM,IAAAD,EAAG,CAACpG,EAAUvC,WAAWE,YAAWyI,EAAAE,EAAAH,EAAEI,qBAAa,IAAAD,EAAG,IAAIrD,EAAM,CAACnU,KAAMkR,EAAUvC,WAAWE,aAAY2I,EAAA3D,IAAA,KAAAuD,GACxHrD,GAAUgB,oBAAoBwC,EAAQG,OACtC3D,GAAUgB,oBAAoB0C,EAAetD,GAE7C9a,KAAKke,OAASA,EACdle,KAAKoe,cAAgBA,KAOhBE,EAAWzD,KAMpB,SAAAyD,EAAAC,GAA+B,IAAjBH,EAAaG,EAAbH,cAAa5D,IAAA,KAAA8D,GACvB5D,GAAUgB,oBAAoB0C,EAAetD,GAC7C9a,KAAKoe,cAAgBA,KAOhBI,EAAqB3D,KAU9B,SAAA2D,EAAAC,GAAgH,IAAlGC,EAAiBD,EAAjBC,kBAAiBC,EAAAF,EAAEG,iBAAS,IAAAD,EAAG,KAAIA,EAAAE,EAAAJ,EAAEK,wBAAgB,IAAAD,EAAG,KAAIA,EAAAE,EAAAN,EAAEO,kBAAU,IAAAD,EAAG,KAAIA,EAAAE,EAAAR,EAAES,cAAM,IAAAD,EAAG,KAAIA,EAAAzE,IAAA,KAAAgE,GACxGxe,KAAK0e,kBAAoBA,EACzB1e,KAAK4e,UAAYA,EACjB5e,KAAK8e,iBAAmBA,EACxB9e,KAAKgf,WAAaA,EAClBhf,KAAKkf,OAASA,KAOTC,EAAiBtE,KAS1B,SAAAsE,EAAAC,GAAoE,IAAtDC,EAAmBD,EAAnBC,oBAAqBC,EAAQF,EAARE,SAAUC,EAAWH,EAAXG,YAAaC,EAAMJ,EAANI,OAAMhF,IAAA,KAAA2E,GAC5DzE,GAAUgB,oBAAoB4D,EAAUG,IACxCzf,KAAKqf,oBAAsBA,EAC3Brf,KAAKsf,SAAWA,EAChBtf,KAAKuf,YAAcA,EACnBvf,KAAKwf,OAASA,KAOTE,EAAmB7E,KAO5B,SAAA6E,EAAAC,GAAkD,IAAAC,EAAAD,EAApCE,gBAAQ,IAAAD,EAAG,GAAEA,EAAAE,EAAAH,EAAEI,oBAAY,IAAAD,EAAG,GAAEA,EAAAtF,IAAA,KAAAkF,GACtCG,EAASrd,OAAS,GAClBqd,EAASxY,SAAQ,SAAA2Y,GACbtF,GAAUgB,oBAAoBsE,EAASC,OAG3CF,EAAavd,OAAS,GACtBud,EAAa1Y,SAAQ,SAAA6Y,GACjBxF,GAAUO,aAAaiF,EAAYpf,OAAOoG,OAAO2Q,EAAUnE,kBAGnE1T,KAAK6f,SAAWA,EAChB7f,KAAK+f,aAAeA,KAOfI,EAAUtF,KAMnB,SAAAsF,EAAAC,GAAsB,IAAR7f,EAAI6f,EAAJ7f,KAAIia,IAAA,KAAA2F,QACDvb,IAATrE,GACAma,GAAUgB,oBAAoBnb,EAAMob,IAExC3b,KAAKO,KAAOA,KAOP8f,GAAYxF,KAMrB,SAAAwF,EAAAC,GAAuB,IAATC,EAAKD,EAALC,MAAK/F,IAAA,KAAA6F,GACXE,aAAiBlC,OACjBkC,EAAMlZ,SAAQ,SAAA9G,GAAI,OAAIma,GAAUgB,oBAAoBnb,EAAMob,OAC1D3b,KAAKugB,MAAQA,IAEb7F,GAAUgB,oBAAoB6E,EAAO5E,IACrC3b,KAAKugB,MAAQ,CAACA,OAQbC,GAAgB3F,KAQzB,SAAA2F,EAAAC,GAA6D,IAA/CC,EAAkBD,EAAlBC,mBAAoBC,EAAgBF,EAAhBE,iBAAkBJ,EAAKE,EAALF,MAAK/F,IAAA,KAAAgG,GACjDD,IACAzf,OAAOoG,OAAOqZ,GAAOlZ,SAAQ,SAAA9G,GACzBma,GAAUgB,oBAAoBnb,EAAMob,OAExC3b,KAAKugB,MAAQA,GAEjBvgB,KAAK0gB,mBAAqBA,EAC1B1gB,KAAK2gB,iBAAmBA,KAOlBC,GAAwB/F,KASlC,SAAA+F,EAAAC,GAAgD,IAAlCC,EAAOD,EAAPC,QAASC,EAAGF,EAAHE,IAAKC,EAAQH,EAARG,SAAUxB,EAAMqB,EAANrB,OAAMhF,IAAA,KAAAoG,GACpCE,IAEApG,GAAUC,eAAeoG,GACzBrG,GAAUC,eAAe6E,GACrBwB,GACAtG,GAAUuG,eAAeD,IAGjChhB,KAAK8gB,QAAUA,EACf9gB,KAAK+gB,IAAMA,EACX/gB,KAAKghB,SAAWA,EAChBhhB,KAAKwf,OAASA,KAOT0B,GAAUrG,KASnB,SAAAqG,EAAAC,GAA6G,IAAAC,EAAAD,EAA/FE,iBAAS,IAAAD,GAAQA,EAAAE,EAAAH,EAAEI,wBAAgB,IAAAD,EAAG,IAAGA,EAAAE,EAAAL,EAAEM,qBAAa,IAAAD,GAAQA,EAAAE,EAAAP,EAAEQ,yBAAiB,IAAAD,GAAQA,EAAAlH,IAAA,KAAA0G,GACrGlhB,KAAKqhB,UAAYA,EACjBrhB,KAAKuhB,iBAAmBA,EACxBvhB,KAAKyhB,eAAgBzhB,KAAKqhB,WAAoBI,EAC9CzhB,KAAK2hB,kBAAoBA,KAOpBC,GAAW/G,KAKpB,SAAA+G,EAAAC,GAAoC,IAAAC,EAAAD,EAAtBE,kBAAU,IAAAD,GAAQA,EAAAtH,IAAA,KAAAoH,GAC5B5hB,KAAK+hB,WAAaA,KAObC,GAAanH,KAMtB,SAAAmH,EAAAC,GAAyB,IAAXnB,EAAOmB,EAAPnB,QAAOtG,IAAA,KAAAwH,GACjBhiB,KAAK8gB,QAAUA,KAOToB,GAAYrH,KAOtB,SAAAqH,EAAAC,GAAiD,IAAnCrB,EAAOqB,EAAPrB,QAAOsB,EAAAD,EAAEZ,wBAAgB,IAAAa,EAAG,IAAGA,EAAA5H,IAAA,KAAA0H,GACzCliB,KAAK8gB,QAAUA,EACf9gB,KAAKuhB,iBAAmBA,KAOnB9B,GAAQ5E,KAmCjB,SAAA4E,EAAA4C,GAIoJ,IAAAC,EAAAD,EAJtIE,0BAAkB,IAAAD,EAAG,KAAIA,EAAEE,EAAQH,EAARG,SAAQC,EAAAJ,EAAEjH,eAAO,IAAAqH,GAAQA,EAAAC,EAAAL,EAAE3D,yBAAiB,IAAAgE,GAAQA,EAAEC,EAAaN,EAAbM,cAAaC,EAAAP,EAAEQ,eAAO,IAAAD,EAAG,KAAIA,EAAAE,EAAAT,EAAEU,iBAAS,IAAAD,EAAG,KAAIA,EAAAE,EAAAX,EAAEY,sBAAc,IAAAD,EAAG,KAAIA,EAAAE,EAAAb,EAAEc,uBAAe,IAAAD,GAAOA,EAAAE,EAAAf,EACzLgB,qBAAa,IAAAD,GAAOA,EAAAE,EAAAjB,EAAEkB,sBAAc,IAAAD,GAAOA,EAAAE,EAAAnB,EAAEoB,mBAAW,IAAAD,GAAOA,EAAAE,EAAArB,EAAEsB,mBAAW,IAAAD,GAAOA,EAAAE,EAAAvB,EAAEwB,yBAAiB,IAAAD,GAAOA,EAAAE,EAAAzB,EAAE0B,mBAAW,IAAAD,GAAOA,EAAAE,EAAA3B,EACjI4B,qBAAa,IAAAD,GAAOA,EAAAE,EAAA7B,EAAE8B,wBAAgB,IAAAD,GAAOA,EAAAE,EAAA/B,EAAEgC,wBAAgB,IAAAD,GAAOA,EAAAE,EAAAjC,EAAEkC,oBAAY,IAAAD,GAAOA,EAAAE,EAAAnC,EAAEoC,mBAAW,IAAAD,GAAQA,EAAEE,EAAkBrC,EAAlBqC,mBAAkBC,EAAAtC,EACpIuC,sBAAc,IAAAD,GAAOA,EAAAE,EAAAxC,EAAEyC,wBAAgB,IAAAD,GAAOA,EAAAE,EAAA1C,EAAE2C,2BAAmB,IAAAD,GAAOA,EAAAE,EAAA5C,EAAE6C,kCAA0B,IAAAD,GAAOA,EAAAE,EAAA9C,EAAE+C,uBAAe,IAAAD,GAAOA,EAAAE,GAAAhD,EACrIiD,uBAAc,IAAAD,IAAOA,GAAAE,GAAAlD,EAAEmD,iCAAwB,IAAAD,GAAGxL,EAAUhE,2BAA2BC,OAAMuP,GAAAE,GAAApD,EAAEqD,yBAAgB,IAAAD,GAAG,KAAIA,GAAAE,GAAAtD,EAAEuD,qBAAY,IAAAD,IAAQA,GAAAnL,IAAA,KAAAiF,GACxI8C,GACA7H,GAAUmL,aAAatD,GAEvBU,GACAvI,GAAUmL,aAAa5C,GAEvBJ,GACAnI,GAAUC,eAAekI,GAEzBE,GACArI,GAAUC,eAAeoI,GAE7BrI,GAAUoD,gBAAgBY,GAC1BhE,GAAUoD,gBAAgB1C,GAC1BV,GAAUoD,gBAAgBqF,GAC1BzI,GAAUoD,gBAAgBuF,GAC1B3I,GAAUoD,gBAAgByF,GAC1B7I,GAAUoD,gBAAgB2F,GAC1B/I,GAAUoD,gBAAgB6F,GAC1BjJ,GAAUoD,gBAAgB+F,GAC1BnJ,GAAUoD,gBAAgBiG,GAC1BrJ,GAAUoD,gBAAgBmG,GAC1BvJ,GAAUoD,gBAAgBqG,GAC1BzJ,GAAUoD,gBAAgBuG,GAC1B3J,GAAUoD,gBAAgB2G,GAC1B/J,GAAUoD,gBAAgB8G,GAC1BlK,GAAUoD,gBAAgBgH,GAC1BpK,GAAUoD,gBAAgBkH,GAC1BtK,GAAUoD,gBAAgBoH,GAC1BxK,GAAUoD,gBAAgBsH,GAC1B1K,GAAUoD,gBAAgBwH,SACC1gB,IAAvB8f,GACAhK,GAAUoD,gBAAgB4G,GAE9BhK,GAAUO,aAAauK,GAA0B1kB,OAAOoG,OAAO2Q,EAAU9B,6BACrE2P,IACAhL,GAAUC,eAAe+K,IAE7BhL,GAAUoD,gBAAgB8H,IAC1B5lB,KAAKuiB,mBAAqBA,EAC1BviB,KAAK0e,kBAAoBA,EACzB1e,KAAKob,QAAUA,EACfpb,KAAKwiB,SAAWA,EAChBxiB,KAAK2iB,cAAgBA,EACrB3iB,KAAK+iB,UAAYA,EACjB/iB,KAAK6iB,QAAUA,EACf7iB,KAAKijB,eAAiBA,EACtBjjB,KAAKmjB,gBAAkBA,EACvBnjB,KAAKqjB,cAAgBA,EACrBrjB,KAAKujB,eAAiBA,EACtBvjB,KAAKyjB,YAAcA,EACnBzjB,KAAK2jB,YAAcA,EACnB3jB,KAAK6jB,kBAAoBA,EACzB7jB,KAAK+jB,YAAcA,EACnB/jB,KAAKikB,cAAgBA,EACrBjkB,KAAKmkB,iBAAmBA,EACxBnkB,KAAKqkB,iBAAmBA,EACxBrkB,KAAKukB,aAAeA,EACpBvkB,KAAKykB,YAAcA,EACnBzkB,KAAK0kB,mBAAqBA,EAC1B1kB,KAAKwlB,yBAA2BA,GAChCxlB,KAAK4kB,eAAiBA,EACtB5kB,KAAK8kB,iBAAmBA,EACxB9kB,KAAKglB,oBAAsBA,EAC3BhlB,KAAKklB,2BAA6BA,EAClCllB,KAAKolB,gBAAkBA,EACvBplB,KAAKslB,eAAiBA,GACtBtlB,KAAK0lB,iBAAmBA,GACxB1lB,KAAK4lB,aAAeA,MASf3F,GAAOpF,KAiBhB,SAAAoF,EAAA6F,GAAsI,IAAzHvG,EAAWuG,EAAXvG,YAAawG,EAAED,EAAFC,GAAIpf,EAAImf,EAAJnf,KAAMhG,EAAImlB,EAAJnlB,KAAMqlB,EAAMF,EAANE,OAAQC,EAASH,EAATG,UAAWC,EAAWJ,EAAXI,YAAaC,EAAKL,EAALK,MAAOC,EAAYN,EAAZM,aAAcC,EAAQP,EAARO,SAAUC,EAAWR,EAAXQ,YAAaC,EAAaT,EAAbS,cAAa/L,IAAA,KAAAyF,GAC3HV,GACA7E,GAAUC,eAAe4E,GAEzB5Y,GACA+T,GAAUO,aAAatU,EAAM7F,OAAOoG,OAAO2Q,EAAUnE,eAErDqS,GACArL,GAAUC,eAAeoL,GAEzBplB,GACA+Z,GAAUC,eAAeha,GAEzBqlB,GACAtL,GAAUC,eAAeqL,GAEzBC,GACAvL,GAAUC,eAAesL,GAEzBG,GACA1L,GAAUO,aAAamL,EAActlB,OAAOoG,OAAO2Q,EAAUjC,qBAE7DyQ,GACA3L,GAAUC,eAAe0L,GAEzBC,GACA5L,GAAUC,eAAe2L,GAEzBC,GACA7L,GAAUC,eAAe4L,GAG7BvmB,KAAKuf,YAAcA,EACnBvf,KAAK+lB,GAAKA,EACV/lB,KAAK2G,KAAOA,EACZ3G,KAAKW,KAAOA,EACZX,KAAKgmB,OAASA,EACdhmB,KAAKimB,UAAYA,EACjBjmB,KAAKkmB,YAAcA,EACnBlmB,KAAKmmB,MAAQA,EACTtO,EAAUnE,aAAad,QAAU5S,KAAK2G,KACtC3G,KAAKomB,aAAeA,EAEpBpmB,KAAKomB,aAAe,KAExBpmB,KAAKumB,cAAgBA,EACrBvmB,KAAKqmB,SAAWA,EAChBrmB,KAAKsmB,YAAcA,KAQdE,GAAmB3L,KAW5B,SAAA2L,EAAAC,GAA0I,IAA5HC,EAAWD,EAAXC,YAAaC,EAAeF,EAAfE,gBAAeC,EAAAH,EAAEI,kBAAU,IAAAD,EAAG7M,EAAUxG,YAAYE,KAAImT,EAAEE,EAAQL,EAARK,SAAUtE,EAAQiE,EAARjE,SAAQuE,EAAAN,EAAEO,6BAAqB,IAAAD,GAAQA,EAAAvM,IAAA,KAAAgM,GAC9HE,GACAhM,GAAUC,eAAe+L,GAEzBC,GACAjM,GAAUO,aAAa0L,EAAiB7lB,OAAOoG,OAAO2Q,EAAUlF,mBAEhEmU,GACApM,GAAUC,eAAemM,QAEZliB,IAAb4d,GACA9H,GAAUoD,gBAAgB0E,GAG9B9H,GAAUoD,gBAAgBkJ,GAC1BtM,GAAUO,aAAa4L,EAAY/lB,OAAOoG,OAAO2Q,EAAUtE,cAE3DvT,KAAK0mB,YAAcA,EACnB1mB,KAAK2mB,gBAAkBA,EACvB3mB,KAAK8mB,SAAWA,EAChB9mB,KAAKwiB,SAAWA,EAChBxiB,KAAK6mB,WAAaA,EAClB7mB,KAAKgnB,sBAAwBA,KAQxBrL,GAASd,KAelB,SAAAc,EAAAsL,GAA+H,IAAlHzH,EAAMyH,EAANzH,OAAQ0H,EAAQD,EAARC,SAAUlH,EAAOiH,EAAPjH,QAASmH,EAAKF,EAALE,MAAOC,EAAcH,EAAdG,eAAgB7H,EAAW0H,EAAX1H,YAAaD,EAAQ2H,EAAR3H,SAAU+H,EAAMJ,EAANI,OAAQC,EAAgBL,EAAhBK,iBAAkBC,EAAWN,EAAXM,YAAW/M,IAAA,KAAAmB,GAEnH6D,IACA9E,GAAUC,eAAe6E,GACzBxf,KAAKwf,OAASA,GAEd0H,IACAxM,GAAUO,aAAaiM,EAAUpmB,OAAOoG,OAAO2Q,EAAU7E,YACzDhT,KAAKknB,SAAWA,GAEhB3H,IACA7E,GAAUC,eAAe4E,GACzBvf,KAAKuf,YAAcA,GAEnBD,IACA5E,GAAUgB,oBAAoB4D,EAAUG,IACxCzf,KAAKsf,SAAWA,GAEhBU,IACAtF,GAAUgB,oBAAoBsE,EAASC,IACvCjgB,KAAKggB,QAAUA,GAEfqH,IACArnB,KAAKqnB,OAASA,GAEdC,IACAtnB,KAAKsnB,iBAAmBA,GAExBC,IACAvnB,KAAKunB,YAAcA,GAEvBvnB,KAAKmnB,MAAQA,EACbnnB,KAAKonB,eAAiBA,KAOjBI,GAAkB,oBAAAA,IAAAhN,IAAA,KAAAgN,GA6N1B,OA7N0B3M,IAAA2M,EAAA,EAAA7lB,IAAA,iBAAAN,MAM3B,WACI,MAAM,IAAIsG,MAAM,qBAGpB,CAAAhG,IAAA,aAAAN,MAMA,SAAWd,GACP,MAAM,IAAIoH,MAAM,qBAGpB,CAAAhG,IAAA,cAAAN,MAMA,SAAYd,GACR,MAAM,IAAIoH,MAAM,qBAGpB,CAAAhG,IAAA,UAAAN,MAOA,SAAQd,EAAMgnB,GACV,MAAM,IAAI5f,MAAM,qBAGpB,CAAAhG,IAAA,OAAAN,MAKA,WACI,MAAM,IAAIsG,MAAM,qBAGpB,CAAAhG,IAAA,SAAAN,MAKA,WACI,MAAM,IAAIsG,MAAM,qBAGpB,CAAAhG,IAAA,OAAAN,MAMA,SAAKd,GACD,MAAM,IAAIoH,MAAM,qBAGpB,CAAAhG,IAAA,SAAAN,MAMA,SAAOd,GACH,MAAM,IAAIoH,MAAM,qBAGpB,CAAAhG,IAAA,OAAAN,MAOA,SAAK2e,EAASyH,GACV,MAAM,IAAI9f,MAAM,qBAGpB,CAAAhG,IAAA,aAAAN,MAIA,SAAWqmB,GACP,MAAM,IAAI/f,MAAM,qBAGpB,CAAAhG,IAAA,mBAAAN,MAKA,SAAiBsmB,GACb,MAAM,IAAIhgB,MAAM,qBAGpB,CAAAhG,IAAA,OAAAN,MAMA,SAAKumB,EAAOC,GACR,MAAM,IAAIlgB,MAAM,qBAGpB,CAAAhG,IAAA,aAAAN,MAKA,SAAWkf,GACP,MAAM,IAAI5Y,MAAM,qBAGpB,CAAAhG,IAAA,iBAAAN,MAOA,SAAe2e,EAAS8H,EAAYC,GAChC,MAAM,IAAIpgB,MAAM,qBAGpB,CAAAhG,IAAA,iBAAAN,MAKA,SAAed,GACX,MAAM,IAAIoH,MAAM,qBAGpB,CAAAhG,IAAA,kBAAAN,MAKA,SAAgBd,GACZ,MAAM,IAAIoH,MAAM,qBAGpB,CAAAhG,IAAA,iBAAAN,MAIA,WACI,MAAM,IAAIsG,MAAM,qBAGpB,CAAAhG,IAAA,iBAAAN,MAKA,SAAe2mB,GACX,MAAM,IAAIrgB,MAAM,qBAGpB,CAAAhG,IAAA,kBAAAN,MAIA,WACI,MAAM,IAAIsG,MAAM,qBAGpB,CAAAhG,IAAA,aAAAN,MAIA,SAAWd,GACP,MAAM,IAAIoH,MAAM,qBAGpB,CAAAhG,IAAA,wBAAAN,MAOA,SAAsB4mB,EAAcC,EAAe1I,GAC/C,MAAM,IAAI7X,MAAM,qBAGpB,CAAAhG,IAAA,gBAAAN,MAIA,SAAcd,GACV,MAAM,IAAIoH,MAAM,qBAGpB,CAAAhG,IAAA,uBAAAN,MAIA,SAAqBd,GACjB,MAAM,IAAIoH,MAAM,qBAGpB,CAAAhG,IAAA,oBAAAN,MAIA,SAAkBd,GACd,MAAM,IAAIoH,MAAM,uBACnB6f,EA7N0B,GAmOlBW,GAAe,oBAAAA,IAAA3N,IAAA,KAAA2N,GA2FvB,OA3FuBtN,IAAAsN,EAAA,EAAAxmB,IAAA,OAAAN,MAOxB,SAAK2mB,GACD,MAAM,IAAIrgB,MAAM,qBAGpB,CAAAhG,IAAA,wBAAAN,MAKA,WACI,MAAM,IAAIsG,MAAM,qBAGpB,CAAAhG,IAAA,mBAAAN,MAKA,SAAiB+mB,GACb,MAAM,IAAIzgB,MAAM,qBAGpB,CAAAhG,IAAA,iBAAAN,MAQA,SAAekmB,EAAac,EAAYC,GACpC,MAAM,IAAI3gB,MAAM,qBAGpB,CAAAhG,IAAA,iBAAAN,MAKC,WACGrB,KAAKuoB,mBAAmB1Q,EAAU1B,UAAUnJ,KAAM,2CAGtD,CAAArL,IAAA,SAAAN,MAIA,WACI,MAAM,IAAIsG,MAAM,qBAGpB,CAAAhG,IAAA,gBAAAN,MAIA,SAAckZ,GACV,MAAM,IAAI5S,MAAM,qBAGpB,CAAAhG,IAAA,eAAAN,MAIA,SAAamW,GACTc,MAGJ,CAAA3W,IAAA,qBAAAN,MAOA,SAAmBsW,EAAU4C,EAASiO,MAEtC,CAAA7mB,IAAA,cAAAN,MAMA,SAAYsmB,EAAQc,GAChB,MAAM,IAAI9gB,MAAM,uBACnBwgB,EA3FuB,GA8FfzN,GAAS,oBAAAA,IAAAF,IAAA,KAAAE,GA0CjB,OA1CiBG,IAAAH,EAAA,OAAA/Y,IAAA,iBAAAN,MAClB,SAAsBA,GAClB,GAAqB,iBAAVA,EACP,MAAM,IAAIsG,MAAM,gDAADsQ,OAAA/U,IAAwD7B,KAE3E,OAAOrB,OACV,CAAA2B,IAAA,iBAAAN,MAED,SAAsBA,GAClB,GAAqB,iBAAVA,EACP,MAAM,IAAIsG,MAAM,gDAADsQ,OAAA/U,IAAwD7B,KAE3E,OAAOrB,OACV,CAAA2B,IAAA,kBAAAN,MAED,SAAuBA,GACnB,GAAqB,kBAAVA,EACP,MAAM,IAAIsG,MAAM,iDAADsQ,OAAA/U,IAAyD7B,KAE5E,OAAOrB,OACV,CAAA2B,IAAA,eAAAN,MAED,SAAoBA,EAAOqnB,GAEvB,IADc,IAAIC,OAAOD,EAAWxQ,KAAM,KAAO,KACtC0Q,KAAKvnB,GACZ,MAAM,IAAIsG,MAAM,4CAADsQ,OAA6CZ,KAAKC,UAAUoR,GAAW,aAAAzQ,OAAY5W,IAEtG,OAAOrB,OACV,CAAA2B,IAAA,eAAAN,MAED,SAAoBA,GAChB,KAAMA,aAAiB0W,MACnB,MAAM,IAAIpQ,MAAM,qDAADsQ,OAAA/U,IAA6D7B,KAEhF,OAAOrB,OACV,CAAA2B,IAAA,sBAAAN,MAED,SAA2BS,EAAQ+mB,GAC/B,KAAM/mB,aAAkB+mB,GACpB,MAAM,IAAIlhB,MAAM,gDAADsQ,OAAiD4Q,EAAS,aAAA5Q,OAAA/U,IAAmBpB,KAEhG,OAAO9B,SACV0a,EA1CiB,GAgDToO,GAASjO,KAQlB,SAAAiO,EAAAC,GAA+C,IAAjCN,EAAUM,EAAVN,WAAYO,EAAMD,EAANC,OAAQC,EAASF,EAATE,UAASzO,IAAA,KAAAsO,GACvCpO,GAAUO,aAAagO,EAAWnoB,OAAOoG,OAAO2Q,EAAUnB,aAC1D1W,KAAKipB,UAAYA,EACjBjpB,KAAKyoB,WAAaA,EAClBzoB,KAAKgpB,OAASA,KASTE,GAAerO,KAQxB,SAAAqO,EAAAC,GAAmD,IAAtCC,EAAQD,EAARC,SAAUC,EAAaF,EAAbE,cAAeC,EAAUH,EAAVG,WAAU9O,IAAA,KAAA0O,GAC5CxO,GAAUC,eAAeyO,GACrBC,GACA3O,GAAUC,eAAe0O,GAEzBC,GACA5O,GAAUC,eAAe2O,GAE7BtpB,KAAKopB,SAAWA,EAChBppB,KAAKqpB,cAAgBA,EACrBrpB,KAAKspB,WAAaA,KAQbC,GAAqB1O,KAQ9B,SAAA0O,EAAAC,GAAgD,IAAnCJ,EAAQI,EAARJ,SAAUK,EAAUD,EAAVC,WAAYH,EAAUE,EAAVF,WAAU9O,IAAA,KAAA+O,GACrCH,GACA1O,GAAUC,eAAeyO,GAEzBK,GACA/O,GAAUC,eAAe8O,GAEzBH,GACA5O,GAAUC,eAAe2O,GAE7BtpB,KAAKopB,SAAWA,EAChBppB,KAAKypB,WAAaA,EAClBzpB,KAAKspB,WAAaA,KASZI,GAAiB7O,KAO3B,SAAA6O,EAAAC,GAAsD,IAAzCC,EAAkBD,EAAlBC,mBAAoBC,EAAkBF,EAAlBE,mBAAkBrP,IAAA,KAAAkP,GAC/ChP,GAAUgB,oBAAoBkO,EAAoBL,IAClD7O,GAAUC,eAAeiP,EAAmBN,YACxCO,GACAnP,GAAUgB,oBAAoBmO,EAAoBN,IAEtDvpB,KAAK4pB,mBAAqBA,EAC1B5pB,KAAK6pB,mBAAqBA,KAQrBC,GAAkBjP,KAa3B,SAAAiP,EAAAC,GAAmF,IAAtEvK,EAAMuK,EAANvK,OAAQkH,EAAWqD,EAAXrD,YAAaQ,EAAQ6C,EAAR7C,SAAU8C,EAAID,EAAJC,KAAMC,EAAEF,EAAFE,GAAIC,EAAcH,EAAdG,eAAgBC,EAAUJ,EAAVI,WAAU3P,IAAA,KAAAsP,GAC5EpP,GAAUC,eAAe6E,GACzBxf,KAAKwf,OAASA,EACdxf,KAAK0mB,YAAcA,EACnB1mB,KAAKknB,SAAWA,EAChBlnB,KAAKgqB,KAAOA,EACZhqB,KAAKiqB,GAAKA,EACVjqB,KAAKkqB,eAAiBA,EACtBlqB,KAAKmqB,WAAaA,KAQbC,GAAUvP,KAQnB,SAAAuP,EAAAC,GAAsD,IAAxC7K,EAAM6K,EAAN7K,OAAQ8K,EAAKD,EAALC,MAAOC,EAAqBF,EAArBE,sBAAqB/P,IAAA,KAAA4P,GAC1C5K,IACA9E,GAAUC,eAAe6E,GACzBxf,KAAKwf,OAASA,GAGd8K,IACA5P,GAAUgB,oBAAoB4O,EAAOjM,OACrCiM,EAAMjjB,SAAQ,SAAAmjB,GAAiB,OAAI9P,GAAUgB,oBAAoB8O,EAAmBC,OACpFzqB,KAAKsqB,MAAQA,GAGbC,IACA7P,GAAUoD,gBAAgByM,GAC1BvqB,KAAKuqB,sBAAwBA,MAS5BE,GAAiB5P,KAO1B,SAAA4P,EAAAC,GAAqD,IAAxCC,EAAiBD,EAAjBC,kBAAmBC,EAAkBF,EAAlBE,mBAAkBpQ,IAAA,KAAAiQ,GAC1CE,GACAjQ,GAAUgB,oBAAoBiP,EAAmBE,IAEjDD,GACAlQ,GAAUgB,oBAAoBkP,EAAoBC,IAGtD7qB,KAAK2qB,kBAAoBA,EACzB3qB,KAAK4qB,mBAAqBA,KAQrBC,GAAShQ,KASlB,SAAAgQ,EAAAC,GAAkF,IAArEC,EAAYD,EAAZC,aAAcC,EAAWF,EAAXE,YAAaC,EAAkBH,EAAlBG,mBAAoBC,EAAmBJ,EAAnBI,oBAAmB1Q,IAAA,KAAAqQ,GAC3EE,EAAgC,MAAhBA,GAAwBA,EAAe,EAAK,EAAIA,EAChEC,EAA8B,MAAfA,GAAuBA,EAAc,EAAK,EAAIA,EAC7DC,EAA4C,MAAtBA,GAA8BA,EAAqB,EAAK,EAAIA,EAClFC,EAA8C,MAAvBA,GAA+BA,EAAsB,EAAK,EAAIA,EAErFlrB,KAAKmrB,WAAa,EAClBnrB,KAAK+qB,aAAeA,EACpB/qB,KAAKgrB,YAAcA,EACnBhrB,KAAKirB,mBAAqBA,EAC1BjrB,KAAKkrB,oBAAsBA,KAOrBE,GAAmBvQ,KAM7B,SAAAuQ,EAAAC,GAAoB,IAAP9qB,EAAI8qB,EAAJ9qB,KAAIia,IAAA,KAAA4Q,GACb1Q,GAAUgB,oBAAoBnb,EAAMob,IACpC3b,KAAKO,KAAOA,KAON+qB,GAAsB,SAAAC,GAMhC,SAAAD,EAAAE,GAAuB,IAATjL,EAAKiL,EAALjL,MAAK,OAAA/F,IAAA,KAAA8Q,GAAA7Q,EAAA,KAAA6Q,EAAA,CACT,CAAE/K,WACX,OAR+B3F,IAAA0Q,EAAAC,GAQ/B1Q,IAAAyQ,GAR+B,CAASjL,IAkBhCoL,GAAuB5Q,KAChC,SAAA4Q,EAAAC,GAA0E,IAAAC,EAAAD,EAA7D5K,eAAO,IAAA6K,GAAOA,EAAAC,EAAAF,EAAErK,iBAAS,IAAAuK,GAAQA,EAAAC,EAAAH,EAAEnK,wBAAgB,IAAAsK,EAAG,IAAGA,EAAArR,IAAA,KAAAiR,GAClEzrB,KAAK8gB,QAAUA,EACf9gB,KAAKqhB,UAAYA,EACjBrhB,KAAKuhB,iBAAmBA,KAYnBuK,GAAcjR,KACvB,SAAAiR,EAAYC,GACR,GADevR,IAAA,KAAAsR,GACXC,EAAO,CACP,IAAAC,EAA8DD,EAAvDE,gBAAQ,IAAAD,EAAG,KAAIA,EAAAE,EAAwCH,EAAtCI,aAAK,IAAAD,EAAG,GAAEA,EAAAE,EAA4BL,EAA1BM,cAAM,IAAAD,EAAG,EAACA,EAAAE,EAAgBP,EAAdQ,aAAK,IAAAD,EAAG,GAAEA,EACtDL,GACAvR,GAAUC,eAAesR,GAE7BvR,GAAUuG,eAAekL,GACzBzR,GAAUuG,eAAeoL,GAAQ,IACTG,EADSC,EAAAC,EACdH,GAAK,IAAxB,IAAAE,EAAAtqB,MAAAqqB,EAAAC,EAAA5qB,KAAAsC,MAAyB,CAAVqoB,EAAAnrB,MACXqZ,GAAUO,aAAasR,EAAOzrB,OAAOoG,OAAO2Q,EAAUtB,yBACzD,MAAA5R,GAAA8nB,EAAAzmB,EAAArB,GAAA,QAAA8nB,EAAA5lB,IACD7G,KAAKisB,SAAWA,EAChBjsB,KAAKmsB,MAAQA,EACbnsB,KAAKqsB,OAASA,EACdrsB,KAAKusB,MAAQA,MCr5CrBtP,IAAc,EAYlB,SAAS0P,GAAeC,GACpB,IAAMC,EAXV,SAAqBD,GACjB,IAAMtC,EAAQ3Q,EAAYiT,GAC1B,MAAO,CACH7B,aAAcT,EAAMS,aAAeT,EAAMa,WACzCH,YAAaV,EAAMU,YAAcV,EAAMa,WACvCF,mBAAoBX,EAAMW,mBAAqBX,EAAMa,WACrDD,oBAAqBZ,EAAMY,oBAAsBZ,EAAMa,YAK1C2B,CAAYF,GACvBG,EAAmBF,EAAS3B,oBAAqD,EAA9B2B,EAAS5B,mBAA0B,GACxF+B,EAAI,EAOR,OALIA,EADAD,EAAmB,IACf,KAAQA,EAAmB,GAE3B,MAAQA,EAAmB,KAAO,GAGnC,EAAK,MADZC,GAAKH,EAAS7B,YAAc6B,EAAS9B,aAAe,KAC1B,KAAWiC,GAAKA,EAAI,KAAO,IAAMA,GAGxD,SAASC,KACZhQ,IAAc,EAGX,SAASiQ,KACZ,GAAKjQ,IAAgBtD,EAArB,CAGA,IAAMwT,EAAkBR,GAAe,qBACjCS,EAAkBT,GAAe,sBAEvC,OADAhT,EAAc,KACV3Q,MAAMokB,IAAoBpkB,MAAMmkB,GACzB,EACAnkB,MAAMokB,GACND,EACAnkB,MAAMmkB,GACNC,EAEAC,KAAKC,IAAIH,EAAiBC,IAIlC,SAASG,KACZ5T,EAAc,IAAI8Q,GAAkB,CAACE,kBAAmB,IAAIE,GAAU,CAACE,aAAc,EAAGC,YAAa,EAAGC,mBAAoB,EAAGC,oBAAqB,IACzHN,mBAAoB,IAAIC,GAAU,CAACE,aAAc,EAAGC,YAAa,EAAGC,mBAAoB,EAAGC,oBAAqB,MAGxI,SAASsC,GAAiBC,GACzB9T,GACA8T,EAAWpmB,SAAQ,SAACijB,GACZA,EAAMK,oBACNhR,EAAYgR,kBAAkBQ,aAC9BxR,EAAYgR,kBAAkBI,cAAuD,EAAvCT,EAAMK,kBAAkBI,aACtEpR,EAAYgR,kBAAkBK,aAAqD,EAAtCV,EAAMK,kBAAkBK,YACrErR,EAAYgR,kBAAkBM,oBAAmE,EAA7CX,EAAMK,kBAAkBM,mBAC5EtR,EAAYgR,kBAAkBO,qBAAqE,EAA9CZ,EAAMK,kBAAkBO,qBAE7EZ,EAAMM,qBACNjR,EAAYiR,mBAAmBO,aAC/BxR,EAAYiR,mBAAmBG,cAAwD,EAAxCT,EAAMM,mBAAmBG,aACxEpR,EAAYiR,mBAAmBI,aAAsD,EAAvCV,EAAMM,mBAAmBI,YACvErR,EAAYiR,mBAAmBK,oBAAoE,EAA9CX,EAAMM,mBAAmBK,mBAC9EtR,EAAYiR,mBAAmBM,qBAAsE,EAA/CZ,EAAMM,mBAAmBM,wBCjD/F,SAASwC,GAAa1nB,GAClB,OAAOA,GAAKA,EAAEW,KAAOX,EAAEW,KAAOX,EAwClC,SAAS2nB,GAAgB3nB,GACrB,OAAOA,GAAKA,EAAEuU,QAAUvU,EAAEuU,QAAUvU,EAQxC,SAAS4nB,GAAiBC,EAAWrF,EAASsF,GAC1C,IAAMC,EA3CV,SAASC,EAAgBxF,GACrB,GAAIA,EAAS,CACT,GAAyB,mBAAbA,EAER,OACG,GAAyB,WAArBtlB,IAAQslB,GAAuB,CACtC,IAAMyF,EAAU5P,MAAM4P,QAAQzF,GACxBuF,EAAmBE,EAAU,GAAK,GAExC,GAAIA,EACAzF,EAAQnhB,SAAQ,SAAA6mB,GACZH,EAAiBnlB,KAAKolB,EAAgBE,YAG1C,IAAK,IAAMnsB,KAAYymB,EACF,gBAAbzmB,GACa,WAAbA,GACa,SAAbA,GACa,mBAAbA,IACAgsB,EAAiBhsB,GAAYisB,EAAgBxF,EAAQzmB,KAIjE,OAAOgsB,GAGf,OAAOvF,EAiBkBwF,CAAgBxF,GAEzC/Q,EAAI,CAACoW,YAAWrF,WADCsF,EAAUjW,EAAU1B,UAAUrJ,MAAQ+K,EAAU1B,UAAUnJ,KACvC6K,EAAUzB,WAAWC,QAEzDuD,EAAYuU,YAAY,CACpBxnB,KAAMkR,EAAUnN,aAAaG,IAC7B2d,QAAS,CAAEqF,YAAWrF,QAASuF,EAAkBD,aASzD,SAASM,GAAcP,EAAWrF,GAA6B,IAApB6F,IAAW5pB,UAAAjC,OAAA,QAAAoC,IAAAH,UAAA,KAAAA,UAAA,GAClDmV,EAAYuU,YAAY,CACpBxnB,KAAMkR,EAAUnN,aAAaI,2BAC7B0d,QAAS,CAAE8F,mBAAoBT,EAAWU,sBAAuB/F,KAEjE6F,GACAT,GAAiBC,EAAWrF,GAAS,GAU7C,SAASgG,GAAcC,EAAWvqB,EAAO2pB,GAErCa,QAAQxqB,MAAM,wBAAD+T,OAAyBwW,EAAS,mBAAAxW,OAAkB4V,GAAa3pB,GAC9EkqB,GAAcvW,EAAUhL,WAAWC,MAAO,CAAEyN,QAASkU,IAAa,GAClEb,GAAiBC,EAAW,CAAEY,YAAWvqB,UAAS,GAQtD,SAASyqB,GAAoBzqB,EAAO2pB,GAEhC,IAAMrF,EAAU,CACZoG,YAAa,CACTvU,UAAWnW,EAAMmW,UACjBC,UAAWpW,EAAMoW,UACjBC,QAASrW,EAAMqW,UAGvBmU,QAAQxqB,MAAM,6CAAD+T,OAA8C4V,GAAarF,GACxE4F,GAAcvW,EAAUhL,WAAWC,MAAO0b,GAAS,GACnDoF,GAAiBC,EAAW,CAAEY,UAAW5W,EAAUnI,WAAWiC,aAAczN,UAAS,GAGzF,SAAS2qB,GAAahB,EAAWrF,GAE7BkG,QAAQzqB,KAAK,6CAADgU,OAA8C4V,EAAS,kBAAA5V,OAAiBZ,KAAKC,UAAUkR,KACnG4F,GAAcvW,EAAUhL,WAAWG,KAAM,CAAEuN,QAASsT,IAAa,GACjED,GAAiBC,EAAWrF,GAAS,GAGzC,SAGesG,KAAiB,OAAAC,GAAArqB,MAAC,KAADD,WAuDhC,SAAAsqB,KAFC,OAEDA,GAAAC,IAAA9oB,IAAAiD,MAvDA,SAAA8lB,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA9T,EAAA7U,EAAA6hB,EAAA,OAAAtiB,IAAAI,MAAA,SAAAipB,GAAA,cAAAA,EAAA9lB,KAAA8lB,EAAAnnB,MAAA,cAAAmnB,EAAA9lB,KAAA,EAAA8lB,EAAAnnB,KAAA,EAEyCyR,EAAgB2V,wBAAuB,OAAhD,OAAlBL,EAAkBI,EAAAxnB,KAAAwnB,EAAAnnB,KAAG,EACK+mB,EAAmBM,iBAAgB,OAA5C,OAAjBL,EAAiBG,EAAAxnB,KAAAwnB,EAAAnnB,KAAG,EACO+mB,EAAmBO,kBAAiB,OAKpE,OALKL,EAAkBE,EAAAxnB,KACxB2S,GAAUgB,oBAAoB0T,EAAmBrR,GACjDrD,GAAUgB,oBAAoB2T,EAAoBzT,GAC9CyT,EAAmBpS,aACnBgQ,KACHsC,EAAAnnB,KAAA,GAC+B+mB,EAAmBQ,iBAAgB,QAA7DL,EAAiBC,EAAAxnB,KACvB2S,GAAUgB,oBAAoB4T,EAAmBjU,GAC3CG,EAAc8T,EAAkB9T,YAChC7U,EAAOkR,EAAUnN,aAAaE,gBAC9B4d,EAAU,CACZoH,YAAWC,QAAA,GAENhY,EAAU9D,kBAAkBE,OAAUmb,EAAkBlR,QACxDrG,EAAU9D,kBAAkBG,eAAkBkb,EAAkBhR,eAErE0R,cAAYZ,EAAA,GAAAW,wCAAAX,EACPrX,EAAU1D,kBAAkBzI,KAAQ2jB,EAAmBtT,SACvDlE,EAAU1D,kBAAkBC,OAAUib,EAAmBpT,WACzDpE,EAAU1D,kBAAkBE,MAASgb,EAAmBlT,UACxDtE,EAAU1D,kBAAkBG,KAAQ+a,EAAmBhT,SACvDxE,EAAU1D,kBAAkB1F,qBAAwB4gB,EAAmB9S,uBACvE1E,EAAU1D,kBAAkBI,cAAiB8a,EAAmB5S,cAChE5E,EAAU1D,kBAAkBK,eAAkB6a,EAAmB1S,kBACjE9E,EAAU1D,kBAAkBM,6BAAgC4a,EAAmBxS,sBAC/EhF,EAAU1D,kBAAkBO,gCAAmC2a,EAAmBtS,kBAClFlF,EAAU1D,kBAAkBQ,qBAAwB0a,EAAmBlS,uBAAqB0S,wBAAAX,EAC5FrX,EAAU1D,kBAAkB5H,oBAAuB8iB,EAAmBhS,sBACtExF,EAAU1D,kBAAkBS,IAAOya,EAAmBpS,aACtDpF,EAAU1D,kBAAkBU,eAAkBwa,EAAmB9R,kBACjE1F,EAAU1D,kBAAkBW,sBAAyBua,EAAmB5R,uBACxE5F,EAAU1D,kBAAkBY,sBAAyBsa,EAAmB1R,wBACxE9F,EAAU1D,kBAAkBR,UAAa0b,EAAmBxR,eAEjEkS,eAAgBvU,EAAYhZ,OAAS,EAAIgZ,EAAY,GAAK,MAE9D5B,EAAYuU,YAAY,CACpBxnB,OACA6hB,YAEJoF,GAAiBjnB,EAAM6hB,GAAS,GAAO+G,EAAAnnB,KAAA,iBAAAmnB,EAAA9lB,KAAA,GAAA8lB,EAAAS,GAAAT,EAAA,SAGvC3V,EAAYuU,YAAY,CACpBxnB,KAAMkR,EAAUnN,aAAaE,gBAC7B4d,QAAS,KAEboF,GAAiB/V,EAAUnN,aAAaE,gBAAiB,IAAI,GAAO,yBAAA2kB,EAAA3lB,UAAAqlB,EAAA,oBAE3EvqB,MAAA,KAAAD,WAAA,SAGcwrB,GAAqBC,GAAA,OAAAC,GAAAzrB,MAAC,KAADD,WAAA,SAAA0rB,KA6hBnC,OA7hBmCA,GAAAnB,IAAA9oB,IAAAiD,MAApC,SAAAinB,EAAqC7V,GAAO,IAAAsT,EAAAsB,EAAAkB,EAAA7H,EAAAjoB,EAAA+vB,EAAAC,EAAAC,EAAAC,EAAAC,EAAApB,EAAA9T,EAAA+E,EAAAoQ,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA7I,EAAAC,EAAA6I,EAAArQ,EAAAsQ,EAAAC,EAAAtP,EAAAuP,EAAAC,EAAAC,EAAAC,EAAAC,EAAA7R,EAAA8R,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAlR,GAAAmR,GAAAC,GAAAC,GAAApT,GAAAqT,GAAAC,GAAAC,GAAA/L,GAAAgM,GAAAC,GAAAC,GAAAjL,GAAAC,GAAAiL,GAAAC,GAAAC,GAAAC,GAAAC,GAAA5b,GAAAD,GAAA8b,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAtL,GAAAO,GAAAC,GAAA,OAAA/iB,IAAAI,MAAA,SAAA0tB,GAAA,cAAAA,EAAAvqB,KAAAuqB,EAAA5rB,MAAA,QAClCylB,EAAYtT,EAAQhC,KAAK5R,QACbkR,EAAUnN,aAAaG,KACrC+iB,GAAiBC,EAAWtT,EAAQhC,MAAM,GAC7Cyb,EAAAhE,GACOnC,EAASmG,EAAA5rB,KAAA4rB,EAAAhE,KACRnY,EAAUnN,aAAaY,MAAMC,YAAW,EAAAyoB,EAAAhE,KA6BxCnY,EAAUnN,aAAaY,MAAME,aAAY,GAAAwoB,EAAAhE,KAezCnY,EAAUnN,aAAaY,MAAMG,SAAQ,GAAAuoB,EAAAhE,KAuBrCnY,EAAUnN,aAAaY,MAAMI,KAAI,GAAAsoB,EAAAhE,KAajCnY,EAAUnN,aAAaY,MAAMK,OAAM,GAAAqoB,EAAAhE,KAanCnY,EAAUnN,aAAaY,MAAMM,KAAI,GAAAooB,EAAAhE,KAoBjCnY,EAAUnN,aAAaY,MAAMO,OAAM,IAAAmoB,EAAAhE,KAoBnCnY,EAAUnN,aAAaK,iBAAgB,IAAAipB,EAAAhE,KA0BvCnY,EAAUnN,aAAaM,iBAAgB,IAAAgpB,EAAAhE,KAavCnY,EAAUnN,aAAaY,MAAMQ,KAAI,IAAAkoB,EAAAhE,KAiCjCnY,EAAUnN,aAAaY,MAAMS,YAAW,IAAAioB,EAAAhE,KAQxCnY,EAAUnN,aAAaY,MAAMU,mBAAkB,IAAAgoB,EAAAhE,KAgC/CnY,EAAUnN,aAAaW,aAAY,IAAA2oB,EAAAhE,KA6BnCnY,EAAUnN,aAAaY,MAAMW,kBAAiB,IAAA+nB,EAAAhE,KAe9CnY,EAAUnN,aAAaY,MAAMa,WAAU,IAAA6nB,EAAAhE,KAavCnY,EAAUnN,aAAaY,MAAMY,gBAAe,IAAA8nB,EAAAhE,KA2B5CnY,EAAUnN,aAAaY,MAAMc,gBAAe,IAAA4nB,EAAAhE,KAa5CnY,EAAUnN,aAAaY,MAAMe,iBAAgB,IAAA2nB,EAAAhE,KAa7CnY,EAAUnN,aAAaO,OAAM,IAAA+oB,EAAAhE,KAc7BnY,EAAUnN,aAAaQ,QAAO,IAAA8oB,EAAAhE,KAI9BnY,EAAUnN,aAAaY,MAAMqB,aAAY,IAAAqnB,EAAAhE,KAKzCnY,EAAUnN,aAAaY,MAAMsB,gBAAe,IAAAonB,EAAAhE,KAyD5CnY,EAAUnN,aAAaY,MAAMmB,iBAAgB,IAAAunB,EAAAhE,KAc7CnY,EAAUnN,aAAaY,MAAMoB,yBAAwB,IAAAsnB,EAAAhE,KAgBrDnY,EAAUnN,aAAaS,qBAAoB,IAAA6oB,EAAAhE,KAG3CnY,EAAUnN,aAAaG,IAAG,IAAAmpB,EAAAhE,KAK1BnY,EAAUnN,aAAaY,MAAMgB,eAAc,IAAA0nB,EAAAhE,KAqB3CnY,EAAUnN,aAAaY,MAAMkB,sBAAqB,IAAAwnB,EAAAhE,KAelDnY,EAAUnN,aAAaY,MAAMiB,oBAAmB,IAAAynB,EAAAhE,KAchDnY,EAAUnN,aAAaU,iBAAgB,wBAAA4oB,EAAAvqB,KAAA,GAzgBhC8Q,EAAQhC,KAAKhY,OAAQga,EAAQhC,KAAKhY,KAAK2mB,UACtC3M,EAAQhC,KAAKhY,KAAK2mB,SAAS+M,gBAAkBpc,EAAU7E,UAAUE,SAAS+gB,eAC3E1Z,EAAQhC,KAAKhY,KAAK2mB,SAAS+M,gBAAkBpc,EAAU7E,UAAUM,gBAAgB2gB,cAAc,CAAAD,EAAA5rB,KAAA,eAAA4rB,EAAA9rB,OAAA,iBAGlF,OAAjBqlB,KAAiByG,EAAA5rB,KAAA,GACgByR,EAAgB2V,wBAAuB,QAAhD,GAAlBL,EAAkB6E,EAAAjsB,MACpB+R,EAAuB,CAAFka,EAAA5rB,KAAA,gBAAA4rB,EAAA5rB,KAAA,GACO+mB,EAAmB+E,uBAAsB,QAA/D7D,EAAa2D,EAAAjsB,KACnB2S,GAAUgB,oBAAoB2U,EAAe/E,IAC7CxR,GAAwB,EACxBsU,GAAcvW,EAAUhL,WAAWvB,MAAMyD,kBAAmBshB,EAAc9P,OAAO,eAAAyT,EAAA5rB,KAAA,GAEjE+mB,EAAmBgF,WAAW5Z,EAAQhC,KAAKhY,MAAK,QAAhEioB,EAAOwL,EAAAjsB,KACX2S,GAAUgB,oBAAoB8M,EAASrI,GAEvCiO,IADQ7tB,EAASioB,EAATjoB,MACW2mB,SAAS+M,gBAAkBpc,EAAU7E,UAAUG,SAAS8gB,cACvEpc,EAAUhL,WAAWvB,MAAMuC,aAAegK,EAAUhL,WAAWvB,MAAMwC,eAAgBvN,GAAMyzB,EAAA5rB,KAAA,iBAAA4rB,EAAAvqB,KAAA,GAAAuqB,EAAAI,GAAAJ,EAAA,SAE/Fla,GAAwB,EACpBka,EAAAI,cAAana,EACb0U,GAAmBqF,EAAAI,GAAIvc,EAAUnN,aAAaY,MAAMC,aAEpDsjB,GAAahX,EAAUrI,UAAUlE,MAAMmE,wBAAyB,CAAC4kB,YAAaxc,EAAUnN,aAAaY,MAAMC,YAAa+oB,eAAcN,EAAAI,KACzI,eAAAJ,EAAA9rB,OAAA,4BAAA8rB,EAAAvqB,KAAA,GAAAuqB,EAAA5rB,KAAA,GAKgCyR,EAAgB2V,wBAAuB,QAAhD,OAAlBL,EAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,GACJ+mB,EAAmBoF,YAAYha,EAAQhC,KAAKhY,MAAK,QAAlEioB,EAAOwL,EAAAjsB,KACb2S,GAAUgB,oBAAoB8M,EAASrI,GAC/B5f,EAASioB,EAATjoB,KACR6tB,GAAcvW,EAAUhL,WAAWvB,MAAM+D,OAAQ9O,GAAMyzB,EAAA5rB,KAAA,iBAAA4rB,EAAAvqB,KAAA,GAAAuqB,EAAAQ,GAAAR,EAAA,UAEnDA,EAAAQ,cAAava,EACb0U,GAAmBqF,EAAAQ,GAAI3c,EAAUnN,aAAaY,MAAME,cAEpDgjB,GAAc3W,EAAUnI,WAAWpE,MAAMqE,yBAAwBqkB,EAAAQ,GAAK3c,EAAUnN,aAAaY,MAAME,cACtG,eAAAwoB,EAAA9rB,OAAA,4BAAA8rB,EAAAvqB,KAAA,GAAAuqB,EAAA5rB,KAAA,GAKgCyR,EAAgB2V,wBAAuB,QAAhD,OAAlBL,EAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,GACL+mB,EAAmBsF,QAAQla,EAAQhC,KAAKhY,KAAMga,EAAQhC,KAAKgP,aAAY,QACxC,OAD/CiB,EAAOwL,EAAAjsB,KACb2S,GAAUgB,oBAAoB8M,EAASnI,IAAc2T,EAAA5rB,KAAA,GACrB+mB,EAAmBQ,iBAAgB,QAA7DL,EAAiB0E,EAAAjsB,KACvB2S,GAAUgB,oBAAoB4T,EAAmBjU,GAC3CG,EAAc8T,EAAkB9T,YAC9B+E,EAAUiI,EAAVjI,MAEmB,IAAvB/E,EAAYhZ,OACZ4rB,GAAcvW,EAAUhL,WAAWvB,MAAM+D,OAAQkR,GAEjD6N,GAAcvW,EAAUhL,WAAWvB,MAAM+C,oBAAqBkS,EAAM/d,OAAS,GAAK+d,EAAM,IAC3FyT,EAAA5rB,KAAA,iBAAA4rB,EAAAvqB,KAAA,GAAAuqB,EAAAU,GAAAV,EAAA,UAEGA,EAAAU,cAAaza,EACb0U,GAAmBqF,EAAAU,GAAI7c,EAAUnN,aAAaY,MAAMG,UAEpD+iB,GAAc3W,EAAUnI,WAAWpE,MAAMsE,qBAAoBokB,EAAAU,GAAK7c,EAAUnN,aAAaY,MAAMG,UAClG,eAAAuoB,EAAA9rB,OAAA,4BAAA8rB,EAAAvqB,KAAA,GAAAuqB,EAAA5rB,KAAA,GAKgCyR,EAAgB2V,wBAAuB,QAAhD,OAAlBL,EAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,GACL+mB,EAAmBwF,OAAM,QAAzCnM,EAAOwL,EAAAjsB,KACb6sB,GAAa,CAAC/G,UAAWhW,EAAUhL,WAAWvB,MAAM0C,YAAawa,YAAUwL,EAAA5rB,KAAA,iBAAA4rB,EAAAvqB,KAAA,GAAAuqB,EAAAa,GAAAb,EAAA,UAEvEA,EAAAa,cAAa5a,EACb0U,GAAmBqF,EAAAa,GAAIhd,EAAUnN,aAAaY,MAAMI,MAEpD8iB,GAAc3W,EAAUnI,WAAWpE,MAAMyE,kBAAiBikB,EAAAa,GAAKhd,EAAUnN,aAAaY,MAAMI,MAC/F,eAAAsoB,EAAA9rB,OAAA,4BAAA8rB,EAAAvqB,KAAA,GAAAuqB,EAAA5rB,KAAA,GAKgCyR,EAAgB2V,wBAAuB,QAAhD,OAAlBL,EAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,GACL+mB,EAAmB2F,SAAQ,QAA3CtM,EAAOwL,EAAAjsB,KACb6sB,GAAa,CAAC/G,UAAWhW,EAAUhL,WAAWvB,MAAM0C,YAAawa,YAAUwL,EAAA5rB,KAAA,iBAAA4rB,EAAAvqB,KAAA,GAAAuqB,EAAAe,GAAAf,EAAA,UAEvEA,EAAAe,cAAa9a,EACb0U,GAAmBqF,EAAAe,GAAIld,EAAUnN,aAAaY,MAAMK,QAEpD6iB,GAAc3W,EAAUnI,WAAWpE,MAAM0E,oBAAmBgkB,EAAAe,GAAKld,EAAUnN,aAAaY,MAAMK,QACjG,eAAAqoB,EAAA9rB,OAAA,4BAAA8rB,EAAAvqB,KAAA,GAAAuqB,EAAA5rB,KAAA,IAKgCyR,EAAgB2V,wBAAuB,SAAhD,OAAlBL,EAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,IACL+mB,EAAmB6F,KAAKza,EAAQhC,KAAKhY,MAAK,SAA1DioB,EAAOwL,EAAAjsB,KACb6sB,GAAa,CAAC/G,UAAWhW,EAAUhL,WAAWvB,MAAM2C,YAAaua,YAAUwL,EAAA5rB,KAAA,sBAAA4rB,EAAAvqB,KAAA,IAAAuqB,EAAAiB,GAAAjB,EAAA,YAEvEA,EAAAiB,cAAahb,GAAW,CAAA+Z,EAAA5rB,KAAA,UACxBumB,GAAmBqF,EAAAiB,GAAIpd,EAAUnN,aAAaY,MAAMM,MAAMooB,EAAA5rB,KAAA,mBAAA4rB,EAAAkB,GAEnDxH,GAAYsG,EAAAiB,IAAGjB,EAAA5rB,KAAA4rB,EAAAkB,KACbrd,EAAUnI,WAAWpE,MAAM8E,oBAAmB,uBACsE,OAArHoe,GAAc3W,EAAUnI,WAAWpE,MAAM8E,oBAAqBud,GAAeqG,EAAAiB,IAAKpd,EAAUnN,aAAaY,MAAMM,MAAMooB,EAAA9rB,OAAA,sBAGF,OAAnHsmB,GAAc3W,EAAUnI,WAAWpE,MAAMuE,kBAAmB8d,GAAeqG,EAAAiB,IAAKpd,EAAUnN,aAAaY,MAAMM,MAAMooB,EAAA9rB,OAAA,6BAAA8rB,EAAA9rB,OAAA,6BAAA8rB,EAAAvqB,KAAA,IAAAuqB,EAAA5rB,KAAA,IAQ9FyR,EAAgB2V,wBAAuB,SAAhD,OAAlBL,EAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,IACL+mB,EAAmBgG,OAAO5a,EAAQhC,KAAKhY,MAAK,SAA5DioB,EAAOwL,EAAAjsB,KACb6sB,GAAa,CAAC/G,UAAWhW,EAAUhL,WAAWvB,MAAM2C,YAAaua,YAAUwL,EAAA5rB,KAAA,sBAAA4rB,EAAAvqB,KAAA,IAAAuqB,EAAAoB,GAAApB,EAAA,aAEvEA,EAAAoB,cAAanb,GAAW,CAAA+Z,EAAA5rB,KAAA,UACxBumB,GAAmBqF,EAAAoB,GAAIvd,EAAUnN,aAAaY,MAAMO,QAAQmoB,EAAA5rB,KAAA,mBAAA4rB,EAAAqB,GAErD3H,GAAYsG,EAAAoB,IAAGpB,EAAA5rB,KAAA4rB,EAAAqB,KACbxd,EAAUnI,WAAWpE,MAAM8E,oBAAmB,uBACwE,OAAvHoe,GAAc3W,EAAUnI,WAAWpE,MAAM8E,oBAAqBud,GAAeqG,EAAAoB,IAAKvd,EAAUnN,aAAaY,MAAMO,QAAQmoB,EAAA9rB,OAAA,sBAGA,OAAvHsmB,GAAc3W,EAAUnI,WAAWpE,MAAMwE,oBAAqB6d,GAAeqG,EAAAoB,IAAKvd,EAAUnN,aAAaY,MAAMO,QAAQmoB,EAAA9rB,OAAA,6BAAA8rB,EAAA9rB,OAAA,sBASpE,OAToE8rB,EAAAvqB,KAAA,IAQ7H4e,EAAa9N,EAAQhC,KAAK8P,YAAc,GACxCC,EAAmB/N,EAAQhC,KAAK+P,mBAAoB,EAAK0L,EAAA5rB,KAAA,IACzCyR,EAAgByb,eAAe/a,EAAQhC,KAAKgP,YAAac,EAAYC,GAAiB,SAAtGE,EAAOwL,EAAAjsB,KACb2S,GAAUgB,oBAAoB8M,EAASxG,IAC/BlB,EAAY0H,EAAZ1H,QACRsN,GAAcvW,EAAUhL,WAAWQ,wBAAyB,CAAEyT,YAAWkT,EAAA5rB,KAAA,sBAAA4rB,EAAAvqB,KAAA,IAAAuqB,EAAAuB,IAAAvB,EAAA,aAErEA,EAAAuB,eAAatb,GAAW,CAAA+Z,EAAA5rB,KAAA,UACxBumB,GAAmBqF,EAAAuB,IAAI1d,EAAUnN,aAAaK,kBAAkBipB,EAAA5rB,KAAA,mBAE5DmS,EAAQhC,KAAK8P,YACb+F,GAAcvW,EAAUhL,WAAWQ,wBAAyB,CAAEyT,SAAS,IAC1EkT,EAAAwB,IACM9H,GAAYsG,EAAAuB,KAAGvB,EAAA5rB,KAAA4rB,EAAAwB,MACb3d,EAAUnI,WAAWoC,qBAAoB,uBAC4E,OAAtH0c,GAAc3W,EAAUnI,WAAWoC,qBAAsB6b,GAAeqG,EAAAuB,KAAK1d,EAAUnN,aAAaK,kBAAkBipB,EAAA9rB,OAAA,sBAGI,OAA1HsmB,GAAc3W,EAAUnI,WAAWsC,yBAA0B2b,GAAeqG,EAAAuB,KAAK1d,EAAUnN,aAAaK,kBAAkBipB,EAAA9rB,OAAA,6BAAA8rB,EAAA9rB,OAAA,6BAAA8rB,EAAAvqB,KAAA,IAAAuqB,EAAA5rB,KAAA,IAQhHyR,EAAgB4b,iBAAgB,SAAhDjN,EAAOwL,EAAAjsB,KACb2S,GAAUgB,oBAAoB8M,EAASe,IACvC6E,GAAcvW,EAAUhL,WAAWS,wBAAyBkb,GAASwL,EAAA5rB,KAAA,mBAAA4rB,EAAAvqB,KAAA,IAAAuqB,EAAA0B,IAAA1B,EAAA,WAEjEA,EAAA0B,eAAazb,EACb0U,GAAmBqF,EAAA0B,IAAI7d,EAAUnN,aAAaM,kBAE9CwjB,GAAc3W,EAAUnI,WAAWqC,yBAA0B4b,GAAeqG,EAAA0B,KAAK7d,EAAUnN,aAAaM,kBAC3G,gBAAAgpB,EAAA9rB,OAAA,6BAAA8rB,EAAAvqB,KAAA,IAAAuqB,EAAA5rB,KAAA,IAKgCyR,EAAgB2V,wBAAuB,SACmC,OADrGL,EAAkB6E,EAAAjsB,KAClBga,EAAaxH,EAAQhC,KAAKod,QAAUpb,EAAQhC,KAAKod,OAAOvrB,QAAQyN,EAAUb,aAAa7D,WAAa,EAAC6gB,EAAA5rB,KAAA,IACrF+mB,EAAmByG,KAAK,IAAI3V,GAAQ1F,EAAQhC,KAAKyH,SACzB,IAAI4B,GAAY,CAAEG,gBAAc,SADxEyG,EAAOwL,EAAAjsB,KAEb2S,GAAUgB,oBAAoB8M,EAASrI,GAC/B5f,EAASioB,EAATjoB,KAEJsX,EAAU7E,UAAUM,gBAAgB2gB,gBAAkB1zB,EAAK2mB,SAAS+M,eAAiBlS,EACrFqM,GAAcvW,EAAUhL,WAAWvB,MAAMsC,oBAAqBrN,GAE9D6tB,GAAcvW,EAAUhL,WAAWvB,MAAMuC,aAActN,GAC1DyzB,EAAA5rB,KAAA,mBAEqD,GAFrD4rB,EAAAvqB,KAAA,IAAAuqB,EAAA6B,IAAA7B,EAAA,WAED5F,GAAcvW,EAAUhL,WAAWvB,MAAMyC,eACrCimB,EAAA6B,eAAa5b,GAAW,CAAA+Z,EAAA5rB,KAAA,UACxBumB,GAAmBqF,EAAA6B,IAAIhe,EAAUnN,aAAaY,MAAMQ,MAAMkoB,EAAA5rB,KAAA,mBAAA4rB,EAAA8B,IAEnDpI,GAAYsG,EAAA6B,KAAG7B,EAAA5rB,KAAA4rB,EAAA8B,MACbje,EAAUnI,WAAWpE,MAAMmF,oBAAmB,IAAAujB,EAAA8B,MAG9Cje,EAAUnI,WAAWkC,cAAa,uBAFkF,OAArH4c,GAAc3W,EAAUnI,WAAWpE,MAAMmF,oBAAqBkd,GAAeqG,EAAA6B,KAAKhe,EAAUnN,aAAaY,MAAMQ,MAAMkoB,EAAA9rB,OAAA,sBAGZ,OAAzGsmB,GAAc3W,EAAUnI,WAAWkC,cAAe+b,GAAeqG,EAAA6B,KAAKhe,EAAUnN,aAAaY,MAAMQ,MAAMkoB,EAAA9rB,OAAA,sBAGe,OAAxHsmB,GAAc3W,EAAUnI,WAAWpE,MAAMwF,uBAAwB6c,GAAeqG,EAAA6B,KAAKhe,EAAUnN,aAAaY,MAAMQ,MAAMkoB,EAAA9rB,OAAA,6BAAA8rB,EAAA9rB,OAAA,6BAAA8rB,EAAAvqB,KAAA,IAAAuqB,EAAA5rB,KAAA,IAQnGyR,EAAgB2V,wBAAuB,SAAhD,OAAlBL,EAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,IACrB+mB,EAAmB4G,WAAWxb,EAAQhC,KAAKmP,QAAO,SAAAsM,EAAA5rB,KAAA,mBAAA4rB,EAAAvqB,KAAA,IAAAuqB,EAAAgC,IAAAhC,EAAA,WAExDpG,GAAiB/V,EAAUnN,aAAaY,MAAMS,YAAawO,EAAQhC,KAAKmP,QAAQ,GAAM,gBAAAsM,EAAA9rB,OAAA,6BAAA8rB,EAAAvqB,KAAA,IAAAuqB,EAAA5rB,KAAA,IAKrDyR,EAAgB2V,wBAAuB,SAAhD,OAAlBL,EAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,IACL+mB,EAAmB8G,iBAAiB1b,EAAQhC,KAAKoP,QAAO,SAAxEa,EAAOwL,EAAAjsB,KACb2S,GAAUgB,oBAAoB8M,EAAS9I,GACjCG,EAAW2I,EAAQ3I,SAASqW,KAAI,SAAClW,GACnC,MAAO,CACH+F,GAAI/F,EAAQ+F,GACZpf,KAAMqZ,EAAQrZ,KACdhG,KAAMqf,EAAQrf,KACd4e,YAAaS,EAAQT,YACrByG,OAAQhG,EAAQgG,OAChBC,UAAWjG,EAAQiG,UACnBC,YAAalG,EAAQkG,YACrBC,MAAOnG,EAAQmG,MACfC,aAAcpG,EAAQoG,aACtBG,cAAevG,EAAQuG,cACvBF,SAAUrG,EAAQqG,SAClBC,YAAatG,EAAQsG,gBAG7B8H,GAAcvW,EAAUhL,WAAWvB,MAAM4C,eAAgB,CACrD2R,WAAUE,aAAcyI,EAAQzI,eACjCiU,EAAA5rB,KAAA,mBAAA4rB,EAAAvqB,KAAA,IAAAuqB,EAAAmC,IAAAnC,EAAA,WAECA,EAAAmC,eAAalc,EACb0U,GAAmBqF,EAAAmC,IAAIte,EAAUnN,aAAaY,MAAMU,oBAEpDwiB,GAAc3W,EAAUnI,WAAWpE,MAAMgF,2BAA0B0jB,EAAAmC,IAAKte,EAAUnN,aAAaY,MAAMU,oBACxG,gBAAAgoB,EAAA9rB,OAAA,6BAAA8rB,EAAAvqB,KAAA,IAAAuqB,EAAA5rB,KAAA,IAMgCyR,EAAgB2V,wBAAuB,SAAhD,OAAlBL,EAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,IACL+mB,EAAmB8G,iBAAiB1b,EAAQhC,KAAKoP,QAAO,SAAxEa,EAAOwL,EAAAjsB,KACb2S,GAAUgB,oBAAoB8M,EAAS9I,GACjCG,EAAW2I,EAAQ3I,SAASqW,KAAI,SAAClW,GACnC,MAAO,CACH+F,GAAI/F,EAAQ+F,GACZpf,KAAMqZ,EAAQrZ,KACdhG,KAAMqf,EAAQrf,KACd4e,YAAaS,EAAQT,YACrByG,OAAQhG,EAAQgG,OAChBC,UAAWjG,EAAQiG,UACnBC,YAAalG,EAAQkG,YACrBC,MAAOnG,EAAQmG,MACfC,aAAcpG,EAAQoG,aACtBG,cAAevG,EAAQuG,cACvBF,SAAUrG,EAAQqG,SAClBC,YAAatG,EAAQsG,gBAG7B8H,GAAcvW,EAAUhL,WAAWc,oBAAqB,CACpDkS,WAAUE,aAAcyI,EAAQzI,eACjCiU,EAAA5rB,KAAA,mBAAA4rB,EAAAvqB,KAAA,IAAAuqB,EAAAoC,IAAApC,EAAA,WAEHrF,GAAmBqF,EAAAoC,IAAIve,EAAUnN,aAAaW,cAAc,gBAAA2oB,EAAA9rB,OAAA,6BAAA8rB,EAAAvqB,KAAA,IAAAuqB,EAAA5rB,KAAA,IAO3ByR,EAAgB2V,wBAAuB,SAAhD,OAAlBL,EAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,IACL+mB,EAAmBkH,KAAK9b,EAAQhC,KAAK+d,WAAY/b,EAAQhC,KAAKge,cAAa,SAA3F/N,EAAOwL,EAAAjsB,KACb6sB,GAAa,CAAE/G,UAAWhW,EAAUhL,WAAWvB,MAAMiD,qBAAsBia,YAAWwL,EAAA5rB,KAAA,mBAAA4rB,EAAAvqB,KAAA,IAAAuqB,EAAAwC,IAAAxC,EAAA,WAElFA,EAAAwC,eAAavc,EACb0U,GAAmBqF,EAAAwC,IAAI3e,EAAUnN,aAAaY,MAAMW,mBAEpDuiB,GAAc3W,EAAUnI,WAAWpE,MAAMiF,0BAAyByjB,EAAAwC,IAAK3e,EAAUnN,aAAaY,MAAMW,mBACvG,gBAAA+nB,EAAA9rB,OAAA,6BAAA8rB,EAAAvqB,KAAA,IAAAuqB,EAAA5rB,KAAA,IAKgCyR,EAAgB2V,wBAAuB,SAAhD,OAAlBL,EAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,IACL+mB,EAAmBsH,WAAWlc,EAAQhC,KAAKgI,OAAM,SAAjEiI,EAAOwL,EAAAjsB,KACb6sB,GAAa,CAAE/G,UAAWhW,EAAUhL,WAAWvB,MAAMkD,yBAA0Bga,YAAWwL,EAAA5rB,KAAA,mBAAA4rB,EAAAvqB,KAAA,IAAAuqB,EAAA0C,IAAA1C,EAAA,WAEtFA,EAAA0C,eAAazc,EACb0U,GAAmBqF,EAAA0C,IAAI7e,EAAUnN,aAAaY,MAAMa,YAEpDqiB,GAAc3W,EAAUnI,WAAWpE,MAAMkF,mBAAkBwjB,EAAA0C,IAAK7e,EAAUnN,aAAaY,MAAMa,YAChG,gBAAA6nB,EAAA9rB,OAAA,6BAAA8rB,EAAAvqB,KAAA,IAAAuqB,EAAA5rB,KAAA,IAKgCyR,EAAgB2V,wBAAuB,SAAhD,OAAlBL,EAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,IACL+mB,EAAmBwH,eAAe,IAAI1W,GAAQ1F,EAAQhC,KAAKyH,SAAUzF,EAAQhC,KAAKhY,KAAMga,EAAQhC,KAAKwP,iBAAgB,SAArIS,EAAOwL,EAAAjsB,KACb6sB,GAAa,CAAE/G,UAAWhW,EAAUhL,WAAWvB,MAAM6C,kBAAmBqa,YACpEjO,EAAQhC,KAAKwP,iBACbqG,GAAcvW,EAAUhL,WAAWvB,MAAM+D,OAAQkL,EAAQhC,KAAKhY,MACjEyzB,EAAA5rB,KAAA,mBAKE,GALF4rB,EAAAvqB,KAAA,IAAAuqB,EAAA4C,IAAA5C,EAAA,WAGD5F,GAAcvW,EAAUhL,WAAWvB,MAAM+C,oBAAqB,CAC1DgZ,OAAQxP,EAAUhL,WAAWC,MAAMmnB,kBAEnCD,EAAA4C,eAAa3c,GAAW,CAAA+Z,EAAA5rB,KAAA,UACxBumB,GAAmBqF,EAAA4C,IAAI/e,EAAUnN,aAAaY,MAAMY,iBAAiB8nB,EAAA5rB,KAAA,mBAAA4rB,EAAA6C,IAE9DnJ,GAAYsG,EAAA4C,KAAG5C,EAAA5rB,KAAA4rB,EAAA6C,MACbhf,EAAUnI,WAAWpE,MAAMmF,oBAAmB,uBACiF,OAAhI+d,GAAc3W,EAAUnI,WAAWpE,MAAMmF,oBAAqBkd,GAAeqG,EAAA4C,KAAK/e,EAAUnN,aAAaY,MAAMY,iBAAiB8nB,EAAA9rB,OAAA,sBAGI,OAApIsmB,GAAc3W,EAAUnI,WAAWpE,MAAMsF,wBAAyB+c,GAAeqG,EAAA4C,KAAK/e,EAAUnN,aAAaY,MAAMY,iBAAiB8nB,EAAA9rB,OAAA,6BAAA8rB,EAAA9rB,OAAA,6BAAA8rB,EAAAvqB,KAAA,IAAAuqB,EAAA5rB,KAAA,IAQ/GyR,EAAgB2V,wBAAuB,SAAhD,OAAlBL,GAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,IACL+mB,GAAmB2H,eAAevc,EAAQhC,KAAKhY,MAAK,SAApEioB,GAAOwL,EAAAjsB,KACb6sB,GAAa,CAAE/G,UAAWhW,EAAUhL,WAAWvB,MAAMgD,iBAAkBka,aAAWwL,EAAA5rB,KAAA,mBAAA4rB,EAAAvqB,KAAA,IAAAuqB,EAAA+C,IAAA/C,EAAA,WAE9EA,EAAA+C,eAAa9c,EACb0U,GAAmBqF,EAAA+C,IAAIlf,EAAUnN,aAAaY,MAAMc,iBAEpDoiB,GAAc3W,EAAUnI,WAAWpE,MAAMyF,wBAAuBijB,EAAA+C,IAAKlf,EAAUnN,aAAaY,MAAMc,iBACrG,gBAAA4nB,EAAA9rB,OAAA,6BAAA8rB,EAAAvqB,KAAA,IAAAuqB,EAAA5rB,KAAA,IAKgCyR,EAAgB2V,wBAAuB,SAAhD,OAAlBL,GAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,IACL+mB,GAAmB6H,gBAAgBzc,EAAQhC,KAAKhY,MAAK,SAArEioB,GAAOwL,EAAAjsB,KACb6sB,GAAa,CAAE/G,UAAWhW,EAAUhL,WAAWvB,MAAMgD,iBAAkBka,aAAWwL,EAAA5rB,KAAA,mBAAA4rB,EAAAvqB,KAAA,IAAAuqB,EAAAiD,IAAAjD,EAAA,WAE9EA,EAAAiD,eAAahd,EACb0U,GAAmBqF,EAAAiD,IAAIpf,EAAUnN,aAAaY,MAAMe,kBAEpDmiB,GAAc3W,EAAUnI,WAAWpE,MAAM0F,yBAAwBgjB,EAAAiD,IAAKpf,EAAUnN,aAAaY,MAAMe,kBACtG,gBAAA2nB,EAAA9rB,OAAA,6BAAA8rB,EAAAvqB,KAAA,IAAAuqB,EAAA5rB,KAAA,IAKqByR,EAAgBqd,SAAQ,SAAxC1O,GAAOwL,EAAAjsB,KACb2S,GAAUgB,oBAAoB8M,GAAStG,IAC/BpB,GAA8B0H,GAA9B1H,QAASS,GAAqBiH,GAArBjH,iBACjB6M,GAAcvW,EAAUhL,WAAWM,cAAe,CAAE2T,WAASS,sBAAoByS,EAAA5rB,KAAA,mBAAA4rB,EAAAvqB,KAAA,IAAAuqB,EAAAmD,IAAAnD,EAAA,WAE7EA,EAAAmD,eAAald,EACb0U,GAAmBqF,EAAAmD,IAAItf,EAAUnN,aAAaO,QAE9CujB,GAAc3W,EAAUnI,WAAWyC,gBAAe6hB,EAAAmD,IAAKtf,EAAUnN,aAAaO,QACjF,gBAAA+oB,EAAA9rB,OAAA,sBAK+C,OAApD2R,EAAgBud,cAAc7c,EAAQhC,KAAKgC,SAASyZ,EAAA9rB,OAAA,6BAAA8rB,EAAA5rB,KAAA,IAGnByR,EAAgB2V,wBAAuB,SACvB,OADzBwE,EAAAjsB,KACLsvB,WAAW9c,EAAQhC,KAAKhY,MAAMyzB,EAAA9rB,OAAA,0BAI7CqS,EAAQhC,OAAQgC,EAAQhC,KAAK+e,YAAW,CAAAtD,EAAA5rB,KAAA,iBAAA4rB,EAAA5rB,KAAA,IACPyR,EAAgB2V,wBAAuB,SAAhD,OAAlBL,GAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,IACK+mB,GAAmBQ,iBAAgB,SAA7DL,GAAiB0E,EAAAjsB,KACvB2S,GAAUgB,oBAAoB4T,GAAmBjU,GAC3CG,GAAc8T,GAAkB9T,YAAWwY,EAAAuD,IAAArxB,IAAAoD,KAC5BkS,IAAW,aAAAwY,EAAAwD,IAAAxD,EAAAuD,OAAApzB,KAAE,CAAF6vB,EAAA5rB,KAAA,UAIsF,GAJ3GoX,GAAMwU,EAAAwD,IAAAn2B,MACPd,GAAOib,GAAYgE,IACnBsT,IAAevyB,GAAK+e,UAAW/e,GAAK+e,SAASiF,aAC7CwO,GAAmBxyB,GAAK6mB,gBAAkB7mB,GAAK6mB,eAAeT,kBAAoB9O,EAAUlF,iBAAiBI,WAC7GiU,GAAwB+L,IAAoBxyB,GAAK6mB,gBAAkB7mB,GAAK6mB,eAAeJ,uBACzF8L,GAAc,CAAFkB,EAAA5rB,KAAA,UACZ7H,GAAKk3B,gBAAiB,EAAKzD,EAAA0D,IACpBn3B,GAAK4mB,MAAK6M,EAAA5rB,KAAA4rB,EAAA0D,MACR7f,EAAU7C,WAAWE,UAAS,IAAA8e,EAAA0D,MAW9B7f,EAAU7C,WAAWC,QAAO,IAAA+e,EAAA0D,MAQ5B7f,EAAU7C,WAAWG,aAAY,IAAA6e,EAAA0D,MAQjC7f,EAAU7C,WAAWI,YAAW,2BA1B7B2d,GAAkB,CAAFiB,EAAA5rB,KAAA,UAKf,OAJD0R,GAAwB,EACxBsU,GAAcvW,EAAUhL,WAAWvB,MAAMwD,0BAA2BvO,IAChEymB,IACAoH,GAAcvW,EAAUhL,WAAWvB,MAAMsD,qBAAsBrO,IAClEyzB,EAAA9rB,OAAA,sBAG0D,OAA/DkmB,GAAcvW,EAAUhL,WAAWvB,MAAMwC,eAAgBvN,IAAMyzB,EAAA9rB,OAAA,0BAG3D6qB,GAAkB,CAAFiB,EAAA5rB,KAAA,UAEwD,OADxE0R,GAAwB,EACxBsU,GAAcvW,EAAUhL,WAAWvB,MAAMuD,wBAAyBtO,IAAMyzB,EAAA9rB,OAAA,sBAGf,OAA7DkmB,GAAcvW,EAAUhL,WAAWvB,MAAMuC,aAActN,IAAMyzB,EAAA9rB,OAAA,sBAQ1D,OALHkmB,GAAcvW,EAAUhL,WAAWvB,MAAM6C,kBAAmB,CACxDoR,YAAahf,GAAKyf,QAAQT,YAC1BD,SAAU/e,GAAK+e,SACfD,oBAAqB9e,GAAK6mB,eAAe/H,oBACzCG,OAAQjf,GAAKif,SACdwU,EAAA9rB,OAAA,sBAQA,OALHkmB,GAAcvW,EAAUhL,WAAWvB,MAAM8C,sBAAuB,CAC5DmR,YAAahf,GAAKyf,QAAQT,YAC1BD,SAAU/e,GAAK+e,SACfD,oBAAqB9e,GAAK6mB,eAAe/H,oBACzCG,OAAQjf,GAAKif,SACdwU,EAAA9rB,OAAA,6BAAA8rB,EAAA9rB,OAAA,sBAAA8rB,EAAA5rB,KAAA,0BAAA4rB,EAAA9rB,OAAA,6BAAA8rB,EAAAvqB,KAAA,IAAAuqB,EAAA5rB,KAAA,IAYcyR,EAAgB2V,wBAAuB,SAAhD,OAAlBL,GAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,IACN+mB,GAAmBwI,eAAepd,EAAQhC,KAAKyP,QAAO,SAArEiL,GAAMe,EAAAjsB,KACZ2S,GAAUgB,oBAAoBuX,GAAQjR,IACtCoM,GAAcvW,EAAUhL,WAAWvB,MAAM6D,qBAAsB8jB,IAAQe,EAAA5rB,KAAA,mBAAA4rB,EAAAvqB,KAAA,IAAAuqB,EAAA4D,IAAA5D,EAAA,WAEnEA,EAAA4D,eAAa3d,EACb0U,GAAmBqF,EAAA4D,IAAI/f,EAAUnN,aAAaY,MAAMmB,kBAEpD+hB,GAAcd,GAAYsG,EAAA4D,OAAQ/f,EAAUnI,WAAWpE,MAAM6F,4BAA8B0G,EAAUnI,WAAWpE,MAAM6F,4BAA8B0G,EAAUnI,WAAWpE,MAAM2F,yBAA2B0c,GAAeqG,EAAA4D,KAAK/f,EAAUnN,aAAaY,MAAMmB,kBAC9P,gBAAAunB,EAAA9rB,OAAA,sBAK0C,OAL1C8rB,EAAAvqB,KAAA,IAAAypB,GAK+C3Y,EAAQhC,KAAhD0P,GAAYiL,GAAZjL,aAAcC,GAAagL,GAAbhL,cAAe1I,GAAM0T,GAAN1T,OAAMwU,EAAA5rB,KAAA,IACVyR,EAAgB2V,wBAAuB,SAAhD,OAAlBL,GAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,IACN+mB,GAAmB0I,sBAAsB5P,GAAcC,GAAe1I,IAAO,SAA5FyT,GAAMe,EAAAjsB,KACZ2S,GAAUgB,oBAAoBuX,GAAQrS,IACtCwN,GAAcvW,EAAUhL,WAAWvB,MAAMmD,qBAAsBwkB,IAAQe,EAAA5rB,KAAA,mBAAA4rB,EAAAvqB,KAAA,IAAAuqB,EAAA8D,IAAA9D,EAAA,WAGjEV,GAA2B,IAAI1S,GAAyB,CAC1DE,SAAS,IAEbsN,GAAcvW,EAAUhL,WAAWvB,MAAMmD,qBAAsB6kB,IAA0B,GACzF1F,GAAiB/V,EAAUnN,aAAaY,MAAMoB,yBAA0B4mB,IAA0B,GAAM,gBAAAU,EAAA9rB,OAAA,sBAIpE,OAAxC2R,EAAgBvB,aAAaF,KAAW4b,EAAA9rB,OAAA,sBAI8B,OAJ9BqrB,GAGMhZ,EAAQhC,KAA1CZ,GAAQ4b,GAAR5b,SAAUD,GAAU6b,GAAV7b,WAAY8Q,GAAO+K,GAAP/K,QAC9B3O,EAAgB0O,mBAAmB5Q,GAAUD,GAAY8Q,IAASwL,EAAA9rB,OAAA,sBAKrC,OALqC8rB,EAAAvqB,KAAA,IAKlEqQ,GAAwB,EAAKka,EAAA5rB,KAAA,IACIyR,EAAgB2V,wBAAuB,SAAhD,OAAlBL,GAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,IACN+mB,GAAmB4I,cAAcxd,EAAQhC,KAAKhY,MAAK,SACb,OADrD0yB,GAAMe,EAAAjsB,KACZ2S,GAAUgB,oBAAoBuX,GAAQ7H,IAAqB4I,EAAA5rB,KAAA,IAC3B+mB,GAAmBM,iBAAgB,SAA5CuE,EAAAjsB,KACFqW,cAAczX,OAASkR,EAAUvC,WAAWE,WAC7D4Y,GAAcvW,EAAUhL,WAAWvB,MAAMwD,0BAA2BmkB,GAAO1yB,MAE3E6tB,GAAcvW,EAAUhL,WAAWvB,MAAMuD,wBAAyBokB,GAAO1yB,MAC5EyzB,EAAA5rB,KAAA,mBAAA4rB,EAAAvqB,KAAA,IAAAuqB,EAAAgE,IAAAhE,EAAA,WAEDla,GAAwB,EACpBka,EAAAgE,eAAa/d,EACb0U,GAAmBqF,EAAAgE,IAAIngB,EAAUnN,aAAaY,MAAMgB,gBAEpDkiB,GAAc3W,EAAUnI,WAAWpE,MAAM+F,uBAAsB2iB,EAAAgE,IAAKngB,EAAUnN,aAAaY,MAAMgB,gBACpG,gBAAA0nB,EAAA9rB,OAAA,6BAAA8rB,EAAAvqB,KAAA,IAAAuqB,EAAA5rB,KAAA,IAKgCyR,EAAgB2V,wBAAuB,SAAhD,OAAlBL,GAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,IACN+mB,GAAmB+E,qBAAqB3Z,EAAQhC,KAAKhY,MAAK,SAAzE0yB,GAAMe,EAAAjsB,KACZ2S,GAAUgB,oBAAoBuX,GAAQ3H,IACtCxR,GAAwB,EACxBsU,GAAcvW,EAAUhL,WAAWvB,MAAMyD,kBAAmBkkB,GAAO1S,OAAOyT,EAAA5rB,KAAA,mBAAA4rB,EAAAvqB,KAAA,IAAAuqB,EAAAiE,IAAAjE,EAAA,WAEtEA,EAAAiE,eAAahe,EACb0U,GAAmBqF,EAAAiE,IAAIpgB,EAAUnN,aAAaY,MAAMkB,uBAEpDgiB,GAAc3W,EAAUnI,WAAWpE,MAAMgG,8BAA6B0iB,EAAAiE,IAAKpgB,EAAUnN,aAAaY,MAAMkB,uBAC3G,gBAAAwnB,EAAA9rB,OAAA,6BAAA8rB,EAAAvqB,KAAA,IAAAuqB,EAAA5rB,KAAA,IAKgCyR,EAAgB2V,wBAAuB,SAAhD,OAAlBL,GAAkB6E,EAAAjsB,KAAAisB,EAAA5rB,KAAG,IACN+mB,GAAmB+I,kBAAkB3d,EAAQhC,KAAKhY,MAAK,SAAtE0yB,GAAMe,EAAAjsB,KACZ2S,GAAUgB,oBAAoBuX,GAAQ7H,IACtCgD,GAAcvW,EAAUhL,WAAWvB,MAAMsD,qBAAsBqkB,GAAO1yB,MAAOyzB,EAAA5rB,KAAA,mBAAA4rB,EAAAvqB,KAAA,IAAAuqB,EAAAmE,IAAAnE,EAAA,WAEzEA,EAAAmE,eAAale,EACb0U,GAAmBqF,EAAAmE,IAAItgB,EAAUnN,aAAaY,MAAMiB,qBAEpDiiB,GAAc3W,EAAUnI,WAAWpE,MAAMiG,4BAA2ByiB,EAAAmE,IAAKtgB,EAAUnN,aAAaY,MAAMiB,qBACzG,gBAAAynB,EAAA9rB,OAAA,sBASF,OATE6rB,GAImCxZ,EAAQhC,KAAK6P,UAA/CK,GAAUsL,GAAVtL,WAAYO,GAAM+K,GAAN/K,OAAQC,GAAS8K,GAAT9K,UAC1BpP,EAAgBue,iBAAiB,CAC7B3P,cACAO,UACAC,eACD+K,EAAA9rB,OAAA,6BAAA8rB,EAAA9rB,OAAA,uCAAA8rB,EAAApqB,UAAAwmB,EAAA,iPAMd1rB,MAAA,KAAAD,WAAA,SAGc4zB,GAAoBC,GAAA,OAAAC,GAAA7zB,MAAC,KAADD,WAAA,SAAA8zB,KAkDlC,OAlDkCA,GAAAvJ,IAAA9oB,IAAAiD,MAAnC,SAAAqvB,EAAoCje,GAAO,IAAAke,EAAAC,EAAA3X,EAAAyH,EAAA,OAAAtiB,IAAAI,MAAA,SAAAqyB,GAAA,cAAAA,EAAAlvB,KAAAkvB,EAAAvwB,MAAA,OAAAuwB,EAAA3I,GAC/BzV,EAAQhC,KAAK5R,KAAIgyB,EAAAvwB,KAAAuwB,EAAA3I,KAChBnY,EAAUnN,aAAaC,gBAAe,kBAGmB,GAFpD8tB,EAAW,4OACXC,EAAY,IAAI1f,IAAIuB,EAAQqe,QAC5B7X,EAAM2X,EAAUG,SAAW,KAAOH,EAAUI,UAE9CL,EAAS7P,KAAK7H,GAAM,CAAF4X,EAAAvwB,KAAA,SAGoG,OAFtHwR,EAAcW,EAAQwe,MAAM,IAChBC,UAAY/I,GACxBrC,GAAiB/V,EAAUnN,aAAaC,gBAAiBsuB,GAAuB1e,EAAQhC,KAAK2gB,kBAAkB,GAAOP,EAAAlvB,KAAA,GAAAkvB,EAAAvwB,KAAA,GAE5FyR,EAAgBsf,KAAK5e,EAAQhC,KAAK2gB,iBAAgB,QAAlE1Q,EAAOmQ,EAAA5wB,KACb2S,GAAUgB,oBAAoB8M,EAAStH,IACnCsH,EAAQ7G,kBACRyM,GAAcvW,EAAUhL,WAAWY,oBAAqB,CACpDqT,SAAS,IAEN0H,EAAQnH,UACf+M,GAAcvW,EAAUhL,WAAWO,WAAY,CAC3CmU,iBAAkBiH,EAAQjH,mBAEvBiH,EAAQ/G,cACf2M,GAAcvW,EAAUhL,WAAWO,WAAY,CAC3CqU,cAAe+G,EAAQ/G,gBAG3BqN,KACH6J,EAAAvwB,KAAA,oBAAAuwB,EAAAlvB,KAAA,GAAAkvB,EAAAvE,GAAAuE,EAAA,YAEGA,EAAAvE,cAAana,GAAW,CAAA0e,EAAAvwB,KAAA,SACxBumB,GAAmBgK,EAAAvE,GAAIvc,EAAUnN,aAAaC,iBAAiBguB,EAAAvwB,KAAA,iBAAAuwB,EAAAnE,GAExD9G,GAAYiL,EAAAvE,IAAGuE,EAAAvwB,KAAAuwB,EAAAnE,KACb3c,EAAUnI,WAAWpE,MAAM+E,eAAc,oBAC2E,OAArHme,GAAc3W,EAAUnI,WAAWpE,MAAM+E,eAAgBsd,GAAegL,EAAAvE,IAAKvc,EAAUnN,aAAaC,iBAAiBguB,EAAAzwB,OAAA,oBAGN,OAA/GsmB,GAAc3W,EAAUnI,WAAWwC,eAAgByb,GAAegL,EAAAvE,IAAKvc,EAAUnN,aAAaC,iBAAiBguB,EAAAzwB,OAAA,oBAMvE,OAA5DkxB,OAAOC,oBAAoB,UAAWhB,IAAsBM,EAAAzwB,OAAA,2BAAAywB,EAAAzwB,OAAA,qCAAAywB,EAAA/uB,UAAA4uB,EAAA,qBAMvE9zB,MAAA,KAAAD,WAED,SAASw0B,GAAuBzQ,GAC5BA,EAAUA,GAAW,GACrB,IAAIvlB,EAAM,GAgBV,OAdAgU,EAAgC5P,SAAQ,SAAAiyB,GAChC9Q,EAAQvmB,eAAeq3B,KACvBr2B,EAAIq2B,GAAQ9Q,EAAQ8Q,OAI5BpiB,EAA2C7P,SAAQ,SAAAiyB,GAC/Cx4B,OAAOwI,KAAKkf,GAASnhB,SAAQ,SAAA1F,GACrBA,EAAI43B,WAAWD,KAAUniB,EAAkCqiB,SAAS73B,KACpEsB,EAAItB,GAAO6mB,EAAQ7mB,UAKxBsB,EAGX,SAASw2B,GAAgBjR,EAASkR,EAAajL,EAAWZ,GACtD,IAEI,OADAnT,GAAUgB,oBAAoB8M,EAASkR,IAChC,EACT,MAAO1zB,GAIL,OAHIyoB,GACAD,GAAcC,EAAWzoB,EAAG6nB,IAEzB,GASR,SAAS8L,GAAoBC,GAChC/f,EAAkB+f,EAClBR,OAAOS,iBAAiB,UAAWxB,IAUhC,SAASyB,GAAU3f,GACtByT,GADkCzT,EAAT0T,UAAkB1T,EAAPqO,QAAgBrO,EAAP2T,SAU1C,SAASiM,GAAYhf,GAAuB,IAApB8S,EAAS9S,EAAT8S,UAAW3pB,EAAK6W,EAAL7W,MACtC,GAAIA,aAAiB+V,EACjB0U,GAAoBzqB,EAAO2pB,QAI/B,OAAOA,GACH,KAAKhW,EAAUhL,WAAWK,aACtBshB,GAAc3W,EAAUnI,WAAWwC,eAAgBhO,EAAO2T,EAAUhL,WAAWK,cAC/E,MACJ,KAAK2K,EAAUhL,WAAWM,cACtBqhB,GAAc3W,EAAUnI,WAAWyC,gBAAiBjO,EAAO2T,EAAUhL,WAAWM,eAChF,MACJ,KAAK0K,EAAUhL,WAAWvB,MAAMuC,aAC5B2gB,GAAc3W,EAAUnI,WAAWpE,MAAMwF,uBAAwB5M,EAAO2T,EAAUhL,WAAWvB,MAAMuC,cACnG,MACJ,KAAKgK,EAAUhL,WAAWvB,MAAMsC,oBAC5B4gB,GAAc3W,EAAUnI,WAAWpE,MAAMwF,uBAAwB5M,EAAO2T,EAAUhL,WAAWvB,MAAMsC,qBACnG,MACJ,KAAKiK,EAAUhL,WAAWvB,MAAMwC,eAC5B0gB,GAAc3W,EAAUnI,WAAWpE,MAAMwF,uBAAwB5M,EAAO2T,EAAUhL,WAAWvB,MAAMwC,gBACnG,MACJ,KAAK+J,EAAUhL,WAAWvB,MAAM+D,OAC5Bmf,GAAc3W,EAAUnI,WAAWpE,MAAMsE,qBAAsB1L,EAAO2T,EAAUhL,WAAWvB,MAAM+D,QACjG,MACJ,KAAKwI,EAAUhL,WAAWvB,MAAM6C,kBAC5BqgB,GAAcd,GAAaxpB,KAAW2T,EAAUnI,WAAWpE,MAAM8E,oBAAsByH,EAAUnI,WAAWpE,MAAM8E,oBAAsByH,EAAUnI,WAAWpE,MAAMsF,wBAAyB1M,EAAO2T,EAAUhL,WAAWvB,MAAM6C,mBAC9N,MACJ,KAAK0J,EAAUhL,WAAWvB,MAAM8C,sBAC5BogB,GAAc3W,EAAUnI,WAAWpE,MAAMuF,4BAA6B3M,EAAO2T,EAAUhL,WAAWvB,MAAM8C,uBACxG,MACJ,KAAKyJ,EAAUhL,WAAWvB,MAAM+C,oBAC5BmgB,GAAc3W,EAAUnI,WAAWpE,MAAMqF,2BAA4BzM,EAAO2T,EAAUhL,WAAWvB,MAAM+C,qBACvG,MACJ,KAAKwJ,EAAUhL,WAAWvB,MAAM0C,YAC5BwgB,GAAc3W,EAAUnI,WAAWpE,MAAM2E,oBAAqB/L,EAAO2T,EAAUhL,WAAWvB,MAAM0C,aAChG,MACJ,KAAK6J,EAAUhL,WAAWvB,MAAM2C,YAC5BugB,GAAcd,GAAaxpB,KAAW2T,EAAUnI,WAAWpE,MAAM8E,oBAAsByH,EAAUnI,WAAWpE,MAAM8E,oBAAsByH,EAAUnI,WAAWpE,MAAM4E,oBAAqBhM,EAAO2T,EAAUhL,WAAWvB,MAAM2C,aAC1N,MACJ,KAAK4J,EAAUhL,WAAWvB,MAAMgD,iBAC5BkgB,GAAc3W,EAAUnI,WAAWpE,MAAM6E,sBAAuBjM,EAAO2T,EAAUhL,WAAWvB,MAAMgD,kBAClG,MACJ,KAAKuJ,EAAUhL,WAAWvB,MAAMiD,qBAC5BigB,GAAc3W,EAAUnI,WAAWpE,MAAMiF,0BAA2BrM,EAAO2T,EAAUhL,WAAWvB,MAAMiD,sBACtG,MACJ,KAAKsJ,EAAUhL,WAAWvB,MAAMkD,yBAC5BggB,GAAc3W,EAAUnI,WAAWpE,MAAMkF,mBAAoBtM,EAAO2T,EAAUhL,WAAWvB,MAAMkD,0BAC/F,MACJ,KAAKqJ,EAAUhL,WAAWvB,MAAM8D,YAC5Bof,GAAc3W,EAAUnI,WAAWpE,MAAM8D,YAAalL,EAAO2T,EAAUhL,WAAWvB,MAAM8D,aACxF,MACJ,KAAKyI,EAAUhL,WAAWvB,MAAMgE,gBAC5B,OAAOoe,GAAaxpB,IAChB,KAAK2T,EAAUnI,WAAWpE,MAAMoG,oBAC5B8c,GAAc3W,EAAUnI,WAAWpE,MAAMoG,oBAAqBxN,EAAO2T,EAAUhL,WAAWvB,MAAMgE,iBAChG,MACJ,KAAKuI,EAAUnI,WAAWpE,MAAMmG,sBAC5B+c,GAAc3W,EAAUnI,WAAWpE,MAAMmG,sBAAuBvN,EAAO2T,EAAUhL,WAAWvB,MAAMgE,iBAClG,MACJ,QACIkf,GAAc3W,EAAUnI,WAAWkC,cAAe1N,EAAO2T,EAAUhL,WAAWvB,MAAMgE,iBAE5F,MACJ,QACIof,QAAQxqB,MAAM,2CAA4CO,YAyB/D,SAAemwB,GAAYoF,GAAA,OAAAC,GAAAv1B,MAAC,KAADD,WAiRjC,SAAAw1B,KAAA,OAAAA,GAAAjL,IAAA9oB,IAAAiD,MAjRM,SAAA+wB,EAAA/e,GAAA,IAAA0S,EAAArF,EAAA2R,EAAA9L,EAAAc,EAAAkB,EAAAhR,EAAAC,EAAAC,EAAAC,EAAA4a,EAAAC,EAAAC,EAAAC,EAAAh6B,EAAAi6B,EAAAlL,EAAA9T,EAAAif,EAAA/Z,EAAAC,EAAAJ,EAAA7B,EAAAE,EAAAE,EAAAE,EAAAE,EAAAwb,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA5R,EAAA,OAAAljB,IAAAI,MAAA,SAAA20B,GAAA,cAAAA,EAAAxxB,KAAAwxB,EAAA7yB,MAAA,OAA8BylB,EAAS1S,EAAT0S,UAAWrF,EAAOrN,EAAPqN,QAAO2R,EAAAhf,EAAEkT,mBAAW,IAAA8L,GAAOA,EAAAc,EAAAjL,GAChEnC,EAASoN,EAAA7yB,KAAA6yB,EAAAjL,KACPnY,EAAUhL,WAAWK,aAAY,EAAA+tB,EAAAjL,KASjCnY,EAAUhL,WAAWM,cAAa,EAAA8tB,EAAAjL,KAQlCnY,EAAUhL,WAAWvB,MAAMuC,aAAY,EAAAotB,EAAAjL,KAKvCnY,EAAUhL,WAAWvB,MAAMsC,oBAAmB,GAAAqtB,EAAAjL,KAK9CnY,EAAUhL,WAAWvB,MAAMwC,eAAc,GAAAmtB,EAAAjL,KAezCnY,EAAUhL,WAAWvB,MAAM+D,OAAM,GAAA4rB,EAAAjL,KAMjCnY,EAAUhL,WAAWvB,MAAM6C,kBAAiB,GAAA8sB,EAAAjL,KAY5CnY,EAAUhL,WAAWvB,MAAM8C,sBAAqB,GAAA6sB,EAAAjL,KAYhDnY,EAAUhL,WAAWvB,MAAM+C,oBAAmB,GAAA4sB,EAAAjL,KA6B9CnY,EAAUhL,WAAW3B,QAAO,GAAA+vB,EAAAjL,KAI5BnY,EAAUhL,WAAWvB,MAAM4D,wBAAuB,GAAA+rB,EAAAjL,KAGlDnY,EAAUhL,WAAWvB,MAAM2D,cAAa,GAAAgsB,EAAAjL,KAIxCnY,EAAUhL,WAAWW,kBAAiB,GAAAytB,EAAAjL,KAGtCnY,EAAUhL,WAAWvB,MAAM0C,YAAW,GAAAitB,EAAAjL,KAKtCnY,EAAUhL,WAAWvB,MAAM2C,YAAW,GAAAgtB,EAAAjL,KAWtCnY,EAAUhL,WAAWvB,MAAMgD,iBAAgB,GAAA2sB,EAAAjL,KAkB3CnY,EAAUhL,WAAWvB,MAAMiD,qBAAoB,GAAA0sB,EAAAjL,KAW/CnY,EAAUhL,WAAWvB,MAAMkD,yBAAwB,GAAAysB,EAAAjL,KAUnDnY,EAAUhL,WAAWvB,MAAMoD,mBAAkB,GAAAusB,EAAAjL,KAc7CnY,EAAUhL,WAAWvB,MAAMsD,qBAAoB,GAAAqsB,EAAAjL,KAO/CnY,EAAUhL,WAAWvB,MAAM0D,eAAc,GAAAisB,EAAAjL,KAOzCnY,EAAUhL,WAAWvB,MAAMuD,wBAAuB,GAAAosB,EAAAjL,KAQlDnY,EAAUhL,WAAWvB,MAAMwD,0BAAyB,GAAAmsB,EAAAjL,KAQpDnY,EAAUhL,WAAWvB,MAAMyD,kBAAiB,GAAAksB,EAAAjL,KAQ5CnY,EAAUhL,WAAW9B,iBAAgB,GAAAkwB,EAAAjL,KAQrCnY,EAAUhL,WAAWvB,MAAMiE,mBAAkB,GAAA0rB,EAAAjL,KAK7CnY,EAAUhL,WAAWa,sBAAqB,GAAAutB,EAAAjL,KAmB1CnY,EAAUhL,WAAW7B,iBAAgB,GAAAiwB,EAAAjL,KAUrCnY,EAAUhL,WAAWU,aAAY,mBAlQjC,OALGksB,GAAgBjR,EAASxG,GAAenK,EAAUnI,WAAWwC,eAAgB2F,EAAUhL,WAAWK,gBAClGkhB,GAAcvW,EAAUhL,WAAWK,aAAcsb,EAAS6F,GACtD7F,EAAQ1H,SACRgO,MAEPmM,EAAA/yB,OAAA,mBASA,OALGuxB,GAAgBjR,EAAStG,GAAcrK,EAAUnI,WAAWyC,gBAAiB0F,EAAUhL,WAAWM,gBAClGihB,GAAcvW,EAAUhL,WAAWM,cAAe,CAC9C2T,QAAS0H,EAAQ1H,QACjBS,iBAAkBiH,EAAQjH,kBAC3B8M,GACN4M,EAAA/yB,OAAA,mBAKA,OAFGuxB,GAAgBjR,EAASrI,EAAYtI,EAAUnI,WAAWpE,MAAMwF,uBAAwB+G,EAAUhL,WAAWvB,MAAMuC,eACnHugB,GAAcvW,EAAUhL,WAAWvB,MAAMuC,aAAc2a,EAAQjoB,MAAM,GACxE06B,EAAA/yB,OAAA,oBAKA,OAFGuxB,GAAgBjR,EAASrI,EAAYtI,EAAUnI,WAAWpE,MAAMwF,uBAAwB+G,EAAUhL,WAAWvB,MAAMsC,sBACnHwgB,GAAcvW,EAAUhL,WAAWvB,MAAMsC,oBAAqB4a,EAAQjoB,MAAM,GAC/E06B,EAAA/yB,OAAA,wBAGGuxB,GAAgBjR,EAASrI,EAAYtI,EAAUnI,WAAWpE,MAAMwF,uBAAwB+G,EAAUhL,WAAWvB,MAAMwC,gBAAiB,CAAFmtB,EAAA7yB,KAAA,SACjH,GAAjBmlB,MACIzT,EAAuB,CAAFmhB,EAAA7yB,KAAA,gBAAA6yB,EAAA7yB,KAAA,GACYyR,EAAgB2V,wBAAuB,QAAhD,OAAlBL,EAAkB8L,EAAAlzB,KAAAkzB,EAAA7yB,KAAG,GACC+mB,EAAmB+E,uBAAsB,QAIqD,OAJpH7D,EAAa4K,EAAAlzB,KACnB2S,GAAUgB,oBAAoB2U,EAAe/E,IAC7CxR,GAAwB,EACxBsU,GAAcvW,EAAUhL,WAAWvB,MAAMyD,kBAAmBshB,GAAe,GAC3EjC,GAAcvW,EAAUhL,WAAWvB,MAAMwC,eAAgB0a,EAAQjoB,MAAM,GAAmD06B,EAAA/yB,OAAA,oBAG9HkmB,GAAcvW,EAAUhL,WAAWvB,MAAMwC,eAAgB0a,EAAQjoB,MAAM,GAAmD,eAAA06B,EAAA/yB,OAAA,oBAM7H,OAFGuxB,GAAgBjR,EAASnI,GAAcxI,EAAUnI,WAAWpE,MAAMsE,qBAAsBiI,EAAUhL,WAAWvB,MAAM+D,SACnH+e,GAAcvW,EAAUhL,WAAWvB,MAAM+D,OAAQmZ,EAAQjI,OAAO,GACnE0a,EAAA/yB,OAAA,oBAYA,OARGuxB,GAAgBjR,EAASrJ,EAAmBtH,EAAUnI,WAAWpE,MAAMsF,wBAAyBiH,EAAUhL,WAAWvB,MAAM6C,qBACnHkR,EAAuDmJ,EAAvDnJ,oBAAqBC,EAAkCkJ,EAAlClJ,SAAUC,EAAwBiJ,EAAxBjJ,YAAaC,EAAWgJ,EAAXhJ,OACpD4O,GAAcvW,EAAUhL,WAAWvB,MAAM6C,kBAAmB,CACxDkR,sBACAC,WACAC,cACAC,WACD,IACNyb,EAAA/yB,OAAA,oBAYA,OARGuxB,GAAgBjR,EAASrJ,EAAmBtH,EAAUnI,WAAWpE,MAAMuF,4BAA6BgH,EAAUhL,WAAWvB,MAAM8C,yBACvHiR,EAAuDmJ,EAAvDnJ,oBAAqBC,EAAkCkJ,EAAlClJ,SAAUC,EAAwBiJ,EAAxBjJ,YAAaC,EAAWgJ,EAAXhJ,OACpD4O,GAAcvW,EAAUhL,WAAWvB,MAAM8C,sBAAuB,CAC5DiR,sBACAC,WACAC,cACAC,WACD,IACNyb,EAAA/yB,OAAA,wBAOGuxB,GAAgBjR,EAASrI,EAAYtI,EAAUnI,WAAWpE,MAAMqF,2BAA4BkH,EAAUhL,WAAWvB,MAAM+C,qBAAsB,CAAF4sB,EAAA7yB,KAAA,SAC/H,OAAJ7H,EAASioB,EAATjoB,KAAI06B,EAAA7yB,KAAA,GACqByR,EAAgB2V,wBAAuB,QAAhD,OAAlBL,EAAkB8L,EAAAlzB,KAAAkzB,EAAA7yB,KAAG,GACK+mB,EAAmBQ,iBAAgB,QAC/D8J,GADEnK,EAAiB2L,EAAAlzB,KACgBsT,KAGR,KADrBG,EAAc8T,EAAkB9T,aACtBhZ,OACZ4rB,GAAcvW,EAAUhL,WAAWvB,MAAM+D,OAAQ9O,GAAM,GAChDA,GAAQA,EAAK6mB,gBAAkB7mB,EAAK6mB,eAAeT,kBAAoB9O,EAAUlF,iBAAiBE,gBAEnG4nB,EAAe35B,OAAOoG,OAAOsU,GAAamM,QAAO,SAAC1kB,GAAG,OAAKA,EAAc,WAAM4U,EAAU7E,UAAU9G,mBAAiB1C,MAEzH4kB,GADcqM,EAAatT,QAAUtP,EAAU7C,WAAWG,aAAe0C,EAAUhL,WAAWvB,MAAM6C,kBAAoB0J,EAAUhL,WAAWvB,MAAM8C,sBAC9H,CACjBiR,qBAAsB,IACvB,IAEH+O,GAAcvW,EAAUhL,WAAWvB,MAAM+C,oBAAqB,CAC1DgZ,OAAQ9mB,EAAMA,EAAK8mB,OAAS,OAC7B,IAEV,eAAA4T,EAAA/yB,OAAA,oBAK6D,OAAlEkmB,GAAcvW,EAAUhL,WAAW3B,QAASsd,EAAS6F,GAAa4M,EAAA/yB,OAAA,oBAIsB,OAAxFkmB,GAAcvW,EAAUhL,WAAWvB,MAAM4D,wBAAyBsZ,EAAS6F,GAAa4M,EAAA/yB,OAAA,oBAGV,OAA9EkmB,GAAcvW,EAAUhL,WAAWvB,MAAM2D,cAAeuZ,EAAS6F,GAAa4M,EAAA/yB,OAAA,oBAI/C,OAA/B+nB,GAAsBzH,GAASyS,EAAA/yB,OAAA,oBAK9B,OAFGuxB,GAAgBjR,EAAStN,EAAkBrD,EAAUnI,WAAWpE,MAAM2E,oBAAqB4H,EAAUhL,WAAWvB,MAAM0C,cACtHogB,GAAcvW,EAAUhL,WAAWvB,MAAM0C,YAAawa,EAAS6F,GAClE4M,EAAA/yB,OAAA,oBAUA,OAPOwY,EAA+C8H,EAA/C9H,mBAAoBC,EAA2B6H,EAA3B7H,iBAAkBJ,EAASiI,EAATjI,MAC1CkZ,GAAgBjR,EAAShI,GAAkB3I,EAAUnI,WAAWpE,MAAM4E,oBAAqB2H,EAAUhL,WAAWvB,MAAM2C,cACtHmgB,GAAcvW,EAAUhL,WAAWvB,MAAM2C,YAAa,CAClDyS,qBACAC,mBACAJ,SACD8N,GACN4M,EAAA/yB,OAAA,oBAkBA,OAdOwW,EAKJ8J,EALI9J,kBACJE,EAIA4J,EAJA5J,UACAE,EAGA0J,EAHA1J,iBACAE,EAEAwJ,EAFAxJ,WACAE,EACAsJ,EADAtJ,OAEAua,GAAgBjR,EAAShK,EAAuB3G,EAAUnI,WAAWpE,MAAM6E,sBAAuB0H,EAAUhL,WAAWvB,MAAMgD,mBAC7H8f,GAAcvW,EAAUhL,WAAWvB,MAAMgD,iBAAkB,CACvDoQ,oBACAE,YACAE,mBACAE,aACAE,UACDmP,GACN4M,EAAA/yB,OAAA,oBAWA,OAPGuxB,GAAgBjR,EAAShI,GAAkB3I,EAAUnI,WAAWpE,MAAMiF,0BAA2BsH,EAAUhL,WAAWvB,MAAMiD,wBACpHmS,EAAgD8H,EAAhD9H,mBAAoBC,EAA4B6H,EAA5B7H,iBAAkBJ,EAAUiI,EAAVjI,MAC9C6N,GAAcvW,EAAUhL,WAAWvB,MAAM2C,YAAa,CAClDyS,qBACAC,mBACAJ,UACD,IACN0a,EAAA/yB,OAAA,oBAUA,OANGuxB,GAAgBjR,EAAShI,GAAkB3I,EAAUnI,WAAWpE,MAAMkF,mBAAoBqH,EAAUhL,WAAWvB,MAAMkD,4BAC7GkS,EAAyC8H,EAAzC9H,mBAAoBC,EAAqB6H,EAArB7H,iBAC5ByN,GAAcvW,EAAUhL,WAAWvB,MAAM2C,YAAa,CAClDyS,qBACAC,qBACD,IACNsa,EAAA/yB,OAAA,oBAaA,OATGuxB,GAAgBjR,EAAS4B,MACrB5B,EAAQ8B,OACRkD,GAAiBhF,EAAQ8B,OAEzB9B,EAAQ+B,uBAAyB/B,EAAQhJ,SACnCA,EAASgJ,EAAQhJ,OACjBwb,EAAM9N,KACZkB,GAAcvW,EAAUhL,WAAWvB,MAAMqD,6BAA8B,CAAC6Q,SAAQwb,OAAM3M,KAE7F4M,EAAA/yB,OAAA,oBAOA,OAFGuxB,GAAgBjR,EAAS4C,GAAqBvT,EAAUnI,WAAWpE,MAAMiG,4BAA6BsG,EAAUhL,WAAWvB,MAAMsD,uBACjIwf,GAAcvW,EAAUhL,WAAWvB,MAAMsD,qBAAsB4Z,EAAQjoB,MAAM,GAChF06B,EAAA/yB,OAAA,oBAOA,OAFGuxB,GAAgBjR,EAASsB,GAAqBjS,EAAUnI,WAAWkC,cAAeiG,EAAUhL,WAAWvB,MAAM0D,iBAC7Gof,GAAcvW,EAAUhL,WAAWvB,MAAM0D,eAAgBwZ,GAAS,GACrEyS,EAAA/yB,OAAA,oBAQA,OAHGuxB,GAAgBjR,EAAS4C,GAAsBvT,EAAUnI,WAAWpE,MAAM+F,uBAAwBwG,EAAUhL,WAAWvB,MAAMuD,2BAC7HiL,GAAwB,EACxBsU,GAAcvW,EAAUhL,WAAWvB,MAAMuD,wBAAyB2Z,EAAQjoB,MAAM,IACnF06B,EAAA/yB,OAAA,oBAQA,OAHGuxB,GAAgBjR,EAAS4C,GAAsBvT,EAAUnI,WAAWpE,MAAM+F,uBAAwBwG,EAAUhL,WAAWvB,MAAMwD,6BAC7HgL,GAAwB,EACxBsU,GAAcvW,EAAUhL,WAAWvB,MAAMwD,0BAA2B0Z,EAAQjoB,MAAM,IACrF06B,EAAA/yB,OAAA,oBAQA,OAHGuxB,GAAgBjR,EAAS8C,GAAyBzT,EAAUnI,WAAWpE,MAAMgG,8BAA+BuG,EAAUhL,WAAWvB,MAAMyD,qBACvI+K,GAAwB,EACxBsU,GAAcvW,EAAUhL,WAAWvB,MAAMyD,kBAAmByZ,EAAQjI,OAAO,IAC9E0a,EAAA/yB,OAAA,oBAQA,OAHGuxB,GAAgBjR,EAASU,GAAkBrR,EAAUnI,WAAWsC,yBAA0B6F,EAAUhL,WAAW9B,oBACzGqe,EAAWZ,EAAQY,SACzBgF,GAAcvW,EAAUhL,WAAW9B,iBAAkB,CAAEqe,YAAYiF,IACtE4M,EAAA/yB,OAAA,oBAKqE,OAAtEkmB,GAAcvW,EAAUhL,WAAWvB,MAAMiE,mBAAoBiZ,GAASyS,EAAA/yB,OAAA,oBAgBrE,OAXEuxB,GAAgBjR,EAASiD,GAAyB5T,EAAUnI,WAAW2C,8BAA+BwF,EAAUhL,WAAWa,yBAC1H0gB,GAAcvW,EAAUhL,WAAWa,sBAAuB8a,GACvDA,EAAQ1H,UACH0H,EAAQnH,UACR+M,GAAcvW,EAAUhL,WAAWO,WAAY,CAC3CmU,iBAAkBiH,EAAQjH,kBAC3B8M,GAEHS,OAGXmM,EAAA/yB,OAAA,oBAUA,OAFGuxB,GAAgBjR,EAASe,GAAuB1R,EAAUnI,WAAWqC,yBAA0B8F,EAAUhL,WAAW7B,mBACpHojB,GAAcvW,EAAUhL,WAAW7B,iBAAkBwd,EAAS6F,GACjE4M,EAAA/yB,OAAA,oBAUA,OAFEuxB,GAAgBjR,EAASkB,GAAmB7R,EAAUnI,WAAW0C,4BAA6ByF,EAAUhL,WAAWU,eAClH6gB,GAAcvW,EAAUhL,WAAWU,aAAcib,GACpDyS,EAAA/yB,OAAA,qCAAA+yB,EAAArxB,UAAAswB,QAIZx1B,MAAA,KAAAD","file":"scv-connector-base.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SCVConnectorBase\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SCVConnectorBase\"] = factory();\n\telse\n\t\troot[\"SCVConnectorBase\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : String(i);\n}\nmodule.exports = toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var getPrototypeOf = require(\"./getPrototypeOf.js\");\nvar setPrototypeOf = require(\"./setPrototypeOf.js\");\nvar isNativeFunction = require(\"./isNativeFunction.js\");\nvar construct = require(\"./construct.js\");\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _wrapNativeSuper(Class);\n}\nmodule.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nmodule.exports = toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return e;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var t,\n    e = {},\n    r = Object.prototype,\n    n = r.hasOwnProperty,\n    o = Object.defineProperty || function (t, e, r) {\n      t[e] = r.value;\n    },\n    i = \"function\" == typeof Symbol ? Symbol : {},\n    a = i.iterator || \"@@iterator\",\n    c = i.asyncIterator || \"@@asyncIterator\",\n    u = i.toStringTag || \"@@toStringTag\";\n  function define(t, e, r) {\n    return Object.defineProperty(t, e, {\n      value: r,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), t[e];\n  }\n  try {\n    define({}, \"\");\n  } catch (t) {\n    define = function define(t, e, r) {\n      return t[e] = r;\n    };\n  }\n  function wrap(t, e, r, n) {\n    var i = e && e.prototype instanceof Generator ? e : Generator,\n      a = Object.create(i.prototype),\n      c = new Context(n || []);\n    return o(a, \"_invoke\", {\n      value: makeInvokeMethod(t, r, c)\n    }), a;\n  }\n  function tryCatch(t, e, r) {\n    try {\n      return {\n        type: \"normal\",\n        arg: t.call(e, r)\n      };\n    } catch (t) {\n      return {\n        type: \"throw\",\n        arg: t\n      };\n    }\n  }\n  e.wrap = wrap;\n  var h = \"suspendedStart\",\n    l = \"suspendedYield\",\n    f = \"executing\",\n    s = \"completed\",\n    y = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var p = {};\n  define(p, a, function () {\n    return this;\n  });\n  var d = Object.getPrototypeOf,\n    v = d && d(d(values([])));\n  v && v !== r && n.call(v, a) && (p = v);\n  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n  function defineIteratorMethods(t) {\n    [\"next\", \"throw\", \"return\"].forEach(function (e) {\n      define(t, e, function (t) {\n        return this._invoke(e, t);\n      });\n    });\n  }\n  function AsyncIterator(t, e) {\n    function invoke(r, o, i, a) {\n      var c = tryCatch(t[r], t, o);\n      if (\"throw\" !== c.type) {\n        var u = c.arg,\n          h = u.value;\n        return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) {\n          invoke(\"next\", t, i, a);\n        }, function (t) {\n          invoke(\"throw\", t, i, a);\n        }) : e.resolve(h).then(function (t) {\n          u.value = t, i(u);\n        }, function (t) {\n          return invoke(\"throw\", t, i, a);\n        });\n      }\n      a(c.arg);\n    }\n    var r;\n    o(this, \"_invoke\", {\n      value: function value(t, n) {\n        function callInvokeWithMethodAndArg() {\n          return new e(function (e, r) {\n            invoke(t, n, e, r);\n          });\n        }\n        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(e, r, n) {\n    var o = h;\n    return function (i, a) {\n      if (o === f) throw new Error(\"Generator is already running\");\n      if (o === s) {\n        if (\"throw\" === i) throw a;\n        return {\n          value: t,\n          done: !0\n        };\n      }\n      for (n.method = i, n.arg = a;;) {\n        var c = n.delegate;\n        if (c) {\n          var u = maybeInvokeDelegate(c, n);\n          if (u) {\n            if (u === y) continue;\n            return u;\n          }\n        }\n        if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n          if (o === h) throw o = s, n.arg;\n          n.dispatchException(n.arg);\n        } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n        o = f;\n        var p = tryCatch(e, r, n);\n        if (\"normal\" === p.type) {\n          if (o = n.done ? s : l, p.arg === y) continue;\n          return {\n            value: p.arg,\n            done: n.done\n          };\n        }\n        \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(e, r) {\n    var n = r.method,\n      o = e.iterator[n];\n    if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n    var i = tryCatch(o, e.iterator, r.arg);\n    if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n    var a = i.arg;\n    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n  }\n  function pushTryEntry(t) {\n    var e = {\n      tryLoc: t[0]\n    };\n    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n  }\n  function resetTryEntry(t) {\n    var e = t.completion || {};\n    e.type = \"normal\", delete e.arg, t.completion = e;\n  }\n  function Context(t) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], t.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(e) {\n    if (e || \"\" === e) {\n      var r = e[a];\n      if (r) return r.call(e);\n      if (\"function\" == typeof e.next) return e;\n      if (!isNaN(e.length)) {\n        var o = -1,\n          i = function next() {\n            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n            return next.value = t, next.done = !0, next;\n          };\n        return i.next = i;\n      }\n    }\n    throw new TypeError(_typeof(e) + \" is not iterable\");\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), o(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n    var e = \"function\" == typeof t && t.constructor;\n    return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n  }, e.mark = function (t) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n  }, e.awrap = function (t) {\n    return {\n      __await: t\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {\n    return this;\n  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {\n    void 0 === i && (i = Promise);\n    var a = new AsyncIterator(wrap(t, r, n, o), i);\n    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {\n      return t.done ? t.value : a.next();\n    });\n  }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () {\n    return this;\n  }), define(g, \"toString\", function () {\n    return \"[object Generator]\";\n  }), e.keys = function (t) {\n    var e = Object(t),\n      r = [];\n    for (var n in e) r.push(n);\n    return r.reverse(), function next() {\n      for (; r.length;) {\n        var t = r.pop();\n        if (t in e) return next.value = t, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, e.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(e) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var t = this.tryEntries[0].completion;\n      if (\"throw\" === t.type) throw t.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(e) {\n      if (this.done) throw e;\n      var r = this;\n      function handle(n, o) {\n        return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n      }\n      for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n        var i = this.tryEntries[o],\n          a = i.completion;\n        if (\"root\" === i.tryLoc) return handle(\"end\");\n        if (i.tryLoc <= this.prev) {\n          var c = n.call(i, \"catchLoc\"),\n            u = n.call(i, \"finallyLoc\");\n          if (c && u) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          } else if (c) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n          } else {\n            if (!u) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(t, e) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var o = this.tryEntries[r];\n        if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n          var i = o;\n          break;\n        }\n      }\n      i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n      var a = i ? i.completion : {};\n      return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n    },\n    complete: function complete(t, e) {\n      if (\"throw\" === t.type) throw t.arg;\n      return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n    },\n    finish: function finish(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n      }\n    },\n    \"catch\": function _catch(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.tryLoc === t) {\n          var n = r.completion;\n          if (\"throw\" === n.type) {\n            var o = n.arg;\n            resetTryEntry(r);\n          }\n          return o;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(e, r, n) {\n      return this.delegate = {\n        iterator: values(e),\n        resultName: r,\n        nextLoc: n\n      }, \"next\" === this.method && (this.arg = t), y;\n    }\n  }, e;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _isNativeFunction(fn) {\n  try {\n    return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n  } catch (e) {\n    return typeof fn === \"function\";\n  }\n}\nmodule.exports = _isNativeFunction, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct.js\");\nfunction _construct(t, e, r) {\n  if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n  var o = [null];\n  o.push.apply(o, e);\n  var p = new (t.bind.apply(t, o))();\n  return r && setPrototypeOf(p, r.prototype), p;\n}\nmodule.exports = _construct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (module.exports = _isNativeReflectConstruct = function _isNativeReflectConstruct() {\n    return !!t;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports)();\n}\nmodule.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nexport default {\n    MESSAGE_TYPE: {\n        // Framework Message Types\n        SETUP_CONNECTOR: 'SETUP_CONNECTOR',\n        CONNECTOR_READY: 'CONNECTOR_READY',\n        LOG: 'LOG',\n        TELEPHONY_EVENT_DISPATCHED: 'TELEPHONY_EVENT_DISPATCHED',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        LOGOUT: 'LOGOUT',\n        MESSAGE: 'MESSAGE',\n        DOWNLOAD_VENDOR_LOGS: 'DOWNLOAD_VENDOR_LOGS',\n        AGENT_WORK_EVENT: 'AGENT_WORK_EVENT',\n        GET_CONTACTS: 'GET_CONTACTS',\n\n        // Telephony Message Types: sent from SFDC to Telephony Vendor\n        VOICE: {\n            ACCEPT_CALL: 'ACCEPT_CALL',\n            DECLINE_CALL: 'DECLINE_CALL',\n            END_CALL: 'END_CALL',\n            MUTE: 'MUTE',\n            UNMUTE: 'UNMUTE',\n            HOLD: 'HOLD',\n            RESUME: 'RESUME',\n            DIAL: 'DIAL',\n            SEND_DIGITS: 'SEND_DIGITS',\n            GET_PHONE_CONTACTS: 'GET_PHONE_CONTACTS',\n            SWAP_PARTICIPANTS: 'SWAP_PARTICIPANTS',\n            ADD_PARTICIPANT: 'ADD_PARTICIPANT',\n            CONFERENCE: 'CONFERENCE',\n            PAUSE_RECORDING: 'PAUSE_RECORDING',\n            RESUME_RECORDING: 'RESUME_RECORDING',\n            SUPERVISE_CALL: 'SUPERVISE_CALL',\n            SUPERVISOR_BARGE_IN : 'SUPERVISOR_BARGE_IN',\n            SUPERVISOR_DISCONNECT: 'SUPERVISOR_DISCONNECT',\n            SET_AGENT_CONFIG: 'SET_AGENT_CONFIG',\n            GET_SIGNED_RECORDING_URL: 'GET_SIGNED_RECORDING_URL',\n            WRAP_UP_CALL: 'WRAP_UP_CALL',\n            AGENT_AVAILABLE: 'AGENT_AVAILABLE'\n        }\n    },\n    EVENT_TYPE: {\n        ERROR: 'ERROR',\n        WARNING: 'WARNING',\n        INFO: 'INFO',\n        LOGIN_STARTED: 'LOGIN_STARTED',\n        LOGIN_RESULT: 'LOGIN_RESULT', // info about timeout, error, success etc\n        LOGOUT_RESULT: 'LOGOUT_RESULT',\n        SHOW_LOGIN: 'SHOW_LOGIN',\n        SET_AGENT_STATUS_RESULT: 'SET_AGENT_STATUS_RESULT',\n        GET_AGENT_STATUS_RESULT: 'GET_AGENT_STATUS_RESULT',\n        MESSAGE: 'MESSAGE',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        STATE_CHANGE: 'STATE_CHANGE',\n        REMOTE_CONTROLLER: 'REMOTE_CONTROLLER',\n        SHOW_STORAGE_ACCESS: 'SHOW_STORAGE_ACCESS',\n        STORAGE_ACCESS_RESULT: 'STORAGE_ACCESS_RESULT',\n        GET_CONTACTS_RESULT: 'GET_CONTACTS_RESULT',\n        VOICE: {\n            QUEUED_CALL_STARTED: 'QUEUED_CALL_STARTED',\n            CALL_STARTED: 'CALL_STARTED',\n            CALL_CONNECTED: 'CALL_CONNECTED',\n            CALL_FAILED: 'CALL_FAILED',\n            MUTE_TOGGLE: 'MUTE_TOGGLE',\n            HOLD_TOGGLE: 'HOLD_TOGGLE',\n            PHONE_CONTACTS: 'PHONE_CONTACTS',\n            PARTICIPANT_ADDED: 'PARTICIPANT_ADDED',\n            PARTICIPANT_CONNECTED: 'PARTICIPANT_CONNECTED',\n            PARTICIPANT_REMOVED: 'PARTICIPANT_REMOVED',\n            RECORDING_TOGGLE: 'RECORDING_TOGGLE',\n            PARTICIPANTS_SWAPPED: 'PARTICIPANTS_SWAPPED',\n            PARTICIPANTS_CONFERENCED: 'PARTICIPANTS_CONFERENCED',\n            SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n            UPDATE_AUDIO_STATS: 'UPDATE_AUDIO_STATS',\n            UPDATE_AUDIO_STATS_COMPLETED: 'UPDATE_AUDIO_STATS_COMPLETED',\n            SUPERVISOR_BARGED_IN: 'SUPERVISOR_BARGED_IN',\n            SUPERVISOR_CALL_STARTED : 'SUPERVISOR_CALL_STARTED',\n            SUPERVISOR_CALL_CONNECTED: 'SUPERVISOR_CALL_CONNECTED',\n            SUPERVISOR_HANGUP : 'SUPERVISOR_HANGUP',\n            CALL_BARGED_IN : 'CALL_BARGED_IN',\n            WRAP_UP_ENDED: 'WRAP_UP_ENDED',\n            AFTER_CALL_WORK_STARTED: 'AFTER_CALL_WORK_STARTED',\n            AGENT_CONFIG_UPDATED: 'AGENT_CONFIG_UPDATED',\n            AGENT_ERROR: 'AGENT_ERROR',\n            HANGUP: 'HANGUP',\n            SOFTPHONE_ERROR: 'SOFTPHONE_ERROR',\n            SHOW_TRANSFER_VIEW: 'SHOW_TRANSFER_VIEW'\n        }\n    },\n    INFO_TYPE: {\n        VOICE: {\n            CAN_NOT_ACCEPT_THE_CALL: 'CAN_NOT_ACCEPT_THE_CALL'\n        }\n    },\n    ERROR_TYPE: {\n        VOICE: {\n            CAN_NOT_DECLINE_THE_CALL: 'CAN_NOT_DECLINE_THE_CALL',\n            CAN_NOT_END_THE_CALL: 'CAN_NOT_END_THE_CALL',\n            CAN_NOT_HOLD_CALL: 'CAN_NOT_HOLD_CALL',\n            CAN_NOT_RESUME_CALL: 'CAN_NOT_RESUME_CALL',\n            CAN_NOT_MUTE_CALL: 'CAN_NOT_MUTE_CALL',\n            CAN_NOT_UNMUTE_CALL: 'CAN_NOT_UNMUTE_CALL',\n            CAN_NOT_TOGGLE_MUTE: 'CAN_NOT_TOGGLE_MUTE',\n            CAN_NOT_TOGGLE_HOLD: 'CAN_NOT_TOGGLE_HOLD',\n            CAN_NOT_TOGGLE_RECORD: 'CAN_NOT_TOGGLE_RECORD',\n            INVALID_PARTICIPANT: 'INVALID_PARTICIPANT',\n            INVALID_PARAMS: 'INVALID_PARAMS',\n            CAN_NOT_GET_PHONE_CONTACTS: 'CAN_NOT_GET_PHONE_CONTACTS',\n            CAN_NOT_SWAP_PARTICIPANTS: 'CAN_NOT_SWAP_PARTICIPANTS',\n            CAN_NOT_CONFERENCE: 'CAN_NOT_CONFERENCE',\n            INVALID_DESTINATION: 'INVALID_DESTINATION',\n            INVALID_PHONE_NUMBER: 'INVALID_PHONE_NUMBER',\n            CAN_NOT_HANGUP_PARTICIPANT: 'CAN_NOT_HANGUP_PARTICIPANT',\n            CAN_NOT_ADD_PARTICIPANT: 'CAN_NOT_ADD_PARTICIPANT',\n            CAN_NOT_CONNECT_PARTICIPANT: 'CAN_NOT_CONNECT_PARTICIPANT',\n            CAN_NOT_START_THE_CALL: 'CAN_NOT_START_THE_CALL',\n            CAN_NOT_PAUSE_RECORDING: 'CAN_NOT_PAUSE_RECORDING',\n            CAN_NOT_RESUME_RECORDING: 'CAN_NOT_RESUME_RECORDING',\n            CAN_NOT_SET_AGENT_CONFIG: 'CAN_NOT_SET_AGENT_CONFIG',\n            CAN_NOT_SET_CAPABILITIES: 'CAN_NOT_SET_CAPABILITIES',\n            CAN_NOT_UPDATE_PHONE_NUMBER: 'CAN_NOT_UPDATE_PHONE_NUMBER',\n            CAN_NOT_GET_SIGNED_RECORDING_URL: 'CAN_NOT_GET_SIGNED_RECORDING_URL',\n            CAN_NOT_SUPERVISE_CALL : 'CAN_NOT_SUPERVISE_CALL',\n            CAN_NOT_DISCONNECT_SUPERVISOR : 'CAN_NOT_DISCONNECT_SUPERVISOR',\n            CAN_NOT_BARGE_IN_SUPERVISOR: 'CAN_NOT_BARGE_IN_SUPERVISOR',\n            CAN_NOT_BARGE_IN_CALL: 'CAN_NOT_BARGE_IN_CALL',\n            AGENT_ERROR: 'AGENT_ERROR',\n            MICROPHONE_NOT_SHARED: 'MICROPHONE_NOT_SHARED',\n            UNSUPPORTED_BROWSER: 'UNSUPPORTED_BROWSER'\n        },\n        CUSTOM_ERROR: 'CUSTOM_ERROR',\n        GENERIC_ERROR: 'GENERIC_ERROR',\n        AUTHENTICATION_ERROR: 'AUTHENTICATION_ERROR',\n        INVALID_AGENT_STATUS: 'INVALID_AGENT_STATUS',\n        CAN_NOT_GET_AGENT_STATUS: 'CAN_NOT_GET_AGENT_STATUS',\n        CAN_NOT_SET_AGENT_STATUS: 'CAN_NOT_SET_AGENT_STATUS',\n        LOGIN_REQUIRED: 'LOGIN_REQUIRED',\n        CAN_NOT_LOG_IN: 'CAN_NOT_LOG_IN',\n        CAN_NOT_LOG_OUT: 'CAN_NOT_LOG_OUT',\n        INVALID_STATE_CHANGE_RESULT: 'INVALID_STATE_CHANGE_RESULT',\n        INVALID_STORAGE_ACCESS_RESULT: 'INVALID_STORAGE_ACCESS_RESULT'\n    },\n    AGENT_STATUS: {\n        ONLINE: 'Online',\n        OFFLINE: 'Offline',\n        ACW : 'AfterCallWork',\n        CALLBACK_MISSED_OR_REJECTED: 'CallbackMissedOrRejected' // Used only for Amazon; workaround for https://github.com/amazon-connect/amazon-connect-streams/issues/344\n    },\n    PARTICIPANT_TYPE: {\n        AGENT: 'Agent',\n        INITIAL_CALLER: 'Initial_Caller',\n        THIRD_PARTY: 'Third_Party',\n        SUPERVISOR: 'Supervisor'\n    },\n    CALL_TYPE: {\n        INBOUND: 'Inbound',\n        OUTBOUND: 'Outbound',\n        CALLBACK: 'Callback',\n        ADD_PARTICIPANT: 'AddParticipant',\n        TRANSFER:'Transfer',\n        INTERNAL_CALL: 'InternalCall',\n        DIALED_CALLBACK: 'DialedCallback'\n    },\n    DIALER_TYPE: {\n        OUTBOUND_PREVIEW: 'OutboundPreview',\n        NONE: 'None'\n    },\n    CONTACT_TYPE: {\n        PHONEBOOK: 'PhoneBook',\n        QUEUE: 'Queue',\n        PHONENUMBER: 'PhoneNumber',\n        AGENT: 'Agent',\n        FLOW: 'Flow'\n    },\n    AGENT_CONFIG_TYPE: {\n        SHOW_AGENT_SETTINGS: 'SHOW_AGENT_SETTINGS',\n        PHONES: 'PHONES',\n        SELECTED_PHONE: 'SELECTED_PHONE'\n    },\n    CAPABILITIES_TYPE: {\n        MUTE: 'MUTE',\n        RECORD: 'RECORD',\n        MERGE: 'MERGE',\n        SWAP: 'SWAP',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        DEBUG_ENABLED: 'DEBUG_ENABLED',\n        CONTACT_SEARCH: 'CONTACT_SEARCH',\n        VENDOR_PROVIDED_AVAILABILITY: 'VENDOR_PROVIDED_AVAILABILITY',\n        VENDOR_PROVIDED_QUEUE_WAIT_TIME: 'VENDOR_PROVIDED_QUEUE_WAIT_TIME',\n        SUPERVISOR_LISTEN_IN: 'SUPERVISOR_LISTEN_IN',\n        SUPERVISOR_BARGE_IN: 'SUPERVISOR_BARGE_IN',\n        MOS: 'MOS',\n        BLIND_TRANSFER: 'BLIND_TRANSFER',\n        TRANSFER_TO_OMNI_FLOW: 'TRANSFER_TO_OMNI_FLOW',\n        PENDING_STATUS_CHANGE: 'PENDING_STATUS_CHANGE',\n        PHONEBOOK: 'PHONEBOOK'\n    },\n    CALL_STATE: {\n        RINGING: 'ringing',\n        CONNECTED: 'connected',\n        TRANSFERRING: 'transferring',\n        TRANSFERRED: 'transferred',\n        ENDED: 'ended'\n    },\n    PHONE_TYPE: {\n        DESK_PHONE: 'DESK_PHONE',\n        SOFT_PHONE: 'SOFT_PHONE'\n    },\n    HANGUP_REASON: {\n        PHONE_CALL_ERROR: \"error\",\n        PHONE_CALL_ENDED: \"ended\"\n    },\n    AGENT_AVAILABILITY: {\n        AVAILABLE: \"AVAILABLE\",\n        BUSY: \"BUSY\",\n        OFFLINE: \"OFFLINE\"\n    },\n    REMOVE_PARTICIPANT_VARIANT: {\n        ALWAYS : 'ALWAYS',\n        NEVER: 'NEVER',\n        ALWAYS_EXCEPT_ON_HOLD: 'ALWAYS_EXCEPT_ON_HOLD'\n    },\n    LOG_LEVEL: {\n        ERROR: \"ERROR\",\n        INFO: \"INFO\"\n    },\n    LOG_SOURCE: {\n        SYSTEM: \"SYSTEM\",\n        PARTNER: \"PARTNER\"\n    },\n    CONTACTS_FILTER_TYPES: {\n        AGENT: \"AGENT\",\n        QUEUE: \"QUEUE\",\n        CONTACT: \"CONTACT\",\n        DIRECTORY: \"DIRECTORY\",\n        FLOW: \"FLOW\",\n        AVAILABLE: \"AVAILABLE\"\n    },\n    WORK_EVENT: {\n        ASSIGNED: 'ASSIGNED',\n        ACCEPTED: 'ACCEPTED',\n        DECLINED: 'DECLINED',\n        COMPLETED: 'COMPLETED',\n        CLOSED: 'CLOSED'\n    },\n    DIAL_OPTIONS: {\n        CALLBACK: \"isCallback=true\"\n    }\n};\n\n/**\n * Fields in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS = [\n    \"/internalNameLabel\",\n    \"/reqGeneralInfo/reqAdapterUrl\",\n    \"/reqGeneralInfo/reqVendorInfoApiName\",\n    \"isACWAllowed\",\n    \"isHVSEnabled\",\n    \"orgDomainName\",\n    \"phoneServiceChannelId\",\n    \"telephonySettingsComponentFqn\"\n];\n\n/**\n * Fields that starts with string in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH = [\n    \"/reqHvcc\"\n];\n\n/**\n * Fields in the connector configuration that are NOT logged. \n */\nexport const CONNECTOR_CONFIG_EXCEPTION_FIELDS = [\n    \"/reqHvcc/reqTelephonyIntegrationCertificate\"\n];\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { downloadData } from './downloadData.js';\nimport constants from './constants';\n\n//The max size of the logs in # of characaters\nconst MAX_LOGS_SIZE = 1.5e7/2; //15 MB or 7.5M characters\n\nconst _strify = obj => (typeof obj === 'string') ? obj : JSON.stringify(obj);\n\nlet LOGS_SIZE = 0;\nlet logs = [];\n\nfunction _log(logLevel, logMessage, logSource) {\n    if(!logMessage) {\n        throw new Error(\"Log Message required\");\n    }\n    logLevel  = logLevel  || constants.LOG_LEVEL.INFO;\n    logSource = logSource || constants.LOG_SOURCE.PARTNER;\n\n    const logStr = [new Date().toISOString(), _strify(logLevel), _strify(logSource), `${_strify(logMessage)}\\n`].join(\"|\");\n    \n    //If logs size is greater than max size, empty it.\n    if(LOGS_SIZE + logStr.length >= MAX_LOGS_SIZE) {\n        logs = []; \n        LOGS_SIZE = 0;\n    }\n    LOGS_SIZE += logStr.length;\n    logs.push(logStr);\n}\n\n/**\n * Log a message at a custom level.\n * @param {object} logMessage\n * @param {string} logLevel \n * @param {string} [logSource]\n */\nexport function log(logMessage, logLevel, logSource) {\n    _log(logLevel, logMessage, logSource);\n}\n\n/**\n * \n * @returns a deep copy of the logs array\n */\nexport function getLogs() {\n    return JSON.parse(JSON.stringify(logs));\n}\n\n/**\n * Download the logs as a file\n */\nexport function downloadLogs() {\n    downloadData(logs.join(''), `log-${new Date().getTime()}.txt`, 'text/plain');\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * Download data as a file.\n * @param {object} data \n * @param {string} fileName \n * @param {string} fileType\n */\n export function downloadData(data, fileName, fileType) {\n    if(!document || !data) return;\n    \n    const dataStr = (typeof data === 'string') ? data : JSON.stringify(data);\n    const file = new Blob([dataStr], {type: fileType});\n    let a = document.createElement(\"a\") \n    const blobURL = URL.createObjectURL(file);\n    a.download = fileName;\n    a.href = blobURL;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(blobURL);\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { downloadLogs } from './logger.js';\n\nexport const Constants = {\n    /**\n    * @enum {string}\n    */\n    EVENT_TYPE: {\n        VOICE: {\n            CALL_STARTED: constants.EVENT_TYPE.VOICE.CALL_STARTED,\n            QUEUED_CALL_STARTED: constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED,\n            CALL_CONNECTED: constants.EVENT_TYPE.VOICE.CALL_CONNECTED,\n            HANGUP: constants.EVENT_TYPE.VOICE.HANGUP,\n            MUTE_TOGGLE: constants.EVENT_TYPE.VOICE.MUTE_TOGGLE,\n            HOLD_TOGGLE: constants.EVENT_TYPE.VOICE.HOLD_TOGGLE,\n            RECORDING_TOGGLE: constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE,\n            PARTICIPANTS_SWAPPED: constants.EVENT_TYPE.VOICE.PARTICIPANTS_SWAPPED,\n            PARTICIPANTS_CONFERENCED: constants.EVENT_TYPE.VOICE.PARTICIPANTS_CONFERENCED,\n            PARTICIPANT_ADDED: constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED, \n            PARTICIPANT_CONNECTED: constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED,\n            PARTICIPANT_REMOVED: constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED,\n            AFTER_CALL_WORK_STARTED: constants.EVENT_TYPE.VOICE.AFTER_CALL_WORK_STARTED,\n            WRAP_UP_ENDED: constants.EVENT_TYPE.VOICE.WRAP_UP_ENDED,\n            AGENT_ERROR: constants.EVENT_TYPE.VOICE.AGENT_ERROR,\n            SOFTPHONE_ERROR: constants.EVENT_TYPE.VOICE.SOFTPHONE_ERROR,\n            UPDATE_AUDIO_STATS: constants.EVENT_TYPE.VOICE.UPDATE_AUDIO_STATS,\n            SUPERVISOR_BARGED_IN: constants.EVENT_TYPE.VOICE.SUPERVISOR_BARGED_IN,\n            SUPERVISOR_CALL_STARTED : constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_STARTED,\n            SUPERVISOR_CALL_CONNECTED: constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_CONNECTED,\n            SUPERVISOR_HANGUP : constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP,\n            SHOW_TRANSFER_VIEW: constants.EVENT_TYPE.VOICE.SHOW_TRANSFER_VIEW\n        },\n        LOGIN_RESULT: constants.EVENT_TYPE.LOGIN_RESULT,\n        LOGOUT_RESULT: constants.EVENT_TYPE.LOGOUT_RESULT,\n        MESSAGE: constants.EVENT_TYPE.MESSAGE,\n        SET_AGENT_STATUS: constants.EVENT_TYPE.SET_AGENT_STATUS,\n        GET_AGENT_STATUS: constants.EVENT_TYPE.GET_AGENT_STATUS,\n        STATE_CHANGE: constants.EVENT_TYPE.STATE_CHANGE,\n        STORAGE_ACCESS_RESULT: constants.EVENT_TYPE.STORAGE_ACCESS_RESULT,\n        GET_CONTACTS_RESULT: constants.EVENT_TYPE.GET_CONTACTS_RESULT\n    },\n    /**\n    * @enum {string}\n    */\n    ERROR_TYPE: {\n        VOICE: {\n            INVALID_PARTICIPANT: constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT,\n            INVALID_DESTINATION: constants.ERROR_TYPE.VOICE.INVALID_DESTINATION,\n            CAN_NOT_UPDATE_PHONE_NUMBER: constants.ERROR_TYPE.VOICE.CAN_NOT_UPDATE_PHONE_NUMBER,\n            INVALID_PARAMS: constants.ERROR_TYPE.VOICE.INVALID_PARAMS\n        },\n        GENERIC_ERROR: constants.ERROR_TYPE.GENERIC_ERROR,\n        INVALID_AGENT_STATUS: constants.ERROR_TYPE.INVALID_AGENT_STATUS\n    },\n    /**\n    * @enum {string}\n    */\n    AGENT_STATUS: { ...constants.AGENT_STATUS },\n    /**\n    * @enum {string}\n    */\n    PARTICIPANT_TYPE: { ...constants.PARTICIPANT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_TYPE: { ...constants.CALL_TYPE },\n    /**\n    * @enum {string}\n    */\n    DIALER_TYPE: { ...constants.DIALER_TYPE },\n    /**\n    * @enum {string}\n    */\n    CONTACT_TYPE: { ...constants.CONTACT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_STATE: { ...constants.CALL_STATE },\n    /**\n    * @enum {string}\n    */\n    HANGUP_REASON: { ...constants.HANGUP_REASON },\n    /**\n    * @enum {string}\n    */\n    PHONE_TYPE: { ...constants.PHONE_TYPE },\n    /**\n     * @enum {String}\n     */\n    AGENT_AVAILABILITY: { ...constants.AGENT_AVAILABILITY },\n    /**\n     * @enum (String)\n     */\n    REMOVE_PARTICIPANT_VARIANT: { ...constants.REMOVE_PARTICIPANT_VARIANT },\n    /**\n     * @enum {String}\n     */\n    LOG_LEVEL: { ...constants.LOG_LEVEL },\n    /**\n     * @enum {String}\n     */\n    CONTACTS_FILTER_TYPES: { ...constants.CONTACTS_FILTER_TYPES },\n    /**\n     * @enum {String}\n     */\n    WORK_EVENT: { ...constants.WORK_EVENT }\n};\n\n/**\n * Class representing a Custom Error\n */\nexport class CustomError extends Error {\n    /**\n     * Custom error\n     * @param {object} param\n     * @param {String} param.labelName\n     * @param {String} param.namespace\n     * @param {String} [param.message]\n     */\n    constructor({ labelName, namespace, message }) {\n        super(message);\n\n        Validator.validateString(labelName);\n        Validator.validateString(namespace);\n        if (message) {\n            Validator.validateString(message);\n        }\n        this.labelName = labelName;\n        this.namespace = namespace;\n        this.message = message;\n    }\n}\n\n/**\n * Class representing a Phone type\n */\n export class Phone {\n    /**\n     * Create Phone\n     * @param {object} param\n     * @param {PHONE_TYPE} param.type\n     * @param {string} [param.number]\n     */\n    constructor({ type, number}) {\n        Validator.validateEnum(type, Object.values(constants.PHONE_TYPE));\n        if(number) {\n            Validator.validateString(number);\n        }\n        this.type = type;\n        this.number = number;\n    }\n}\n\n/**\n * Class representing result type for mute() & unmute()\n */\nexport class MuteToggleResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {boolean} param.isMuted\n     */\n    constructor({ isMuted }) {\n        this.isMuted = isMuted;\n    }\n}\n\n/**\n * Class representing result type for getActiveCalls()\n */\nexport class ActiveCallsResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {PhoneCall[]} [param.activeCalls]\n     */\n    constructor({ activeCalls = [] }) {\n        if (activeCalls.length > 0) {\n            activeCalls.forEach(activeCall => {\n                Validator.validateClassObject(activeCall, PhoneCall);\n            });\n        }\n        this.activeCalls = activeCalls;\n    }\n}\n\n/**\n * Class representing result type for getCapabilities()\n */\nexport class CapabilitiesResult {\n    /**\n     * Create CapabilitiesResult\n     * @param {object} param\n     * @param {boolean} [param.hasMute]\n     * @param {boolean} [param.hasRecord]\n     * @param {boolean} [param.hasMerge]\n     * @param {boolean} [param.hasSwap]\n     * @param {boolean} [param.hasSignedRecordingUrl]\n     * @param {boolean} [param.debugEnabled]\n     * @param {boolean} [param.hasContactSearch] True if getPhoneContacts uses the 'contain' filter\n     * @param {boolean} [param.hasAgentAvailability] True if getPhoneContacts also provides agent availability, false if Salesforce provides it.\n     * @param {boolean} [param.hasQueueWaitTime] True if getPhoneContacts also provides estimated queue wait time, false if Salesforce provides it.\n     * @param {boolean} [param.supportsMos] True if vendor support MOS\n     * @param {boolean} [param.hasSupervisorListenIn] True if vendor supports supervisor listening  to a ongoing call\n     * @param {boolean} [param.hasSupervisorBargeIn] True if vendor supports Supervisor  barging into a ongoing call\n     * @param {boolean} [param.hasBlindTransfer] True if vendor supports blind transfers\n     * @param {boolean} [param.hasBlindTransfer] True if vendor supports transfer to omni flows\n     * @param {boolean} [param.hasPendingStatusChange] True if vendor supports Pending Status Change\n     * @param {boolean} [param.hasPhoneBook] True if vendor supports the phoneBook UI\n     */\n     constructor({ hasMute = true, hasRecord = true, hasMerge = true, hasSwap = true, hasSignedRecordingUrl = false, debugEnabled = true, hasContactSearch = false, hasAgentAvailability = false, hasQueueWaitTime = false, supportsMos = false, hasSupervisorListenIn = false, hasSupervisorBargeIn = false, hasBlindTransfer = false, hasTransferToOmniFlow = false, hasPendingStatusChange=false, hasPhoneBook=false }) {\n        Validator.validateBoolean(hasMute);\n        Validator.validateBoolean(hasRecord);\n        Validator.validateBoolean(hasMerge);\n        Validator.validateBoolean(hasSwap);\n        Validator.validateBoolean(hasSignedRecordingUrl);\n        Validator.validateBoolean(debugEnabled);\n        Validator.validateBoolean(hasContactSearch);\n        Validator.validateBoolean(hasAgentAvailability);\n        Validator.validateBoolean(hasQueueWaitTime);\n        Validator.validateBoolean(supportsMos);\n        Validator.validateBoolean(hasSupervisorListenIn);\n        Validator.validateBoolean(hasSupervisorBargeIn);\n        Validator.validateBoolean(hasBlindTransfer);\n        Validator.validateBoolean(hasTransferToOmniFlow);\n        Validator.validateBoolean(hasPendingStatusChange);\n        Validator.validateBoolean(hasPhoneBook);\n\n        this.hasMute = hasMute;\n        this.hasRecord = hasRecord;\n        this.hasMerge = hasMerge;\n        this.hasSwap = hasSwap;\n        this.hasSignedRecordingUrl = hasSignedRecordingUrl;\n        this.debugEnabled = debugEnabled;\n        this.hasContactSearch = hasContactSearch;\n        this.hasAgentAvailability = hasAgentAvailability;\n        this.hasQueueWaitTime = hasQueueWaitTime;\n        this.supportsMos = supportsMos;\n        this.hasSupervisorListenIn = hasSupervisorListenIn;\n        this.hasSupervisorBargeIn = hasSupervisorBargeIn;\n        this.hasBlindTransfer = hasBlindTransfer;\n        this.hasTransferToOmniFlow = hasTransferToOmniFlow;\n        this.hasPendingStatusChange = hasPendingStatusChange;\n        this.hasPhoneBook = hasPhoneBook;\n    }\n}\n\n/**\n * Class representing result type for getAgentConfig()\n */\nexport class AgentConfigResult {\n    /**\n     * Create AgentConfigResult\n     * @param {object} param\n     * @param {Phone[]} [param.phones]\n     * @param {Phone} [param.selectedPhone]\n     */\n    constructor({ phones = [constants.PHONE_TYPE.SOFT_PHONE], selectedPhone = new Phone({type: constants.PHONE_TYPE.SOFT_PHONE}) }) {\n        Validator.validateClassObject(phones, Array);\n        Validator.validateClassObject(selectedPhone, Phone);\n\n        this.phones = phones;\n        this.selectedPhone = selectedPhone;\n    }\n}\n\n/**\n * Class representing AgentConfig type for setAgentConfig()\n */\nexport class AgentConfig {\n    /**\n     * Create AgentConfig\n     * @param {object} param\n     * @param {Phone} [param.selectedPhone]\n     */\n    constructor({ selectedPhone }) {\n        Validator.validateClassObject(selectedPhone, Phone);\n        this.selectedPhone = selectedPhone;\n    }\n}\n\n/**\n * Class representing result type for pauseRecording() & resumeRecording\n */\nexport class RecordingToggleResult {\n    /**\n     * Create RecordingToggleResult\n     * @param {object} param\n     * @param {boolean} param.isRecordingPaused\n     * @param {string} [param.contactId]\n     * @param {string} [param.initialContactId]\n     * @param {string} [param.instanceId]\n     * @param {string} [param.region]\n     */\n    constructor({ isRecordingPaused, contactId = null, initialContactId = null, instanceId = null, region = null }) {\n        this.isRecordingPaused = isRecordingPaused;\n        this.contactId = contactId;\n        this.initialContactId = initialContactId;\n        this.instanceId = instanceId;\n        this.region = region;\n    }\n}\n\n/**\n * Class representing result type for addParticipant()\n */\nexport class ParticipantResult {\n    /**\n     * Create ParticipantResult\n     * @param {object} param\n     * @param {boolean} param.initialCallHasEnded\n     * @param {CallInfo} param.callInfo\n     * @param {string} param.phoneNumber\n     * @param {string} param.callId\n     */\n    constructor({ initialCallHasEnded, callInfo, phoneNumber, callId }) {\n        Validator.validateClassObject(callInfo, CallInfo);\n        this.initialCallHasEnded = initialCallHasEnded;\n        this.callInfo = callInfo;\n        this.phoneNumber = phoneNumber;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for getPhoneContacts()\n */\nexport class PhoneContactsResult {\n    /**\n     * Create PhoneContactsResult\n     * @param {object} param\n     * @param {Contact[]} [param.contacts]\n     * @param {Array} [param.contactTypes]\n     */\n    constructor({ contacts = [], contactTypes = [] }) {\n        if (contacts.length > 0) {\n            contacts.forEach(contact => {\n                Validator.validateClassObject(contact, Contact);\n            });\n        }\n        if (contactTypes.length > 0) {\n            contactTypes.forEach(filterType => {\n                Validator.validateEnum(filterType, Object.values(constants.CONTACT_TYPE));\n            });\n        }\n        this.contacts = contacts;\n        this.contactTypes = contactTypes;\n    }\n}\n\n/**\n * Class representing result type for accept(), decline(), dial()\n */\nexport class CallResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall} [param.call]\n     */\n    constructor({ call }) {\n        if (call !== undefined) {\n            Validator.validateClassObject(call, PhoneCall);\n        }\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for endCall(), hangup()\n */\nexport class HangupResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls (can be multiple calls in case of agent endcall/hangup)\n     */\n    constructor({ calls }) {\n        if (calls instanceof Array) {\n            calls.forEach(call => Validator.validateClassObject(call, PhoneCall));\n            this.calls = calls;\n        } else {\n            Validator.validateClassObject(calls, PhoneCall);\n            this.calls = [calls];\n        }\n    }\n}\n\n/**\n * Class representing result type for hold() & resume()\n */\nexport class HoldToggleResult {\n    /**\n     * Create HoldToggleResult\n     * @param {object} param\n     * @param {boolean} param.isThirdPartyOnHold\n     * @param {boolean} param.isCustomerOnHold\n     * @param {PhoneCall[]} [param.calls]\n     */\n    constructor({ isThirdPartyOnHold, isCustomerOnHold, calls }) {\n        if (calls) {\n            Object.values(calls).forEach(call => {\n                Validator.validateClassObject(call, PhoneCall);\n            });\n            this.calls = calls;\n        }\n        this.isThirdPartyOnHold = isThirdPartyOnHold;\n        this.isCustomerOnHold = isCustomerOnHold;\n    }\n}\n\n/**\n * Class representing result type for getRecordingUrl\n */\n export class SignedRecordingUrlResult {\n    /**\n     * Create SignedRecordingUrlResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {string} [param.url]\n     * @param {number} [param.duration] in seconds\n     * @param {string} [param.callId] Salesforce callId of the voice call\n     */\n    constructor({ success, url, duration, callId }) {\n        if (success) {\n            // For a successfull result, url is required\n            Validator.validateString(url);\n            Validator.validateString(callId);\n            if (duration) {\n                Validator.validateNumber(duration);\n            }\n        }\n        this.success = success;\n        this.url = url;\n        this.duration = duration;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for init()\n */\nexport class InitResult {\n    /**\n     * Create InitResult\n     * @param {object} param\n     * @param {boolean} [param.showLogin]\n     * @param {number} [param.loginFrameHeight]\n     * @param {boolean} [param.isSilentLogin]\n     * @param {boolean} [param.showStorageAccess]\n     */\n    constructor({ showLogin = false, loginFrameHeight = 350, isSilentLogin = false, showStorageAccess = false }) {\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n        this.isSilentLogin = this.showLogin ? false : isSilentLogin;\n        this.showStorageAccess = showStorageAccess;\n    }\n}\n\n/**\n * Class representing dial options for outbound dialing \n */\nexport class DialOptions {\n    /**\n     * Create DialOptions\n     * @param {boolean} [param.isCallback]\n     */\n    constructor({ isCallback = false }) {\n        this.isCallback = isCallback;\n    }\n}\n\n/**\n * Class representing generic result type\n */\nexport class GenericResult {\n    /**\n     * Create GenericResult\n     * @param {object} param\n     * @param {boolean} param.success\n     */\n    constructor({ success }) {\n        this.success = success;\n    }\n}\n\n/**\n * Class representing logout result type\n */\n export class LogoutResult {\n    /**\n     * Create LogoutResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {number} [param.loginFrameHeight]\n     */\n    constructor({ success, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class representing callInfo class (call metadata)\n */\nexport class CallInfo {\n    /**\n     * Create CallInfo\n     * @param {object} param\n     * @param {boolean} param.isOnHold\n     * @param {boolean} param.isRecordingPaused\n     * @param {boolean} param.isMuted\n     * @param {string} [param.initialCallId]\n     * @param {Date} [param.callStateTimestamp]\n     * @param {string} [param.queueName]\n     * @param {string} [param.queueId]\n     * @param {Date} [param.queueTimestamp]\n     * @param {boolean} [param.isSoftphoneCall] - is it a softphone call \n     * @param {boolean} [param.acceptEnabled]\n     * @param {boolean} [param.declineEnabled]\n     * @param {boolean} [param.muteEnabled]\n     * @param {boolean} [param.swapEnabled]\n     * @param {boolean} [param.conferenceEnabled]\n     * @param {boolean} [param.holdEnabled]\n     * @param {boolean} [param.recordEnabled]\n     * @param {boolean} [param.addCallerEnabled]\n     * @param {boolean} [param.extensionEnabled]\n     * @param {boolean} [param.isReplayable]\n     * @param {boolean} [param.isBargeable]\n     * @param {boolean} [param.isExternalTransfer]\n     * @param {boolean} [param.showMuteButton]\n     * @param {boolean} [param.showRecordButton]\n     * @param {boolean} [param.showAddCallerButton]\n     * @param {boolean} [param.showAddBlindTransferButton]\n     * @param {boolean} [param.showMergeButton]\n     * @param {boolean} [param.showSwapButton]\n     * @param {(\"ALWAYS\"|\"NEVER\"|\"ALWAYS_EXCEPT_ON_HOLD\")} [param.removeParticipantVariant] - The type of remove participant variant when in a transfer call.\n     * @param {String} [param.additionalFields] - Represents additional standard and custom fields in the voice call record, where each key-value pair value corresponds to a standard or custom field and its values.\n     * @param {boolean} [param.isMultiParty]\n     */\n    constructor({ callStateTimestamp = null, isOnHold, isMuted = false, isRecordingPaused = false, initialCallId, queueId = null, queueName = null, queueTimestamp = null, isSoftphoneCall = true, \n        acceptEnabled = true, declineEnabled = true, muteEnabled = true, swapEnabled = true, conferenceEnabled = true, holdEnabled = true,\n        recordEnabled = true, addCallerEnabled = true, extensionEnabled = true, isReplayable = true, isBargeable = false, isExternalTransfer, \n        showMuteButton = true, showRecordButton = true, showAddCallerButton = true, showAddBlindTransferButton = true, showMergeButton = true,\n        showSwapButton = true, removeParticipantVariant = Constants.REMOVE_PARTICIPANT_VARIANT.ALWAYS, additionalFields = null, isMultiParty = false }) {\n        if (callStateTimestamp) {\n            Validator.validateDate(callStateTimestamp);\n        }\n        if (queueTimestamp) {\n            Validator.validateDate(queueTimestamp);\n        }\n        if (queueId) {\n            Validator.validateString(queueId);\n        }\n        if (queueName) {\n            Validator.validateString(queueName);\n        }\n        Validator.validateBoolean(isRecordingPaused);\n        Validator.validateBoolean(isMuted);\n        Validator.validateBoolean(isSoftphoneCall);\n        Validator.validateBoolean(acceptEnabled);\n        Validator.validateBoolean(declineEnabled);\n        Validator.validateBoolean(muteEnabled);\n        Validator.validateBoolean(swapEnabled);\n        Validator.validateBoolean(conferenceEnabled);\n        Validator.validateBoolean(holdEnabled);\n        Validator.validateBoolean(recordEnabled);\n        Validator.validateBoolean(addCallerEnabled);\n        Validator.validateBoolean(extensionEnabled);\n        Validator.validateBoolean(isBargeable);\n        Validator.validateBoolean(showMuteButton);\n        Validator.validateBoolean(showRecordButton);\n        Validator.validateBoolean(showAddCallerButton);\n        Validator.validateBoolean(showAddBlindTransferButton);\n        Validator.validateBoolean(showMergeButton);\n        Validator.validateBoolean(showSwapButton);\n        if (isExternalTransfer !== undefined) {\n            Validator.validateBoolean(isExternalTransfer);\n        }\n        Validator.validateEnum(removeParticipantVariant, Object.values(constants.REMOVE_PARTICIPANT_VARIANT));\n        if (additionalFields) {\n            Validator.validateString(additionalFields);\n        }\n        Validator.validateBoolean(isMultiParty);\n        this.callStateTimestamp = callStateTimestamp;\n        this.isRecordingPaused = isRecordingPaused;\n        this.isMuted = isMuted;\n        this.isOnHold = isOnHold;\n        this.initialCallId = initialCallId;\n        this.queueName = queueName;\n        this.queueId = queueId;\n        this.queueTimestamp = queueTimestamp;\n        this.isSoftphoneCall = isSoftphoneCall;\n        this.acceptEnabled = acceptEnabled;\n        this.declineEnabled = declineEnabled;\n        this.muteEnabled = muteEnabled;\n        this.swapEnabled = swapEnabled;\n        this.conferenceEnabled = conferenceEnabled;\n        this.holdEnabled = holdEnabled;\n        this.recordEnabled = recordEnabled;\n        this.addCallerEnabled = addCallerEnabled;\n        this.extensionEnabled = extensionEnabled;\n        this.isReplayable = isReplayable;\n        this.isBargeable = isBargeable;\n        this.isExternalTransfer = isExternalTransfer;\n        this.removeParticipantVariant = removeParticipantVariant;\n        this.showMuteButton = showMuteButton;\n        this.showRecordButton = showRecordButton;\n        this.showAddCallerButton = showAddCallerButton;\n        this.showAddBlindTransferButton = showAddBlindTransferButton;\n        this.showMergeButton = showMergeButton;\n        this.showSwapButton = showSwapButton;\n        this.additionalFields = additionalFields;\n        this.isMultiParty = isMultiParty;\n    }\n}\n\n/** \n * Class representing a Contact. This object is used to represent \n * phone system contact or any call target\n */\n\nexport class Contact {\n    /**\n     * Create a Contact.\n     * @param {object} param\n     * @param {string} [param.id] - The unique contactId\n     * @param {(\"PhoneBook\"|\"Queue\"|\"PhoneNumber\"|\"Agent\")} [param.type] - The type of the contact, one of the CONTACT_TYPE values\n     * @param {string} [param.name] - The label for this contact to be displayed in the UI\n     * @param {string} [param.phoneNumber] - The phone number associcated with this contact\n     * @param {string} [param.prefix] - Any prefix to be dialed before dialing the number (i.e. +1)\n     * @param {string} [param.extension] - Any extension to be dialed after dialing the number\n     * @param {string} [param.endpointARN]\n     * @param {string} [param.queue]\n     * @param {string} [param.availability]\n     * @param {string} [param.recordId] - Salesforce RecordId\n     * @param {string} [param.description] - Contact Description\n     * @param {string} [param.queueWaitTime] - Estimated Queue Wait Time\n     */\n    constructor({phoneNumber, id, type, name, prefix, extension, endpointARN, queue, availability, recordId, description, queueWaitTime}) {\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n        }\n        if (type) {\n            Validator.validateEnum(type, Object.values(constants.CONTACT_TYPE));\n        }\n        if (id) {\n            Validator.validateString(id);\n        }\n        if (name) {\n            Validator.validateString(name);\n        }\n        if (prefix) {\n            Validator.validateString(prefix);\n        }\n        if (extension) {\n            Validator.validateString(extension);\n        }\n        if (availability) {\n            Validator.validateEnum(availability, Object.values(constants.AGENT_AVAILABILITY));\n        }\n        if (recordId) {\n            Validator.validateString(recordId);\n        }\n        if (description) {\n            Validator.validateString(description);\n        }\n        if (queueWaitTime) {\n            Validator.validateString(queueWaitTime);\n        }\n\n        this.phoneNumber = phoneNumber;\n        this.id = id;\n        this.type = type;\n        this.name = name;\n        this.prefix = prefix;\n        this.extension = extension;\n        this.endpointARN = endpointARN;\n        this.queue = queue;\n        if (constants.CONTACT_TYPE.AGENT === this.type) {\n            this.availability = availability;\n        } else {\n            this.availability = null;\n        }\n        this.queueWaitTime = queueWaitTime;\n        this.recordId = recordId;\n        this.description = description;\n    }\n}\n\n/** \n* Class representing PhoneCallAttributes\n*/\n\nexport class PhoneCallAttributes {\n    /**\n     * Create PhoneCallAttributes.\n     * @param {object} param\n     * @param {string} [param.voiceCallId] - The voice call id\n     * @param {PARTICIPANT_TYPE} [param.participantType] - The participant type of the call\n     * @param {DIALER_TYPE} [param.dialerType] - The dialer type of the call\n     * @param {string} [param.parentId] - The parent call id of the call\n     * @param {boolean} [param.isOnHold]\n     * @param {boolean} [param.hasSupervisorBargedIn]\n     */\n    constructor({ voiceCallId, participantType, dialerType = Constants.DIALER_TYPE.NONE, parentId, isOnHold, hasSupervisorBargedIn = false }) {\n        if (voiceCallId) {\n            Validator.validateString(voiceCallId);\n        }\n        if (participantType) {\n            Validator.validateEnum(participantType, Object.values(constants.PARTICIPANT_TYPE));\n        }\n        if (parentId) {\n            Validator.validateString(parentId);\n        }\n        if (isOnHold !== undefined) {\n            Validator.validateBoolean(isOnHold);\n        }\n\n        Validator.validateBoolean(hasSupervisorBargedIn);\n        Validator.validateEnum(dialerType, Object.values(constants.DIALER_TYPE));\n\n        this.voiceCallId = voiceCallId;\n        this.participantType = participantType;\n        this.parentId = parentId;\n        this.isOnHold = isOnHold;\n        this.dialerType = dialerType;\n        this.hasSupervisorBargedIn = hasSupervisorBargedIn;\n    }\n}\n\n/** \n* Class representing a PhoneCall. \n*/\n\nexport class PhoneCall {\n    /**\n     * Create a PhoneCall.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId. This is a required parameter\n     * @param {CALL_TYPE} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {Contact} [param.contact] - The Call Target / Contact \n     * @param {string} [param.state] - The state of the call, i.e. ringing, connected, declined, failed \n     * @param {PhoneCallAttributes} [param.callAttributes] - Any additional call attributes\n     * @param {string} [param.phoneNumber] - The phone number associated with this call (usually external number)\n     * @param {CallInfo} [param.callInfo]\n     * @param {string} [param.reason]\n     * @param {boolean} [param.closeCallOnError]\n     * @param {string} [param.agentStatus]\n     */\n    constructor({callId, callType, contact, state, callAttributes, phoneNumber, callInfo, reason, closeCallOnError, agentStatus }) {\n        // TODO: Revisit the required fields\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n        if (callType) {\n            Validator.validateEnum(callType, Object.values(constants.CALL_TYPE));\n            this.callType = callType;\n        }\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n            this.phoneNumber = phoneNumber;\n        }\n        if (callInfo) {\n            Validator.validateClassObject(callInfo, CallInfo);\n            this.callInfo = callInfo;\n        }\n        if (contact) {\n            Validator.validateClassObject(contact, Contact);\n            this.contact = contact;\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        if (closeCallOnError) {\n            this.closeCallOnError = closeCallOnError;\n        }\n        if (agentStatus) {\n            this.agentStatus = agentStatus;\n        }\n        this.state = state;\n        this.callAttributes = callAttributes;\n    }\n}\n\n/** \n* Class representing a TelephonyConnector\n*/\nexport class TelephonyConnector {\n    /**\n     * Get the currently active calls\n     * @returns {Promise<ActiveCallsResult>} \n     * \n     */\n    getActiveCalls() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Accept call\n     * @param {PhoneCall} call - The call to be accepted\n     * @returns {Promise<CallResult>} \n     * \n     */\n    acceptCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Decline call\n     * @param {PhoneCall} call - The call to be declined\n     * @returns {Promise<CallResult>} \n     * \n     */\n    declineCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * End call\n     * @param {PhoneCall} call - The call to be ended\n     * @param {AGENT_STATUS} agentStatus\n     * @returns {Promise<HangupResult>} \n     * \n     */\n    endCall(call, agentStatus) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    mute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Unmute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    unmute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Hold call\n     * @param {PhoneCall} call - The call to be held\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    hold(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume call\n     * @param {PhoneCall} call - The call to be resumed\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    resume(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Dial out Number\n     * @param {Contact} contact\n     * @param {DialOptions} dialOptions\n     * @returns {Promise<CallResult>} \n     * \n     */\n    dial(contact, dialOptions) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Send digits\n     * @param {string} digits\n     */\n    sendDigits(digits) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get phone contacts\n     * @param {ContactsFilter} filterType\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getPhoneContacts(filter) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Swap calls\n     * @param {PhoneCall} call1\n     * @param {PhoneCall} call2\n     * @returns {Promise<HoldToggleResult>} \n     */\n    swap(call1, call2) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Conference calls\n     * @param {PhoneCall[]} calls\n     * @returns {Promise<HoldToggleResult>} \n     */\n    conference(calls) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Add participant to call\n     * @param {Contact} contact: The transfer target\n     * @param {PhoneCall} parentCall: The call to which a participant will be added\n     * @param {Boolean} isBlindTransfer: True if blind transfering a call and hanging up upon transfer\n     * @returns {Promise<ParticipantResult>} \n     */\n    addParticipant(contact, parentCall, isBlindTransfer) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Pause recording\n     * @param {PhoneCall} call\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    pauseRecording(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume recording\n     * @param {PhoneCall} call\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    resumeRecording(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agentConfig\n     * @returns {Promise<AgentConfigResult>}\n     */\n    getAgentConfig() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set Agent Config\n     * @param {AgentConfig} config\n     * @returns {Promise<GenericResult>}\n     */\n    setAgentConfig(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get Capabilities\n     * @returns {Promise<CapabilitiesResult>}\n     */\n    getCapabilities() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Wrap up call\n     * @param {PhoneCall} call\n     */\n    wrapUpCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n    * Get the signed recording url\n    * @param {String} recordingUrl\n    * @param {String} vendorCallKey\n    * @param {String} callId\n    * @returns {Promise<SignedRecordingUrlResult>} \n    */\n    getSignedRecordingUrl(recordingUrl, vendorCallKey, callId) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervise a call\n     * @param {PhoneCall} call Call to be supervised\n     */\n    superviseCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor disconnects from a call\n     * @param {PhoneCall} call Call to be disconnected\n     */\n    supervisorDisconnect(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor Barges into a ongoing call\n     * @param {PhoneCall} call Call which supervisor barges in\n     */\n    supervisorBargeIn(call) {\n        throw new Error('Not implemented');\n    }\n}\n\n/** \n* Class representing a VendorConnector\n*/\nexport class VendorConnector {\n    /**\n     * Initialize the connector\n     * @param {object} connectorConfig\n     * @returns {Promise<InitResult>} \n     * \n     */\n    init(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Gets the telephonyConnector\n     * @returns {Promise<TelephonyConnector>} \n     * \n     */\n    getTelephonyConnector() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Sends non-voice agent work events to vendor such as work accepted, declined, etc\n     * @param {AgentWork} agentWork\n     * \n     */\n    onAgentWorkEvent(agentWork) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set agent status\n     * @param {string} agentStatus\n     * @param {StatusInfo} statusInfo\n     * @param {Boolean} enqueueNextState - flag to determine if this status change request should be enqueued if neccessary\n     * @returns {Promise<GenericResult>} \n     * \n     */\n    setAgentStatus(agentStatus, statusInfo, enqueueNextState) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agent status\n     * @returns {Promise<AgentStatusInfo>} \n     * \n     */\n     getAgentStatus() {\n        this.logMessageToVendor(constants.LOG_LEVEL.INFO, 'getAgentStatus API is NOT Implemented' );\n    }\n\n    /**\n     * Logout from Omni\n     * @returns {Promise<LogoutResult>} \n     */\n    logout() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Handle message from LWC/Aura component\n     * @param {object} message\n     */\n    handleMessage(message) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Triggers a browser download for Vendor Logs\n     * @param {String[]} logs Array of log messages.\n     */\n    downloadLogs(logs) {\n        downloadLogs();\n    }\n\n    /**\n     * Sends the logs with a logLevel and payload to the vendor connector.\n     * Does a no-op, if not implemented.\n     * @param {String} logLevel Log Level (INFO, WARN, ERROR)\n     * @param {String} message Message to be logged\n     * @param {Object} payload An optional payload to be logged\n     */\n    logMessageToVendor(logLevel, message, payload) {}\n\n    /**\n     * To get the Contacts for this workItem's transfer/other channel operation\n     * @param {ContactsFilter} filter It has fields like the search term  and contact Type\n     * @param {String} workItemId\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getContacts(filter, workItemId) {\n        throw new Error('Not implemented');\n    }\n}\n\nexport class Validator {\n    static validateString(value) {\n        if (typeof value !== 'string') {\n            throw new Error(`Invalid argument. Expecting a string but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateNumber(value) {\n        if (typeof value !== 'number') {\n            throw new Error(`Invalid argument. Expecting a number but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateBoolean(value) {\n        if (typeof value !== 'boolean') {\n            throw new Error(`Invalid argument. Expecting a boolean but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateEnum(value, enumValues) {\n        const regex = new RegExp(enumValues.join( \"|\" ), \"i\");\n        if (!regex.test(value)) {\n            throw new Error(`Invalid argument. Expecting a value from ${JSON.stringify(enumValues)} but got ${value}`);\n        }\n        return this;\n    }\n\n    static validateDate(value) {\n        if (!(value instanceof Date)) {\n            throw new Error(`Invalid argument. Expecting a Date object but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateClassObject(object, className) {\n        if (!(object instanceof className)) {\n            throw new Error(`Invalid className. Expecting object of class ${className} but got ${typeof object}`);\n        }\n        return this;\n    }\n}\n\n/** \n* Class representing an AgentWork\n*/\nexport class AgentWork {\n    /**\n     * Create an AgentWork.\n     * @param {object} param\n     * @param {string} [param.workItemId] - Salesforce agent work item Id\n     * @param {string} [param.workId] - Salesforce work Id\n     * @param {WORK_EVENT} [param.workEvent] - The work lifecycle event\n     */\n    constructor({ workItemId, workId, workEvent }) {\n        Validator.validateEnum(workEvent, Object.values(constants.WORK_EVENT));\n        this.workEvent = workEvent;\n        this.workItemId = workItemId;\n        this.workId = workId;\n    }\n }\n\n/** \n * Class representing an Agent status information. This object is used to represent \n * agent status information\n */\n\nexport class AgentStatusInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (required)\n     * @param {string} [param.statusApiName] - The status API name\n     * @param {string} [param.statusName] - The label for this status to be displayed in the UI\n     */\n    constructor({statusId, statusApiName, statusName}) {\n        Validator.validateString(statusId);\n        if (statusApiName) {\n            Validator.validateString(statusApiName);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusApiName = statusApiName;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * Class representing an Agent Vendor status information. This object is used to represent \n * agent vendor side status information\n */\nexport class AgentVendorStatusInfo {\n    /**\n     * Create a AgentVendorStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (e.g agentStateARN)\n     * @param {string} [param.statusType] - The agent's current availability state type\n     * @param {string} [param.statusName] - The name of the agent's current availability state\n     */\n    constructor({statusId, statusType, statusName}) {\n        if (statusId) {\n            Validator.validateString(statusId);\n        }\n        if (statusType) {\n            Validator.validateString(statusType);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusType = statusType;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * NOTE: SALESFORCE INTERNAL USE ONLY\n * Class representing an State Change Result information. This object is used to represent \n * Agent State Change Infomation\n */\n export class StateChangeResult {\n    /**\n     * Create a StateChangeResult.\n     * @param {object} param\n     * @param {AgentVendorStatusInfo} [param.newVendorStateInfo] - newStateName (e.g 'Available') (required), newStateType (e.g 'routable')\n     * @param {AgentVendorStatusInfo} [param.oldVendorStateInfo] - oldStateName (e.g 'offline'), oldStateType (e.g 'Offline')\n     */\n    constructor({newVendorStateInfo, oldVendorStateInfo}) {\n        Validator.validateClassObject(newVendorStateInfo, AgentVendorStatusInfo);\n        Validator.validateString(newVendorStateInfo.statusName);\n        if (oldVendorStateInfo) {\n            Validator.validateClassObject(oldVendorStateInfo, AgentVendorStatusInfo);\n        }\n        this.newVendorStateInfo = newVendorStateInfo;\n        this.oldVendorStateInfo = oldVendorStateInfo;\n    }\n}\n\n/** \n * Class representing a Supervised Call Info. This object is used to represent \n * information about a call that is being supervised by a supervisor.\n */\nexport class SupervisedCallInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique supervised vendor call ID (required)\n     * @param {string} [param.voiceCallId] - The supervised salesforce voice call ID\n     * @param {string} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {string} [param.from] - From phone number (for Inbound calls)\n     * @param {string} [param.to] - To phone number (for Outbound calls)\n     * @param {string} [param.supervisorName] - The supervisor name (shown to the supervised agent on barge in)\n     * @param {boolean} [param.isBargedIn] - True if the Supervisor has barged in, False if the supervisor is listening in.\n     */\n\n    constructor({callId, voiceCallId, callType, from, to, supervisorName, isBargedIn}) {\n        Validator.validateString(callId);\n        this.callId = callId;\n        this.voiceCallId = voiceCallId;\n        this.callType = callType;\n        this.from = from;\n        this.to = to;\n        this.supervisorName = supervisorName;\n        this.isBargedIn = isBargedIn;\n    }\n}\n\n/**\n * Class representing a Audio Stats, which contains array of AudioStats. This object is used to calculate the MOS Score\n */\n\nexport class AudioStats {\n    /**\n     * Create a AudioStats\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId.\n     * @param {AudioStatsElement[]} param.stats - array of AudioStatsElement\n     * @param {boolean} [param.isAudioStatsCompleted] - True if the audio stats is completed, will calculate MOS and update VoiceCall record\n     */\n    constructor({ callId, stats, isAudioStatsCompleted }) {\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n\n        if (stats) {\n            Validator.validateClassObject(stats, Array);\n            stats.forEach(audioStatsElement => Validator.validateClassObject(audioStatsElement, AudioStatsElement));\n            this.stats = stats;\n        }\n\n        if (isAudioStatsCompleted) {\n            Validator.validateBoolean(isAudioStatsCompleted);\n            this.isAudioStatsCompleted = isAudioStatsCompleted;\n        }\n    }\n}\n\n/**\n * Class representing a Audio Stats Element. This object is used to calculate the MOS Score\n */\n\nexport class AudioStatsElement {\n    /**\n     * Create a AudioStatsElement\n     * @param {object} param\n     * @param {StatsInfo} [param.inputChannelStats] - the inputChannel stream stats\n     * @param {StatsInfo} [param.outputChannelStats] - the ouputChannel stream stats\n     */\n    constructor({inputChannelStats, outputChannelStats}) {\n        if (inputChannelStats) {\n            Validator.validateClassObject(inputChannelStats, StatsInfo);\n        }\n        if (outputChannelStats) {\n            Validator.validateClassObject(outputChannelStats, StatsInfo);\n        }\n        \n        this.inputChannelStats = inputChannelStats;\n        this.outputChannelStats = outputChannelStats;\n    }\n}\n\n/**\n * Class representing a Stream Stats. This object is used to calculate the MOS Score\n */\n\nexport class StatsInfo {\n    /**\n     * Create a StatsInfo\n     * @param {object} param\n     * @param {number} [param.packetsCount] - the packets count\n     * @param {number} [param.packetsLost] - packets lost count\n     * @param {number} [param.jitterBufferMillis] - jitter buffer in milliseconds\n     * @param {number} [param.roundTripTimeMillis] - round trip time in milliseconds\n     */\n    constructor({packetsCount, packetsLost, jitterBufferMillis, roundTripTimeMillis}) {\n        packetsCount = (packetsCount == null || packetsCount < 0) ? 0 : packetsCount;\n        packetsLost = (packetsLost == null || packetsLost < 0) ? 0 : packetsLost;\n        jitterBufferMillis = (jitterBufferMillis == null || jitterBufferMillis < 0) ? 0 : jitterBufferMillis;\n        roundTripTimeMillis = (roundTripTimeMillis == null || roundTripTimeMillis < 0) ? 0 : roundTripTimeMillis;\n\n        this.statsCount = 0;\n        this.packetsCount = packetsCount;\n        this.packetsLost = packetsLost;\n        this.jitterBufferMillis = jitterBufferMillis;\n        this.roundTripTimeMillis = roundTripTimeMillis;\n    }\n}\n\n/**\n * Class representing supervise call result\n */\n export class SuperviseCallResult {\n    /**\n     * Create a SuperviseCallResult\n     * @param {object} param\n     * @param {PhoneCall} param.call\n     */\n    constructor({call}) {\n        Validator.validateClassObject(call, PhoneCall);\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for supervisorDisconnected()\n */\n export class SupervisorHangupResult extends HangupResult {\n     /**\n     * Create SupervisorHangupResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls when supervisor hangsup\n     */\n    constructor({ calls }) {\n        super({ calls });\n    }\n }\n\n/** \n * Class representing result type for STORAGE_ACCESS_RESULT\n * @param {object} param\n * @param {boolean} [param.success]\n * @param {boolean} [param.showLogin] \n * @param {number} [param.loginFrameHeight]\n */\nexport class ShowStorageAccessResult {\n    constructor({success= false, showLogin = false, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class used to filter contacts. Passed as a parameter to TelephonyConnector.getPhoneContacts\n * @param {object} param\n * @param {string} param.contains\n * @param {number} param.limit\n * @param {number} param.offset\n * @param {CONTACTS_FILTER_TYPES[]} param.types \n */ \nexport class ContactsFilter {\n    constructor(param) {\n        if (param) {\n            const {contains = null, limit = 50, offset = 0, types = []} = param;\n            if (contains) {\n                Validator.validateString(contains);\n            }\n            Validator.validateNumber(limit);\n            Validator.validateNumber(offset);\n            for (const type of types){\n                Validator.validateEnum(types, Object.values(constants.CONTACTS_FILTER_TYPES));\n            }\n            this.contains = contains;\n            this.limit = limit;\n            this.offset = offset;\n            this.types = types;\n        }\n    }\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport { AudioStatsElement, StatsInfo } from './types';\nlet audioStatus;\nlet supportsMos = false;\n\nfunction getAvgStats(streamType) {\n    const stats = audioStatus[streamType];\n    return {\n        packetsCount: stats.packetsCount / stats.statsCount,\n        packetsLost: stats.packetsLost / stats.statsCount,\n        jitterBufferMillis: stats.jitterBufferMillis / stats.statsCount,\n        roundTripTimeMillis: stats.roundTripTimeMillis / stats.statsCount\n    };\n}\n\nfunction getMOSByStream(streamType) {\n    const avgStats = getAvgStats(streamType);\n    const effectiveLatency = avgStats.roundTripTimeMillis + (avgStats.jitterBufferMillis * 2) + 10.0;\n    let R = 0;\n    if (effectiveLatency < 160) {\n        R = 93.2 - (effectiveLatency / 40);\n    } else {\n        R = 93.2 - (effectiveLatency - 120) / 10;\n    }\n    R -= avgStats.packetsLost / avgStats.packetsCount * 2.50;\n    return 1 + (0.035) * R + (.000007) * R * (R - 60) * (100 - R);\n}\n\nexport function enableMos() {\n    supportsMos = true;\n}\n\nexport function getMOS() {\n    if (!supportsMos || !audioStatus) {\n        return undefined;\n    }\n    const inputChannelMOS = getMOSByStream('inputChannelStats');\n    const ouputChannelMOS = getMOSByStream('outputChannelStats');\n    audioStatus = null;\n    if (isNaN(ouputChannelMOS) && isNaN(inputChannelMOS)) {\n        return 0;\n    } else if (isNaN(ouputChannelMOS)) {\n        return inputChannelMOS;\n    } else if (isNaN(inputChannelMOS)) {\n        return ouputChannelMOS;\n    } else {\n        return Math.min(inputChannelMOS, ouputChannelMOS);\n    }\n}\n\nexport function initAudioStats() {\n    audioStatus = new AudioStatsElement({inputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0}), \n                               outputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0})});\n}\n\nexport function updateAudioStats(statsArray) {\n    if (audioStatus) {\n        statsArray.forEach((stats) => {\n            if (stats.inputChannelStats) {\n                audioStatus.inputChannelStats.statsCount++;\n                audioStatus.inputChannelStats.packetsCount += stats.inputChannelStats.packetsCount | 0;\n                audioStatus.inputChannelStats.packetsLost += stats.inputChannelStats.packetsLost | 0;\n                audioStatus.inputChannelStats.jitterBufferMillis += stats.inputChannelStats.jitterBufferMillis | 0;\n                audioStatus.inputChannelStats.roundTripTimeMillis += stats.inputChannelStats.roundTripTimeMillis | 0;\n            }\n            if (stats.outputChannelStats) {\n                audioStatus.outputChannelStats.statsCount++;\n                audioStatus.outputChannelStats.packetsCount += stats.outputChannelStats.packetsCount | 0;\n                audioStatus.outputChannelStats.packetsLost += stats.outputChannelStats.packetsLost | 0;\n                audioStatus.outputChannelStats.jitterBufferMillis += stats.outputChannelStats.jitterBufferMillis | 0;\n                audioStatus.outputChannelStats.roundTripTimeMillis += stats.outputChannelStats.roundTripTimeMillis | 0;\n            }\n        });\n    }\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { CONNECTOR_CONFIG_EXPOSED_FIELDS, CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH, CONNECTOR_CONFIG_EXCEPTION_FIELDS } from './constants.js';\nimport { Validator, GenericResult, InitResult, CallResult, HangupResult, HoldToggleResult, PhoneContactsResult, MuteToggleResult,\n    ParticipantResult, RecordingToggleResult, AgentConfigResult, ActiveCallsResult, SignedRecordingUrlResult, LogoutResult,\n    VendorConnector, Contact, AudioStats, SuperviseCallResult, SupervisorHangupResult, AgentStatusInfo, SupervisedCallInfo, \n    CapabilitiesResult, AgentVendorStatusInfo, StateChangeResult, CustomError, DialOptions, ShowStorageAccessResult } from './types';\nimport { enableMos, getMOS, initAudioStats, updateAudioStats } from './mosUtil';\nimport { log, getLogs } from './logger';\n\nlet channelPort;\nlet vendorConnector;\nlet agentAvailable;\nlet isSupervisorConnected;\n\n/**\n * Gets the error type from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorType(e) {\n    return e && e.type ? e.type : e;\n}\n\n/**\n * Sanitizes the object by removing any PII data\n * @param {object} payload\n */\nfunction sanitizePayload(payload) {\n    if (payload) {\n        if (typeof (payload) === 'function') {\n            // remove functions from the payload, because they cannot be copied by the postMessage function\n            return;\n        } else if (typeof (payload) === 'object') {\n            const isArray = Array.isArray(payload);\n            const sanitizedPayload = isArray ? [] : {};\n\n            if (isArray) {\n                payload.forEach(element => {\n                    sanitizedPayload.push(sanitizePayload(element));\n                });\n            } else {\n                for (const property in payload) {\n                    if (property !== 'phoneNumber' &&\n                        property !== 'number' &&\n                        property !== 'name' &&\n                        property !== 'callAttributes') {\n                        sanitizedPayload[property] = sanitizePayload(payload[property]);\n                    }\n                }\n            }\n            return sanitizedPayload;\n        }\n    }\n    return payload;\n}\n\n/**\n * Gets the error message from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorMessage(e) {\n    return e && e.message ? e.message : e;\n}\n/** \n * Dispatch a telephony event log to Salesforce\n * @param {String} eventType event type, i.e. constants.EVENT_TYPE.VOICE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} isError error scenario\n */\nfunction dispatchEventLog(eventType, payload, isError) {\n    const sanitizedPayload = sanitizePayload(payload);\n    const logLevel = isError ? constants.LOG_LEVEL.ERROR : constants.LOG_LEVEL.INFO;\n    log({eventType, payload}, logLevel, constants.LOG_SOURCE.SYSTEM);\n\n    channelPort.postMessage({\n        type: constants.MESSAGE_TYPE.LOG,\n        payload: { eventType, payload: sanitizedPayload, isError }\n    });\n}\n/** \n * Dispatch a telephony event to Salesforce\n * @param {String} eventType event type, i.e. constants.EVENT_TYPE.VOICE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} registerLog optional argument to not register the event\n */\nfunction dispatchEvent(eventType, payload, registerLog = true) {\n    channelPort.postMessage({\n        type: constants.MESSAGE_TYPE.TELEPHONY_EVENT_DISPATCHED,\n        payload: { telephonyEventType: eventType, telephonyEventPayload: payload }\n    });\n    if (registerLog) {\n        dispatchEventLog(eventType, payload, false);\n    }\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {string} errorType Error Type, ex: constants.ErrorType.VOICE.MICROPHONE_NOT_SHARED\n * @param {object} error Error object representing the error\n * @param {string} eventType The event that caused this error, ex: constants.MESSAGE_TYPE.VOICE.ACCEPT_CALL\n */\nfunction dispatchError(errorType, error, eventType) {\n    // eslint-disable-next-line no-console\n    console.error(`SCV dispatched error ${errorType} for eventType ${eventType}`, error);\n    dispatchEvent(constants.EVENT_TYPE.ERROR, { message: errorType }, false);\n    dispatchEventLog(eventType, { errorType, error }, true);\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {CustomError} error Error object representing the custom error\n * @param {string} eventType The event that caused this error, ex: constants.MESSAGE_TYPE.ACCEPT_CALL\n */\nfunction dispatchCustomError(error, eventType) {\n    // eslint-disable-next-line no-console\n    const payload = {\n        customError: {\n            labelName: error.labelName,\n            namespace: error.namespace,\n            message: error.message\n        }\n    };\n    console.error(`SCV dispatched custom error for eventType ${eventType}`, payload);\n    dispatchEvent(constants.EVENT_TYPE.ERROR, payload, false);\n    dispatchEventLog(eventType, { errorType: constants.ERROR_TYPE.CUSTOM_ERROR, error }, true);\n}\n\nfunction dispatchInfo(eventType, payload) {\n    // eslint-disable-next-line no-console\n    console.info(`SCV info message dispatched for eventType ${eventType} with payload ${JSON.stringify(payload)}`);\n    dispatchEvent(constants.EVENT_TYPE.INFO, { message: eventType }, false);\n    dispatchEventLog(eventType, payload, false);\n}\n\n/** \n * Notify Salesforce that the connector is ready\n */\nasync function setConnectorReady() {\n    try {\n        const telephonyConnector = await vendorConnector.getTelephonyConnector();\n        const agentConfigResult = await telephonyConnector.getAgentConfig();\n        const capabilitiesResult = await telephonyConnector.getCapabilities();\n        Validator.validateClassObject(agentConfigResult, AgentConfigResult);\n        Validator.validateClassObject(capabilitiesResult, CapabilitiesResult);\n        if (capabilitiesResult.supportsMos) {\n            enableMos();\n        }\n        const activeCallsResult = await telephonyConnector.getActiveCalls();\n        Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n        const activeCalls = activeCallsResult.activeCalls;\n        const type = constants.MESSAGE_TYPE.CONNECTOR_READY;\n        const payload = {\n            agentConfig: {\n\n                [constants.AGENT_CONFIG_TYPE.PHONES] : agentConfigResult.phones,\n                [constants.AGENT_CONFIG_TYPE.SELECTED_PHONE] : agentConfigResult.selectedPhone\n            },\n            capabilities: {\n                [constants.CAPABILITIES_TYPE.MUTE] : capabilitiesResult.hasMute,\n                [constants.CAPABILITIES_TYPE.RECORD] : capabilitiesResult.hasRecord,\n                [constants.CAPABILITIES_TYPE.MERGE] : capabilitiesResult.hasMerge,\n                [constants.CAPABILITIES_TYPE.SWAP] : capabilitiesResult.hasSwap,\n                [constants.CAPABILITIES_TYPE.SIGNED_RECORDING_URL] : capabilitiesResult.hasSignedRecordingUrl,\n                [constants.CAPABILITIES_TYPE.DEBUG_ENABLED] : capabilitiesResult.debugEnabled,\n                [constants.CAPABILITIES_TYPE.CONTACT_SEARCH] : capabilitiesResult.hasContactSearch,\n                [constants.CAPABILITIES_TYPE.VENDOR_PROVIDED_AVAILABILITY] : capabilitiesResult.hasAgentAvailability,\n                [constants.CAPABILITIES_TYPE.VENDOR_PROVIDED_QUEUE_WAIT_TIME] : capabilitiesResult.hasQueueWaitTime,\n                [constants.CAPABILITIES_TYPE.SUPERVISOR_LISTEN_IN] : capabilitiesResult.hasSupervisorListenIn,\n                [constants.CAPABILITIES_TYPE.SUPERVISOR_BARGE_IN] : capabilitiesResult.hasSupervisorBargeIn,\n                [constants.CAPABILITIES_TYPE.MOS] : capabilitiesResult.supportsMos,\n                [constants.CAPABILITIES_TYPE.BLIND_TRANSFER] : capabilitiesResult.hasBlindTransfer,\n                [constants.CAPABILITIES_TYPE.TRANSFER_TO_OMNI_FLOW] : capabilitiesResult.hasTransferToOmniFlow,\n                [constants.CAPABILITIES_TYPE.PENDING_STATUS_CHANGE] : capabilitiesResult.hasPendingStatusChange,\n                [constants.CAPABILITIES_TYPE.PHONEBOOK] : capabilitiesResult.hasPhoneBook\n            },\n            callInProgress: activeCalls.length > 0 ? activeCalls[0] : null\n        }\n        channelPort.postMessage({\n            type,\n            payload\n        });\n        dispatchEventLog(type, payload, false);\n    } catch (e) {\n        // Post CONNECTOR_READY even if getAgentConfig is not implemented\n        channelPort.postMessage({\n            type: constants.MESSAGE_TYPE.CONNECTOR_READY,\n            payload: {}\n        });\n        dispatchEventLog(constants.MESSAGE_TYPE.CONNECTOR_READY, {}, false);\n    }\n}\n\n//TODO: 230 we should convert call object to PhoneCall object\nasync function channelMessageHandler(message) { \n    const eventType = message.data.type;\n    if (eventType !== constants.MESSAGE_TYPE.LOG) {\n        dispatchEventLog(eventType, message.data, false);\n    }\n    switch (eventType) {\n        case constants.MESSAGE_TYPE.VOICE.ACCEPT_CALL:\n            try {\n                if (message.data.call && message.data.call.callType &&\n                    (message.data.call.callType.toLowerCase() === constants.CALL_TYPE.OUTBOUND.toLowerCase() ||\n                    message.data.call.callType.toLowerCase() === constants.CALL_TYPE.DIALED_CALLBACK.toLowerCase())) {\n                    return;\n                }\n                initAudioStats();\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                if (isSupervisorConnected) {\n                    const hangupPayload = await telephonyConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP, hangupPayload.calls);\n                }\n                let payload = await telephonyConnector.acceptCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(call.callType.toLowerCase() === constants.CALL_TYPE.CALLBACK.toLowerCase() ?\n                    constants.EVENT_TYPE.VOICE.CALL_STARTED : constants.EVENT_TYPE.VOICE.CALL_CONNECTED, call);\n            } catch (e) {\n                isSupervisorConnected = false;\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.ACCEPT_CALL);\n                } else {\n                    dispatchInfo(constants.INFO_TYPE.VOICE.CAN_NOT_ACCEPT_THE_CALL, {messagetype: constants.MESSAGE_TYPE.VOICE.ACCEPT_CALL, additionalInfo: e});\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.DECLINE_CALL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload =  await telephonyConnector.declineCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.HANGUP, call);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.DECLINE_CALL);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_DECLINE_THE_CALL, e, constants.MESSAGE_TYPE.VOICE.DECLINE_CALL);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.END_CALL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.endCall(message.data.call, message.data.agentStatus);\n                Validator.validateClassObject(payload, HangupResult);\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                const { calls } = payload;\n                // after end calls from vendor side, if no more active calls, fire HANGUP, otherwise, fire PARTICIPANT_REMOVED\n                if (activeCalls.length === 0) {\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.HANGUP, calls);\n                } else {\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED, calls.length > 0 && calls[0]);\n                }\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.END_CALL);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_END_THE_CALL, e, constants.MESSAGE_TYPE.VOICE.END_CALL);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.MUTE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.mute();\n                publishEvent({eventType: constants.EVENT_TYPE.VOICE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.MUTE);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_MUTE_CALL, e, constants.MESSAGE_TYPE.VOICE.MUTE);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.UNMUTE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.unmute();\n                publishEvent({eventType: constants.EVENT_TYPE.VOICE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.UNMUTE);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_UNMUTE_CALL, e, constants.MESSAGE_TYPE.VOICE.UNMUTE);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.HOLD:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.hold(message.data.call);\n                publishEvent({eventType: constants.EVENT_TYPE.VOICE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.HOLD);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT:\n                            dispatchError(constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.HOLD);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_HOLD_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.HOLD);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.RESUME:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.resume(message.data.call);\n                publishEvent({eventType: constants.EVENT_TYPE.VOICE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.RESUME);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT:\n                            dispatchError(constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.RESUME);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_RESUME_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.RESUME);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.SET_AGENT_STATUS:\n            try {\n                const statusInfo = message.data.statusInfo || {};\n                const enqueueNextState = message.data.enqueueNextState || false;\n                const payload = await vendorConnector.setAgentStatus(message.data.agentStatus, statusInfo, enqueueNextState);\n                Validator.validateClassObject(payload, GenericResult);\n                const { success } = payload;\n                dispatchEvent(constants.EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.SET_AGENT_STATUS);\n                } else {\n                    if (message.data.statusInfo) {\n                        dispatchEvent(constants.EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success: false });\n                    }\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.INVALID_AGENT_STATUS:\n                            dispatchError(constants.ERROR_TYPE.INVALID_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.SET_AGENT_STATUS);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.SET_AGENT_STATUS);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.GET_AGENT_STATUS:\n            try {\n                const payload = await vendorConnector.getAgentStatus();\n                Validator.validateClassObject(payload, AgentVendorStatusInfo);\n                dispatchEvent(constants.EVENT_TYPE.GET_AGENT_STATUS_RESULT, payload);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.GET_AGENT_STATUS);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.GET_AGENT_STATUS);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.DIAL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const isCallback = message.data.params && message.data.params.indexOf(constants.DIAL_OPTIONS.CALLBACK) >= 0;\n                const payload = await telephonyConnector.dial(new Contact(message.data.contact),\n                                                              new DialOptions({ isCallback }));\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                // If connectors wants this to be created as callback \n                if (constants.CALL_TYPE.DIALED_CALLBACK.toLowerCase() === call.callType.toLowerCase() && isCallback) {\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED, call);\n                } else { // continue treating this as outbound\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_STARTED, call);\n                }\n            } catch (e) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_FAILED);\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.DIAL);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.VOICE.INVALID_DESTINATION:\n                            dispatchError(constants.ERROR_TYPE.VOICE.INVALID_DESTINATION, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.DIAL);\n                            break;\n                        case constants.ERROR_TYPE.GENERIC_ERROR:\n                            dispatchError(constants.ERROR_TYPE.GENERIC_ERROR, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.DIAL);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.DIAL);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.SEND_DIGITS:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                await telephonyConnector.sendDigits(message.data.digits);\n            } catch (e) {\n                dispatchEventLog(constants.MESSAGE_TYPE.VOICE.SEND_DIGITS, message.data.digits, true);\n            }\n            break;\n        case constants.MESSAGE_TYPE.VOICE.GET_PHONE_CONTACTS:\n            try  {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.getPhoneContacts(message.data.filter);\n                Validator.validateClassObject(payload, PhoneContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        type: contact.type,\n                        name: contact.name,\n                        phoneNumber: contact.phoneNumber,\n                        prefix: contact.prefix,\n                        extension: contact.extension,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        availability: contact.availability,\n                        queueWaitTime: contact.queueWaitTime,\n                        recordId: contact.recordId,\n                        description: contact.description\n                    };\n                });\n                dispatchEvent(constants.EVENT_TYPE.VOICE.PHONE_CONTACTS, {\n                    contacts, contactTypes: payload.contactTypes\n                });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.GET_PHONE_CONTACTS);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_GET_PHONE_CONTACTS, e, constants.MESSAGE_TYPE.VOICE.GET_PHONE_CONTACTS);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.GET_CONTACTS:\n            try  {\n                // TODO: Update this to vendorConnetor getContacts() when demo connector story is done.\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.getPhoneContacts(message.data.filter);\n                Validator.validateClassObject(payload, PhoneContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        type: contact.type,\n                        name: contact.name,\n                        phoneNumber: contact.phoneNumber,\n                        prefix: contact.prefix,\n                        extension: contact.extension,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        availability: contact.availability,\n                        queueWaitTime: contact.queueWaitTime,\n                        recordId: contact.recordId,\n                        description: contact.description\n                    };\n                });\n                dispatchEvent(constants.EVENT_TYPE.GET_CONTACTS_RESULT, {\n                    contacts, contactTypes: payload.contactTypes\n                });\n            } catch (e) {\n                dispatchCustomError(e, constants.MESSAGE_TYPE.GET_CONTACTS);\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.SWAP_PARTICIPANTS:\n            try {\n                // TODO: Create PhoneCall from call1.callId & call2.callId\n                // TODO: rename to call1 and call2\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.swap(message.data.callToHold, message.data.callToResume);\n                publishEvent({ eventType: constants.EVENT_TYPE.VOICE.PARTICIPANTS_SWAPPED, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.SWAP_PARTICIPANTS);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_SWAP_PARTICIPANTS, e, constants.MESSAGE_TYPE.VOICE.SWAP_PARTICIPANTS);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.CONFERENCE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.conference(message.data.calls);\n                publishEvent({ eventType: constants.EVENT_TYPE.VOICE.PARTICIPANTS_CONFERENCED, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.CONFERENCE);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_CONFERENCE, e, constants.MESSAGE_TYPE.VOICE.CONFERENCE);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.ADD_PARTICIPANT:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.addParticipant(new Contact(message.data.contact), message.data.call, message.data.isBlindTransfer);\n                publishEvent({ eventType: constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED, payload });\n                if (message.data.isBlindTransfer) {\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.HANGUP, message.data.call);\n                }\n            } catch (e) {\n                // TODO: Can we avoid passing in reason field\n                dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED, {\n                    reason: constants.EVENT_TYPE.ERROR.toLowerCase()\n                });\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.ADD_PARTICIPANT);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.VOICE.INVALID_DESTINATION:\n                            dispatchError(constants.ERROR_TYPE.VOICE.INVALID_DESTINATION, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.ADD_PARTICIPANT);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_ADD_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.ADD_PARTICIPANT);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.PAUSE_RECORDING:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.pauseRecording(message.data.call);\n                publishEvent({ eventType: constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.PAUSE_RECORDING);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_PAUSE_RECORDING, e, constants.MESSAGE_TYPE.VOICE.PAUSE_RECORDING);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.RESUME_RECORDING:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.resumeRecording(message.data.call);\n                publishEvent({ eventType: constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.RESUME_RECORDING);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_RESUME_RECORDING, e, constants.MESSAGE_TYPE.VOICE.RESUME_RECORDING);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.LOGOUT:\n            try {\n                const payload = await vendorConnector.logout();\n                Validator.validateClassObject(payload, LogoutResult);\n                const { success, loginFrameHeight } = payload;\n                dispatchEvent(constants.EVENT_TYPE.LOGOUT_RESULT, { success, loginFrameHeight });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.LOGOUT);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_OUT, e, constants.MESSAGE_TYPE.LOGOUT);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.MESSAGE:\n            // TODO: Define a return type for handling message\n            vendorConnector.handleMessage(message.data.message);\n        break;\n        case constants.MESSAGE_TYPE.VOICE.WRAP_UP_CALL: {\n            const telephonyConnector = await vendorConnector.getTelephonyConnector();\n            telephonyConnector.wrapUpCall(message.data.call);\n        }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.AGENT_AVAILABLE: {\n            if (message.data && message.data.isAvailable) {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                for (const callId in activeCalls) {\n                    const call = activeCalls[callId];\n                    const shouldReplay = call.callInfo ? call.callInfo.isReplayable : true;\n                    const isSupervisorCall = call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.SUPERVISOR;\n                    const hasSupervisorBargedIn = isSupervisorCall && call.callAttributes && call.callAttributes.hasSupervisorBargedIn;\n                    if (shouldReplay) {\n                        call.isReplayedCall = true;\n                        switch(call.state) {\n                            case constants.CALL_STATE.CONNECTED:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_CONNECTED, call);\n                                    if (hasSupervisorBargedIn) {\n                                        dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_BARGED_IN, call);\n                                    }\n                                    break;\n                                }\n                                dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_CONNECTED, call);\n                                break;\n                            case constants.CALL_STATE.RINGING:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_STARTED, call);\n                                    break;\n                                }\n                                dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_STARTED, call);\n                                break;\n                            case constants.CALL_STATE.TRANSFERRING:\n                                dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            case constants.CALL_STATE.TRANSFERRED:\n                                dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.SET_AGENT_CONFIG:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.setAgentConfig(message.data.config);\n                Validator.validateClassObject(result, GenericResult);\n                dispatchEvent(constants.EVENT_TYPE.VOICE.AGENT_CONFIG_UPDATED, result);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.SET_AGENT_CONFIG);\n                } else {\n                    dispatchError(getErrorType(e) === constants.ERROR_TYPE.VOICE.CAN_NOT_UPDATE_PHONE_NUMBER ? constants.ERROR_TYPE.VOICE.CAN_NOT_UPDATE_PHONE_NUMBER : constants.ERROR_TYPE.VOICE.CAN_NOT_SET_AGENT_CONFIG , getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.SET_AGENT_CONFIG);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.GET_SIGNED_RECORDING_URL:\n            try {\n                const { recordingUrl, vendorCallKey, callId } = message.data;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.getSignedRecordingUrl(recordingUrl, vendorCallKey, callId);\n                Validator.validateClassObject(result, SignedRecordingUrlResult);\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SIGNED_RECORDING_URL, result);\n            } catch (e) {\n                // In case of an error, we want to show an error message in the recording player\n                const signedRecordingUrlResult = new SignedRecordingUrlResult({\n                    success: false\n                });\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SIGNED_RECORDING_URL, signedRecordingUrlResult, false);\n                dispatchEventLog(constants.MESSAGE_TYPE.VOICE.GET_SIGNED_RECORDING_URL, signedRecordingUrlResult, true);\n            }\n        break;\n        case constants.MESSAGE_TYPE.DOWNLOAD_VENDOR_LOGS:\n            vendorConnector.downloadLogs(getLogs());\n        break;\n        case constants.MESSAGE_TYPE.LOG: {\n                const { logLevel, logMessage, payload } = message.data;\n                vendorConnector.logMessageToVendor(logLevel, logMessage, payload);\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.SUPERVISE_CALL:\n            try {\n                isSupervisorConnected = true;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.superviseCall(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                const agentConfigResult = await telephonyConnector.getAgentConfig();\n                if(agentConfigResult.selectedPhone.type === constants.PHONE_TYPE.SOFT_PHONE) {\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_CONNECTED, result.call);\n                } else {\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_STARTED, result.call);\n                }\n            } catch (e){\n                isSupervisorConnected = false;\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.SUPERVISE_CALL);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_SUPERVISE_CALL, e, constants.MESSAGE_TYPE.VOICE.SUPERVISE_CALL);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.SUPERVISOR_DISCONNECT:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.supervisorDisconnect(message.data.call);\n                Validator.validateClassObject(result, SupervisorHangupResult);\n                isSupervisorConnected = false;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP, result.calls);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.SUPERVISOR_DISCONNECT);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_DISCONNECT_SUPERVISOR, e, constants.MESSAGE_TYPE.VOICE.SUPERVISOR_DISCONNECT);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.SUPERVISOR_BARGE_IN:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.supervisorBargeIn(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_BARGED_IN, result.call );\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.SUPERVISOR_BARGE_IN);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_BARGE_IN_SUPERVISOR, e, constants.MESSAGE_TYPE.VOICE.SUPERVISOR_BARGE_IN);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.AGENT_WORK_EVENT: {\n            let { workItemId, workId, workEvent } = message.data.agentWork;\n            vendorConnector.onAgentWorkEvent({\n                workItemId,\n                workId,\n                workEvent\n            });\n        }\n        break;\n        default:\n            break;\n    }\n}\n\n\nasync function windowMessageHandler(message) {\n    switch (message.data.type) {\n        case constants.MESSAGE_TYPE.SETUP_CONNECTOR: {\n            const sfDomain = /^https:\\/\\/[\\w-.]+(lightning\\.[\\w]+\\.soma\\.force\\.com|\\.lightning\\.force\\.com|\\.lightning\\.pc-rnd\\.force\\.com|\\.stm\\.force\\.com|\\.vf\\.force\\.com|\\.salesforce\\.com|\\.my\\.salesforce-sites\\.com|\\.lightning\\.localhost\\.[\\w]+\\.force.com)$/;\n            const originUrl = new URL(message.origin);\n            const url = originUrl.protocol + '//' + originUrl.hostname;\n\n            if (sfDomain.test(url)) {\n                channelPort = message.ports[0];\n                channelPort.onmessage = channelMessageHandler;\n                dispatchEventLog(constants.MESSAGE_TYPE.SETUP_CONNECTOR, exposedConnectorConfig(message.data.connectorConfig), false);\n                try {\n                    const payload = await vendorConnector.init(message.data.connectorConfig);\n                    Validator.validateClassObject(payload, InitResult);\n                    if (payload.showStorageAccess) {\n                        dispatchEvent(constants.EVENT_TYPE.SHOW_STORAGE_ACCESS, {\n                            success: true\n                        });\n                    } else if (payload.showLogin) {\n                        dispatchEvent(constants.EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        });\n                    } else if (payload.isSilentLogin) {\n                        dispatchEvent(constants.EVENT_TYPE.SHOW_LOGIN, {\n                            isSilentLogin: payload.isSilentLogin\n                        });\n                    } else {\n                        setConnectorReady();\n                    }\n                } catch (e) {\n                    if (e instanceof CustomError) {\n                        dispatchCustomError(e, constants.MESSAGE_TYPE.SETUP_CONNECTOR);\n                    } else {\n                        switch(getErrorType(e)) {\n                            case constants.ERROR_TYPE.VOICE.INVALID_PARAMS:\n                                dispatchError(constants.ERROR_TYPE.VOICE.INVALID_PARAMS, getErrorMessage(e), constants.MESSAGE_TYPE.SETUP_CONNECTOR);\n                                break;\n                            default:\n                                dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_IN, getErrorMessage(e), constants.MESSAGE_TYPE.SETUP_CONNECTOR);\n                                break;\n                        }\n                    }\n                }\n            }\n            window.removeEventListener('message', windowMessageHandler);\n        }\n            break;\n        default:\n            break;\n    }\n}\n\nfunction exposedConnectorConfig(payload) {\n    payload = payload || {};\n    let obj = {};\n    //properties that are equal to key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS.forEach(prop => {\n        if (payload.hasOwnProperty(prop)) {\n            obj[prop] = payload[prop];\n        }\n    });\n    //properties that start with key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH.forEach(prop => {\n        Object.keys(payload).forEach(key => {\n            if (key.startsWith(prop) && !CONNECTOR_CONFIG_EXCEPTION_FIELDS.includes(key)) {\n                obj[key] = payload[key];\n            }\n        });\n    });\n\n    return obj;\n}\n\nfunction validatePayload(payload, payloadType, errorType, eventType) {\n    try {\n        Validator.validateClassObject(payload, payloadType);\n        return true;\n    } catch (e) {\n        if (errorType) {\n            dispatchError(errorType, e, eventType);\n        }\n        return false;\n    }\n}\n\n/*========================== Exported Functions ==========================*/\n/**\n * Initialize a vendor connector\n * @param {VendorConnector} connector\n */\nexport function initializeConnector(connector) {\n    vendorConnector = connector;\n    window.addEventListener('message', windowMessageHandler);\n}\n\n/**\n * Publish an event or error log to Salesforce\n * @param {object} param\n * @param {string} param.eventType Any event type to be logged\n * @param {object} param.payload Any payload for the log that needs to be logged\n * @param {boolean} param.isError\n */\nexport function publishLog({ eventType, payload, isError }) {\n    dispatchEventLog(eventType, payload, isError);\n}\n\n/**\n * Publish a telephony error to Salesforce\n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\"|\"AGENT_ERROR\"|\"SOFTPHONE_ERROR\")} param.eventType Event type to publish.\n * @param {object} param.error Error object representing the error\n */\nexport function publishError({ eventType, error }) {\n    if (error instanceof CustomError) {\n        dispatchCustomError(error, eventType);\n        return;\n    }\n\n    switch(eventType) {\n        case constants.EVENT_TYPE.LOGIN_RESULT:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_IN, error, constants.EVENT_TYPE.LOGIN_RESULT);\n            break;\n        case constants.EVENT_TYPE.LOGOUT_RESULT:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_OUT, error, constants.EVENT_TYPE.LOGOUT_RESULT);\n            break;\n        case constants.EVENT_TYPE.VOICE.CALL_STARTED:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.VOICE.CALL_STARTED);\n            break;\n        case constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED);\n            break;\n        case constants.EVENT_TYPE.VOICE.CALL_CONNECTED:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.VOICE.CALL_CONNECTED);\n            break;\n        case constants.EVENT_TYPE.VOICE.HANGUP: \n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_END_THE_CALL, error, constants.EVENT_TYPE.VOICE.HANGUP);\n            break;\n        case constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED:\n            dispatchError(getErrorType(error) === constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT ? constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT : constants.ERROR_TYPE.VOICE.CAN_NOT_ADD_PARTICIPANT, error, constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED);\n            break;\n        case constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_CONNECT_PARTICIPANT, error, constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED);\n            break;\n        case constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_HANGUP_PARTICIPANT, error, constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED); \n            break;\n        case constants.EVENT_TYPE.VOICE.MUTE_TOGGLE:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_TOGGLE_MUTE, error, constants.EVENT_TYPE.VOICE.MUTE_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.VOICE.HOLD_TOGGLE: \n            dispatchError(getErrorType(error) === constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT ? constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT : constants.ERROR_TYPE.VOICE.CAN_NOT_TOGGLE_HOLD, error, constants.EVENT_TYPE.VOICE.HOLD_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_TOGGLE_RECORD, error, constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.VOICE.PARTICIPANTS_SWAPPED: \n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_SWAP_PARTICIPANTS, error, constants.EVENT_TYPE.VOICE.PARTICIPANTS_SWAPPED);\n            break;\n        case constants.EVENT_TYPE.VOICE.PARTICIPANTS_CONFERENCED:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_CONFERENCE, error, constants.EVENT_TYPE.VOICE.PARTICIPANTS_CONFERENCED);\n            break;\n        case constants.EVENT_TYPE.VOICE.AGENT_ERROR:\n            dispatchError(constants.ERROR_TYPE.VOICE.AGENT_ERROR, error, constants.EVENT_TYPE.VOICE.AGENT_ERROR);\n            break;\n        case constants.EVENT_TYPE.VOICE.SOFTPHONE_ERROR:\n            switch(getErrorType(error)) {\n                case constants.ERROR_TYPE.VOICE.UNSUPPORTED_BROWSER:\n                    dispatchError(constants.ERROR_TYPE.VOICE.UNSUPPORTED_BROWSER, error, constants.EVENT_TYPE.VOICE.SOFTPHONE_ERROR);\n                    break;\n                case constants.ERROR_TYPE.VOICE.MICROPHONE_NOT_SHARED:\n                    dispatchError(constants.ERROR_TYPE.VOICE.MICROPHONE_NOT_SHARED, error, constants.EVENT_TYPE.VOICE.SOFTPHONE_ERROR);\n                    break;\n                default:\n                    dispatchError(constants.ERROR_TYPE.GENERIC_ERROR, error, constants.EVENT_TYPE.VOICE.SOFTPHONE_ERROR);\n            }\n            break;\n        default:\n            console.error('Unhandled error scenario with arguments ', arguments);\n    }\n}\n\n/**\n * Publish an event to Sfdc. The event payload will be verified to be the correct type before being published. \n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\")} param.eventType Event type to publish\n * @param {object} param.payload Payload for the event. Must to be an object of the payload class associated with the EVENT_TYPE else the event is NOT dispatched\n * @param {boolean} param.registerLog Boolean to opt out of registering logs for events\n * LOGIN_RESULT - GenericResult\n * LOGOUT_RESULT - LogoutResult\n * CALL_STARTED - CallResult\n * QUEUED_CALL_STARTED - CallResult\n * CALL_CONNECTED - CallResult\n * HANGUP - CallResult\n * PARTICIPANT_CONNECTED - ParticipantResult\n * PARTICIPANT_ADDED - ParticipantResult\n * PARTICIPANTS_SWAPPED - HoldToggleResult\n * PARTICIPANTS_CONFERENCED - HoldToggleResult\n * MESSAGE - object\n * MUTE_TOGGLE - MuteToggleResult\n * HOLD_TOGGLE - HoldToggleResult\n * RECORDING_TOGGLE - RecordingToggleResult\n */\nexport async function publishEvent({ eventType, payload, registerLog = true }) {\n    switch(eventType) {\n        case constants.EVENT_TYPE.LOGIN_RESULT: {\n            if (validatePayload(payload, GenericResult, constants.ERROR_TYPE.CAN_NOT_LOG_IN, constants.EVENT_TYPE.LOGIN_RESULT)) {\n                dispatchEvent(constants.EVENT_TYPE.LOGIN_RESULT, payload, registerLog);\n                if (payload.success) {\n                    setConnectorReady();\n                }\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.LOGOUT_RESULT:\n            if (validatePayload(payload, LogoutResult, constants.ERROR_TYPE.CAN_NOT_LOG_OUT, constants.EVENT_TYPE.LOGOUT_RESULT)) {\n                dispatchEvent(constants.EVENT_TYPE.LOGOUT_RESULT, {\n                    success: payload.success,\n                    loginFrameHeight: payload.loginFrameHeight\n                }, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.VOICE.CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.VOICE.CALL_STARTED)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.EVENT_TYPE.VOICE.CALL_CONNECTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.VOICE.CALL_CONNECTED)) {\n                initAudioStats();\n                if (isSupervisorConnected) {\n                    const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                    const hangupPayload = await telephonyConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP, hangupPayload, true /* ignoring registerLog for critical event*/);\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n                    break;\n                } \n                dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.EVENT_TYPE.VOICE.HANGUP: {\n            if (validatePayload(payload, HangupResult, constants.ERROR_TYPE.VOICE.CAN_NOT_END_THE_CALL, constants.EVENT_TYPE.VOICE.HANGUP)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.HANGUP, payload.calls, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED: {\n            if (validatePayload(payload, ParticipantResult, constants.ERROR_TYPE.VOICE.CAN_NOT_ADD_PARTICIPANT, constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED)) {\n                const { initialCallHasEnded, callInfo, phoneNumber, callId } = payload;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    phoneNumber,\n                    callId\n                }, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED: {\n            if (validatePayload(payload, ParticipantResult, constants.ERROR_TYPE.VOICE.CAN_NOT_CONNECT_PARTICIPANT, constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED)) {\n                const { initialCallHasEnded, callInfo, phoneNumber, callId } = payload;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    phoneNumber,\n                    callId\n                }, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED: {\n            // TODO: The logic here needs to be modified. Ideally firing CallResult with \n            // correct participantType should do the trick but we are firing PARTICIPANT_CONNECTED because of a bug W-8601645\n            // Once the bug is fixed, this code needs to be updated\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.VOICE.CAN_NOT_HANGUP_PARTICIPANT, constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED)) { \n                const { call } = payload;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                if (validatePayload(activeCallsResult, ActiveCallsResult)) {\n                    // when no more active calls, fire HANGUP\n                    const activeCalls = activeCallsResult.activeCalls;\n                    if (activeCalls.length === 0) {\n                        dispatchEvent(constants.EVENT_TYPE.VOICE.HANGUP, call, true /* ignoring registerLog for critical event*/);\n                    } else if (call && call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.INITIAL_CALLER) {\n                        // when there is still transfer call, based on the state of the transfer call, fire PARTICIPANT_ADDED or PARTICIPANT_CONNECTED\n                        const transferCall = Object.values(activeCalls).filter((obj) => obj['callType'] === constants.CALL_TYPE.ADD_PARTICIPANT).pop();\n                        const event = transferCall.state === constants.CALL_STATE.TRANSFERRING ? constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED : constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED;\n                        dispatchEvent(event, {\n                            initialCallHasEnded : true\n                        }, true /* ignoring registerLog for critical event*/)\n                    } else {\n                        dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED, {\n                            reason: call? call.reason : null\n                        }, true /* ignoring registerLog for critical event*/);\n                    }\n                }\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.MESSAGE:\n            dispatchEvent(constants.EVENT_TYPE.MESSAGE, payload, registerLog);\n            break;\n        // TODO: Add validations for the ACW & Wrap up ended\n        case constants.EVENT_TYPE.VOICE.AFTER_CALL_WORK_STARTED:\n            dispatchEvent(constants.EVENT_TYPE.VOICE.AFTER_CALL_WORK_STARTED, payload, registerLog);\n            break;\n        case constants.EVENT_TYPE.VOICE.WRAP_UP_ENDED:\n            dispatchEvent(constants.EVENT_TYPE.VOICE.WRAP_UP_ENDED, payload, registerLog);\n            break;\n        /* This is only added to aid in connector development */\n        case constants.EVENT_TYPE.REMOTE_CONTROLLER:\n            channelMessageHandler(payload);\n            break;\n        case constants.EVENT_TYPE.VOICE.MUTE_TOGGLE:\n            if (validatePayload(payload, MuteToggleResult, constants.ERROR_TYPE.VOICE.CAN_NOT_TOGGLE_MUTE, constants.EVENT_TYPE.VOICE.MUTE_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.MUTE_TOGGLE, payload, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.VOICE.HOLD_TOGGLE: {\n            const { isThirdPartyOnHold, isCustomerOnHold, calls} = payload;\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.VOICE.CAN_NOT_TOGGLE_HOLD, constants.EVENT_TYPE.VOICE.HOLD_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE: {\n            const { isRecordingPaused,\n                contactId,\n                initialContactId,\n                instanceId,\n                region\n            } = payload;\n            if (validatePayload(payload, RecordingToggleResult, constants.ERROR_TYPE.VOICE.CAN_NOT_TOGGLE_RECORD, constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE, {\n                    isRecordingPaused,\n                    contactId,\n                    initialContactId,\n                    instanceId,\n                    region\n                }, registerLog);\n            }\n        break;\n        }\n        case constants.EVENT_TYPE.VOICE.PARTICIPANTS_SWAPPED: {\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.VOICE.CAN_NOT_SWAP_PARTICIPANTS, constants.EVENT_TYPE.VOICE.PARTICIPANTS_SWAPPED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold, calls } = payload;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, true /* ignoring registerLog for critical event*/);\n            }\n        }\n        break;\n        case constants.EVENT_TYPE.VOICE.PARTICIPANTS_CONFERENCED: {\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.VOICE.CAN_NOT_CONFERENCE, constants.EVENT_TYPE.VOICE.PARTICIPANTS_CONFERENCED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold } = payload;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold\n                }, true /* ignoring registerLog for critical event*/);\n            }\n        break;\n        }\n        case constants.EVENT_TYPE.VOICE.UPDATE_AUDIO_STATS: {\n            if (validatePayload(payload, AudioStats)) {\n                if (payload.stats) {\n                    updateAudioStats(payload.stats);\n                }\n                if (payload.isAudioStatsCompleted && payload.callId) {\n                    const callId = payload.callId;\n                    const mos = getMOS();\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.UPDATE_AUDIO_STATS_COMPLETED, {callId, mos}, registerLog);\n                }\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.VOICE.SUPERVISOR_BARGED_IN: {\n            if (validatePayload(payload, SuperviseCallResult, constants.ERROR_TYPE.VOICE.CAN_NOT_BARGE_IN_SUPERVISOR, constants.EVENT_TYPE.VOICE.SUPERVISOR_BARGED_IN)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_BARGED_IN, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.VOICE.CALL_BARGED_IN: {\n            if (validatePayload(payload, SupervisedCallInfo,  constants.ERROR_TYPE.GENERIC_ERROR, constants.EVENT_TYPE.VOICE.CALL_BARGED_IN)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_BARGED_IN, payload, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_STARTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.ERROR_TYPE.VOICE.CAN_NOT_SUPERVISE_CALL, constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_STARTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_CONNECTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.ERROR_TYPE.VOICE.CAN_NOT_SUPERVISE_CALL, constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_CONNECTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP: {\n            if (validatePayload(payload, SupervisorHangupResult,  constants.ERROR_TYPE.VOICE.CAN_NOT_DISCONNECT_SUPERVISOR, constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP)) {\n                isSupervisorConnected = false;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP, payload.calls, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.SET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentStatusInfo,  constants.ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, constants.EVENT_TYPE.SET_AGENT_STATUS)) {\n                const statusId = payload.statusId;\n                dispatchEvent(constants.EVENT_TYPE.SET_AGENT_STATUS, { statusId }, registerLog);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.VOICE.SHOW_TRANSFER_VIEW: {\n            dispatchEvent(constants.EVENT_TYPE.VOICE.SHOW_TRANSFER_VIEW, payload);\n            break;\n        }\n\n        case constants.EVENT_TYPE.STORAGE_ACCESS_RESULT: {\n            if(validatePayload(payload, ShowStorageAccessResult, constants.ERROR_TYPE.INVALID_STORAGE_ACCESS_RESULT, constants.EVENT_TYPE.STORAGE_ACCESS_RESULT)) {\n                dispatchEvent(constants.EVENT_TYPE.STORAGE_ACCESS_RESULT, payload);\n                if(payload.success) {\n                    if (payload.showLogin) {\n                        dispatchEvent(constants.EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        }, registerLog);\n                    } else {\n                        setConnectorReady();\n                    }   \n                }\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.EVENT_TYPE.GET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentVendorStatusInfo, constants.ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, constants.EVENT_TYPE.GET_AGENT_STATUS)) {\n                dispatchEvent(constants.EVENT_TYPE.GET_AGENT_STATUS, payload, registerLog);\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.EVENT_TYPE.STATE_CHANGE: {\n            if(validatePayload(payload, StateChangeResult, constants.ERROR_TYPE.INVALID_STATE_CHANGE_RESULT, constants.EVENT_TYPE.STATE_CHANGE)) {\n                dispatchEvent(constants.EVENT_TYPE.STATE_CHANGE, payload);\n            }\n            break;\n        }\n    }\n}\n"],"sourceRoot":""}