{"version":3,"sources":["webpack://SCVConnectorBase/webpack/universalModuleDefinition","webpack://SCVConnectorBase/webpack/bootstrap","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/createClass.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/typeof.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/regenerator/index.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/getPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/inherits.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/toPropertyKey.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/wrapNativeSuper.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/toPrimitive.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/isNativeFunction.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/construct.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js","webpack://SCVConnectorBase/./src/main/constants.js","webpack://SCVConnectorBase/./src/main/logger.js","webpack://SCVConnectorBase/./src/main/downloadData.js","webpack://SCVConnectorBase/./src/main/types.js","webpack://SCVConnectorBase/./src/main/mosUtil.js","webpack://SCVConnectorBase/./src/main/baseConnector.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","toPropertyKey","_defineProperties","target","props","length","descriptor","configurable","writable","Constructor","protoProps","staticProps","instance","TypeError","obj","_typeof","iterator","constructor","runtime","regeneratorRuntime","accidentalStrictMode","globalThis","Function","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","fn","self","args","arguments","apply","err","undefined","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","subClass","superClass","_setPrototypeOf","toPrimitive","assertThisInitialized","isNativeFunction","construct","_wrapNativeSuper","Class","_cache","Map","has","set","Wrapper","e","String","Number","_regeneratorRuntime","a","asyncIterator","u","wrap","Generator","Context","makeInvokeMethod","tryCatch","type","h","f","y","GeneratorFunction","GeneratorFunctionPrototype","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","__await","callInvokeWithMethodAndArg","Error","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","displayName","isGeneratorFunction","mark","awrap","async","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","ReferenceError","toString","indexOf","isNativeReflectConstruct","Reflect","_isNativeReflectConstruct","Boolean","valueOf","MESSAGE_TYPE","SETUP_CONNECTOR","CONNECTOR_READY","LOG","TELEPHONY_EVENT_DISPATCHED","SET_AGENT_STATUS","GET_AGENT_STATUS","LOGOUT","MESSAGE","DOWNLOAD_VENDOR_LOGS","AGENT_WORK_EVENT","GET_CONTACTS","VOICE","ACCEPT_CALL","DECLINE_CALL","END_CALL","MUTE","UNMUTE","HOLD","RESUME","DIAL","SEND_DIGITS","GET_PHONE_CONTACTS","SWAP_PARTICIPANTS","ADD_PARTICIPANT","CONFERENCE","PAUSE_RECORDING","RESUME_RECORDING","SUPERVISE_CALL","SUPERVISOR_BARGE_IN","SUPERVISOR_DISCONNECT","SET_AGENT_CONFIG","GET_SIGNED_RECORDING_URL","WRAP_UP_CALL","AGENT_AVAILABLE","EVENT_TYPE","ERROR","WARNING","INFO","LOGIN_STARTED","LOGIN_RESULT","LOGOUT_RESULT","SHOW_LOGIN","SET_AGENT_STATUS_RESULT","GET_AGENT_STATUS_RESULT","STATE_CHANGE","REMOTE_CONTROLLER","SHOW_STORAGE_ACCESS","STORAGE_ACCESS_RESULT","GET_CONTACTS_RESULT","QUEUED_CALL_STARTED","CALL_STARTED","CALL_CONNECTED","CALL_FAILED","MUTE_TOGGLE","HOLD_TOGGLE","PHONE_CONTACTS","PARTICIPANT_ADDED","PARTICIPANT_CONNECTED","PARTICIPANT_REMOVED","RECORDING_TOGGLE","PARTICIPANTS_SWAPPED","PARTICIPANTS_CONFERENCED","SIGNED_RECORDING_URL","UPDATE_AUDIO_STATS","UPDATE_AUDIO_STATS_COMPLETED","SUPERVISOR_BARGED_IN","SUPERVISOR_CALL_STARTED","SUPERVISOR_CALL_CONNECTED","SUPERVISOR_HANGUP","CALL_BARGED_IN","WRAP_UP_ENDED","AFTER_CALL_WORK_STARTED","AGENT_CONFIG_UPDATED","AGENT_ERROR","HANGUP","SOFTPHONE_ERROR","SHOW_TRANSFER_VIEW","INFO_TYPE","CAN_NOT_ACCEPT_THE_CALL","ERROR_TYPE","CAN_NOT_DECLINE_THE_CALL","CAN_NOT_END_THE_CALL","CAN_NOT_HOLD_CALL","CAN_NOT_RESUME_CALL","CAN_NOT_MUTE_CALL","CAN_NOT_UNMUTE_CALL","CAN_NOT_TOGGLE_MUTE","CAN_NOT_TOGGLE_HOLD","CAN_NOT_TOGGLE_RECORD","INVALID_PARTICIPANT","INVALID_PARAMS","CAN_NOT_GET_PHONE_CONTACTS","CAN_NOT_SWAP_PARTICIPANTS","CAN_NOT_CONFERENCE","INVALID_DESTINATION","INVALID_PHONE_NUMBER","CAN_NOT_HANGUP_PARTICIPANT","CAN_NOT_ADD_PARTICIPANT","CAN_NOT_CONNECT_PARTICIPANT","CAN_NOT_START_THE_CALL","CAN_NOT_PAUSE_RECORDING","CAN_NOT_RESUME_RECORDING","CAN_NOT_SET_AGENT_CONFIG","CAN_NOT_SET_CAPABILITIES","CAN_NOT_UPDATE_PHONE_NUMBER","CAN_NOT_GET_SIGNED_RECORDING_URL","CAN_NOT_SUPERVISE_CALL","CAN_NOT_DISCONNECT_SUPERVISOR","CAN_NOT_BARGE_IN_SUPERVISOR","CAN_NOT_BARGE_IN_CALL","MICROPHONE_NOT_SHARED","UNSUPPORTED_BROWSER","CUSTOM_ERROR","GENERIC_ERROR","AUTHENTICATION_ERROR","INVALID_AGENT_STATUS","CAN_NOT_GET_AGENT_STATUS","CAN_NOT_SET_AGENT_STATUS","LOGIN_REQUIRED","CAN_NOT_LOG_IN","CAN_NOT_LOG_OUT","INVALID_STATE_CHANGE_RESULT","INVALID_STORAGE_ACCESS_RESULT","AGENT_STATUS","ONLINE","OFFLINE","ACW","CALLBACK_MISSED_OR_REJECTED","PARTICIPANT_TYPE","AGENT","INITIAL_CALLER","THIRD_PARTY","SUPERVISOR","CALL_TYPE","INBOUND","OUTBOUND","CALLBACK","TRANSFER","INTERNAL_CALL","DIALED_CALLBACK","DIALER_TYPE","OUTBOUND_PREVIEW","NONE","CONTACT_TYPE","PHONEBOOK","QUEUE","PHONENUMBER","FLOW","AGENT_CONFIG_TYPE","SHOW_AGENT_SETTINGS","PHONES","SELECTED_PHONE","CAPABILITIES_TYPE","RECORD","MERGE","SWAP","DEBUG_ENABLED","CONTACT_SEARCH","VENDOR_PROVIDED_AVAILABILITY","VENDOR_PROVIDED_QUEUE_WAIT_TIME","SUPERVISOR_LISTEN_IN","MOS","BLIND_TRANSFER","TRANSFER_TO_OMNI_FLOW","PENDING_STATUS_CHANGE","SFDC_PENDING_STATE","CALL_STATE","RINGING","CONNECTED","TRANSFERRING","TRANSFERRED","ENDED","PHONE_TYPE","DESK_PHONE","SOFT_PHONE","HANGUP_REASON","PHONE_CALL_ERROR","PHONE_CALL_ENDED","AGENT_AVAILABILITY","AVAILABLE","BUSY","REMOVE_PARTICIPANT_VARIANT","ALWAYS","NEVER","ALWAYS_EXCEPT_ON_HOLD","LOG_LEVEL","LOG_SOURCE","SYSTEM","PARTNER","CONTACTS_FILTER_TYPES","CONTACT","DIRECTORY","WORK_EVENT","ASSIGNED","ACCEPTED","DECLINED","COMPLETED","CLOSED","DIAL_OPTIONS","CONNECTOR_CONFIG_EXPOSED_FIELDS","CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH","CONNECTOR_CONFIG_EXCEPTION_FIELDS","_strify","JSON","stringify","LOGS_SIZE","logs","log","logMessage","logLevel","logSource","constants","logStr","Date","toISOString","concat","join","_log","getLogs","parse","downloadLogs","data","fileName","fileType","document","dataStr","file","Blob","createElement","blobURL","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","downloadData","getTime","audioStatus","channelPort","vendorConnector","isSupervisorConnected","Constants","_objectSpread","CustomError","_Error","_ref","_this","labelName","namespace","message","_classCallCheck","_callSuper","Validator","validateString","_inherits","_createClass","Phone","_ref2","number","validateEnum","MuteToggleResult","_ref3","isMuted","ActiveCallsResult","_ref4","_ref4$activeCalls","activeCalls","activeCall","validateClassObject","PhoneCall","CapabilitiesResult","_ref5","_ref5$hasMute","hasMute","_ref5$hasRecord","hasRecord","_ref5$hasMerge","hasMerge","_ref5$hasSwap","hasSwap","_ref5$hasSignedRecord","hasSignedRecordingUrl","_ref5$debugEnabled","debugEnabled","_ref5$hasContactSearc","hasContactSearch","_ref5$hasAgentAvailab","hasAgentAvailability","_ref5$hasQueueWaitTim","hasQueueWaitTime","_ref5$supportsMos","supportsMos","_ref5$hasSupervisorLi","hasSupervisorListenIn","_ref5$hasSupervisorBa","hasSupervisorBargeIn","_ref5$hasBlindTransfe","hasBlindTransfer","_ref5$hasTransferToOm","hasTransferToOmniFlow","_ref5$hasPendingStatu","hasPendingStatusChange","_ref5$hasPhoneBook","hasPhoneBook","_ref5$hasSFDCPendingS","hasSFDCPendingState","validateBoolean","AgentConfigResult","_ref6","_ref6$phones","phones","_ref6$selectedPhone","selectedPhone","Array","AgentConfig","_ref7","RecordingToggleResult","_ref8","isRecordingPaused","_ref8$contactId","contactId","_ref8$initialContactI","initialContactId","_ref8$instanceId","instanceId","_ref8$region","region","ParticipantResult","_ref9","initialCallHasEnded","callInfo","phoneNumber","callId","CallInfo","ContactsResult","_ref10","_ref10$contacts","contacts","_ref10$contactTypes","contactTypes","contact","Contact","filterType","PhoneContactsResult","_ContactsResult","_ref11","_ref11$contacts","_ref11$contactTypes","CallResult","_ref12","HangupResult","_ref13","calls","HoldToggleResult","_ref14","isThirdPartyOnHold","isCustomerOnHold","SignedRecordingUrlResult","_ref15","success","url","duration","validateNumber","InitResult","_ref16","_ref16$showLogin","showLogin","_ref16$loginFrameHeig","loginFrameHeight","_ref16$isSilentLogin","isSilentLogin","_ref16$showStorageAcc","showStorageAccess","DialOptions","_ref17","_ref17$isCallback","isCallback","GenericResult","_ref18","LogoutResult","_ref19","_ref19$loginFrameHeig","_ref20","_ref20$callStateTimes","callStateTimestamp","isOnHold","_ref20$isMuted","_ref20$isRecordingPau","initialCallId","_ref20$queueId","queueId","_ref20$queueName","queueName","_ref20$queueTimestamp","queueTimestamp","_ref20$isSoftphoneCal","isSoftphoneCall","_ref20$acceptEnabled","acceptEnabled","_ref20$declineEnabled","declineEnabled","_ref20$muteEnabled","muteEnabled","_ref20$swapEnabled","swapEnabled","_ref20$conferenceEnab","conferenceEnabled","_ref20$holdEnabled","holdEnabled","_ref20$recordEnabled","recordEnabled","_ref20$addCallerEnabl","addCallerEnabled","_ref20$extensionEnabl","extensionEnabled","_ref20$isReplayable","isReplayable","_ref20$isBargeable","isBargeable","isExternalTransfer","_ref20$showMuteButton","showMuteButton","_ref20$showRecordButt","showRecordButton","_ref20$showAddCallerB","showAddCallerButton","_ref20$showAddBlindTr","showAddBlindTransferButton","_ref20$showMergeButto","showMergeButton","_ref20$showSwapButton","showSwapButton","_ref20$removeParticip","removeParticipantVariant","_ref20$additionalFiel","additionalFields","_ref20$isMultiParty","isMultiParty","validateDate","_ref21","id","prefix","extension","endpointARN","queue","availability","recordId","description","queueWaitTime","PhoneCallAttributes","_ref22","voiceCallId","participantType","_ref22$dialerType","dialerType","parentId","_ref22$hasSupervisorB","hasSupervisorBargedIn","_ref23","callType","state","callAttributes","reason","closeCallOnError","agentStatus","TelephonyConnector","dialOptions","digits","filter","call1","call2","parentCall","isBlindTransfer","config","recordingUrl","vendorCallKey","VendorConnector","agentWork","statusInfo","enqueueNextState","logMessageToVendor","payload","workItemId","enumValues","RegExp","test","className","AgentWork","_ref24","workId","workEvent","AgentStatusInfo","_ref25","statusId","statusApiName","statusName","AgentVendorStatusInfo","_ref26","statusType","StateChangeResult","_ref27","newVendorStateInfo","oldVendorStateInfo","SupervisedCallInfo","_ref28","from","to","supervisorName","isBargedIn","AudioStats","_ref29","stats","isAudioStatsCompleted","audioStatsElement","AudioStatsElement","_ref30","inputChannelStats","outputChannelStats","StatsInfo","_ref31","packetsCount","packetsLost","jitterBufferMillis","roundTripTimeMillis","statsCount","SuperviseCallResult","_ref32","SupervisorHangupResult","_HangupResult","_ref33","ShowStorageAccessResult","_ref34","_ref34$success","_ref34$showLogin","_ref34$loginFrameHeig","ContactsFilter","param","_param$contains","contains","_param$limit","limit","_param$offset","offset","_param$types","types","_step","_iterator","_createForOfIteratorHelper","getMOSByStream","streamType","avgStats","getAvgStats","effectiveLatency","R","enableMos","getMOS","inputChannelMOS","ouputChannelMOS","Math","min","initAudioStats","updateAudioStats","statsArray","getErrorType","getErrorMessage","dispatchEventLog","eventType","isError","sanitizedPayload","sanitizePayload","isArray","element","postMessage","dispatchEvent","registerLog","telephonyEventType","telephonyEventPayload","dispatchError","errorType","console","dispatchCustomError","customError","dispatchInfo","setConnectorReady","_setConnectorReady","_asyncToGenerator","_callee","_capabilities","telephonyConnector","agentConfigResult","capabilitiesResult","activeCallsResult","_context","getTelephonyConnector","getAgentConfig","getCapabilities","getActiveCalls","agentConfig","_defineProperty","capabilities","callInProgress","t0","channelMessageHandler","_x","_channelMessageHandler","_callee2","hangupPayload","_telephonyConnector","_payload","_call","_telephonyConnector2","_payload2","_telephonyConnector3","_payload3","_telephonyConnector4","_payload4","_telephonyConnector5","_payload5","_telephonyConnector6","_payload6","_payload7","_payload8","_telephonyConnector7","_payload9","_call2","_telephonyConnector8","_telephonyConnector9","_payload10","_payload11","_contacts","_telephonyConnector10","_payload12","_telephonyConnector11","_payload13","_telephonyConnector12","_payload14","_telephonyConnector13","_payload15","_telephonyConnector14","_payload16","_payload17","_success","_telephonyConnector16","_activeCallsResult","_activeCalls","_call3","shouldReplay","isSupervisorCall","_telephonyConnector17","result","_message$data","_callId","_telephonyConnector18","_result","signedRecordingUrlResult","_message$data2","_payload18","_telephonyConnector19","_result2","_telephonyConnector20","_result3","_telephonyConnector21","_result4","_message$data$agentWo","_context2","toLowerCase","supervisorDisconnect","acceptCall","t1","messagetype","additionalInfo","declineCall","t2","endCall","t3","mute","publishEvent","t4","unmute","t5","hold","t6","t7","resume","t8","t9","setAgentStatus","t10","t11","getAgentStatus","t12","params","dial","t13","t14","sendDigits","t15","getPhoneContacts","map","t16","getContacts","t17","swap","callToHold","callToResume","t18","conference","t19","addParticipant","t20","t21","pauseRecording","t22","resumeRecording","t23","logout","t24","handleMessage","wrapUpCall","isAvailable","t25","t26","isReplayedCall","t27","setAgentConfig","t28","getSignedRecordingUrl","t29","superviseCall","t30","t31","supervisorBargeIn","t32","onAgentWorkEvent","windowMessageHandler","_x2","_windowMessageHandler","_callee3","sfDomain","originUrl","_context3","origin","protocol","hostname","ports","onmessage","exposedConnectorConfig","connectorConfig","init","window","removeEventListener","prop","startsWith","includes","validatePayload","payloadType","initializeConnector","connector","addEventListener","publishLog","publishError","_x3","_publishEvent","_callee4","_ref3$registerLog","_initialCallHasEnded","_callInfo","_phoneNumber","_callId2","_telephonyConnector22","transferCall","_isThirdPartyOnHold","_isCustomerOnHold","_calls","_isThirdPartyOnHold2","_isCustomerOnHold2","_callId3","mos","_context4"],"mappings":"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","file":"scv-connector-base.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SCVConnectorBase\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SCVConnectorBase\"] = factory();\n\telse\n\t\troot[\"SCVConnectorBase\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(o);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction toPropertyKey(t) {\n  var i = toPrimitive(t, \"string\");\n  return \"symbol\" == _typeof(i) ? i : i + \"\";\n}\nmodule.exports = toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var getPrototypeOf = require(\"./getPrototypeOf.js\");\nvar setPrototypeOf = require(\"./setPrototypeOf.js\");\nvar isNativeFunction = require(\"./isNativeFunction.js\");\nvar construct = require(\"./construct.js\");\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _wrapNativeSuper(Class);\n}\nmodule.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction toPrimitive(t, r) {\n  if (\"object\" != _typeof(t) || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != _typeof(i)) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nmodule.exports = toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return e;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var t,\n    e = {},\n    r = Object.prototype,\n    n = r.hasOwnProperty,\n    o = Object.defineProperty || function (t, e, r) {\n      t[e] = r.value;\n    },\n    i = \"function\" == typeof Symbol ? Symbol : {},\n    a = i.iterator || \"@@iterator\",\n    c = i.asyncIterator || \"@@asyncIterator\",\n    u = i.toStringTag || \"@@toStringTag\";\n  function define(t, e, r) {\n    return Object.defineProperty(t, e, {\n      value: r,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), t[e];\n  }\n  try {\n    define({}, \"\");\n  } catch (t) {\n    define = function define(t, e, r) {\n      return t[e] = r;\n    };\n  }\n  function wrap(t, e, r, n) {\n    var i = e && e.prototype instanceof Generator ? e : Generator,\n      a = Object.create(i.prototype),\n      c = new Context(n || []);\n    return o(a, \"_invoke\", {\n      value: makeInvokeMethod(t, r, c)\n    }), a;\n  }\n  function tryCatch(t, e, r) {\n    try {\n      return {\n        type: \"normal\",\n        arg: t.call(e, r)\n      };\n    } catch (t) {\n      return {\n        type: \"throw\",\n        arg: t\n      };\n    }\n  }\n  e.wrap = wrap;\n  var h = \"suspendedStart\",\n    l = \"suspendedYield\",\n    f = \"executing\",\n    s = \"completed\",\n    y = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var p = {};\n  define(p, a, function () {\n    return this;\n  });\n  var d = Object.getPrototypeOf,\n    v = d && d(d(values([])));\n  v && v !== r && n.call(v, a) && (p = v);\n  var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n  function defineIteratorMethods(t) {\n    [\"next\", \"throw\", \"return\"].forEach(function (e) {\n      define(t, e, function (t) {\n        return this._invoke(e, t);\n      });\n    });\n  }\n  function AsyncIterator(t, e) {\n    function invoke(r, o, i, a) {\n      var c = tryCatch(t[r], t, o);\n      if (\"throw\" !== c.type) {\n        var u = c.arg,\n          h = u.value;\n        return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) {\n          invoke(\"next\", t, i, a);\n        }, function (t) {\n          invoke(\"throw\", t, i, a);\n        }) : e.resolve(h).then(function (t) {\n          u.value = t, i(u);\n        }, function (t) {\n          return invoke(\"throw\", t, i, a);\n        });\n      }\n      a(c.arg);\n    }\n    var r;\n    o(this, \"_invoke\", {\n      value: function value(t, n) {\n        function callInvokeWithMethodAndArg() {\n          return new e(function (e, r) {\n            invoke(t, n, e, r);\n          });\n        }\n        return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(e, r, n) {\n    var o = h;\n    return function (i, a) {\n      if (o === f) throw Error(\"Generator is already running\");\n      if (o === s) {\n        if (\"throw\" === i) throw a;\n        return {\n          value: t,\n          done: !0\n        };\n      }\n      for (n.method = i, n.arg = a;;) {\n        var c = n.delegate;\n        if (c) {\n          var u = maybeInvokeDelegate(c, n);\n          if (u) {\n            if (u === y) continue;\n            return u;\n          }\n        }\n        if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n          if (o === h) throw o = s, n.arg;\n          n.dispatchException(n.arg);\n        } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n        o = f;\n        var p = tryCatch(e, r, n);\n        if (\"normal\" === p.type) {\n          if (o = n.done ? s : l, p.arg === y) continue;\n          return {\n            value: p.arg,\n            done: n.done\n          };\n        }\n        \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(e, r) {\n    var n = r.method,\n      o = e.iterator[n];\n    if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n    var i = tryCatch(o, e.iterator, r.arg);\n    if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n    var a = i.arg;\n    return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n  }\n  function pushTryEntry(t) {\n    var e = {\n      tryLoc: t[0]\n    };\n    1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n  }\n  function resetTryEntry(t) {\n    var e = t.completion || {};\n    e.type = \"normal\", delete e.arg, t.completion = e;\n  }\n  function Context(t) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], t.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(e) {\n    if (e || \"\" === e) {\n      var r = e[a];\n      if (r) return r.call(e);\n      if (\"function\" == typeof e.next) return e;\n      if (!isNaN(e.length)) {\n        var o = -1,\n          i = function next() {\n            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n            return next.value = t, next.done = !0, next;\n          };\n        return i.next = i;\n      }\n    }\n    throw new TypeError(_typeof(e) + \" is not iterable\");\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), o(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n    var e = \"function\" == typeof t && t.constructor;\n    return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n  }, e.mark = function (t) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n  }, e.awrap = function (t) {\n    return {\n      __await: t\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {\n    return this;\n  }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {\n    void 0 === i && (i = Promise);\n    var a = new AsyncIterator(wrap(t, r, n, o), i);\n    return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {\n      return t.done ? t.value : a.next();\n    });\n  }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () {\n    return this;\n  }), define(g, \"toString\", function () {\n    return \"[object Generator]\";\n  }), e.keys = function (t) {\n    var e = Object(t),\n      r = [];\n    for (var n in e) r.push(n);\n    return r.reverse(), function next() {\n      for (; r.length;) {\n        var t = r.pop();\n        if (t in e) return next.value = t, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, e.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(e) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var t = this.tryEntries[0].completion;\n      if (\"throw\" === t.type) throw t.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(e) {\n      if (this.done) throw e;\n      var r = this;\n      function handle(n, o) {\n        return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n      }\n      for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n        var i = this.tryEntries[o],\n          a = i.completion;\n        if (\"root\" === i.tryLoc) return handle(\"end\");\n        if (i.tryLoc <= this.prev) {\n          var c = n.call(i, \"catchLoc\"),\n            u = n.call(i, \"finallyLoc\");\n          if (c && u) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          } else if (c) {\n            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n          } else {\n            if (!u) throw Error(\"try statement without catch or finally\");\n            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(t, e) {\n      for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n        var o = this.tryEntries[r];\n        if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n          var i = o;\n          break;\n        }\n      }\n      i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n      var a = i ? i.completion : {};\n      return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n    },\n    complete: function complete(t, e) {\n      if (\"throw\" === t.type) throw t.arg;\n      return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n    },\n    finish: function finish(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n      }\n    },\n    \"catch\": function _catch(t) {\n      for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n        var r = this.tryEntries[e];\n        if (r.tryLoc === t) {\n          var n = r.completion;\n          if (\"throw\" === n.type) {\n            var o = n.arg;\n            resetTryEntry(r);\n          }\n          return o;\n        }\n      }\n      throw Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(e, r, n) {\n      return this.delegate = {\n        iterator: values(e),\n        resultName: r,\n        nextLoc: n\n      }, \"next\" === this.method && (this.arg = t), y;\n    }\n  }, e;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _isNativeFunction(fn) {\n  try {\n    return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n  } catch (e) {\n    return typeof fn === \"function\";\n  }\n}\nmodule.exports = _isNativeFunction, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct.js\");\nfunction _construct(t, e, r) {\n  if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);\n  var o = [null];\n  o.push.apply(o, e);\n  var p = new (t.bind.apply(t, o))();\n  return r && setPrototypeOf(p, r.prototype), p;\n}\nmodule.exports = _construct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (module.exports = _isNativeReflectConstruct = function _isNativeReflectConstruct() {\n    return !!t;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports)();\n}\nmodule.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nexport default {\n    MESSAGE_TYPE: {\n        // Framework Message Types\n        SETUP_CONNECTOR: 'SETUP_CONNECTOR',\n        CONNECTOR_READY: 'CONNECTOR_READY',\n        LOG: 'LOG',\n        TELEPHONY_EVENT_DISPATCHED: 'TELEPHONY_EVENT_DISPATCHED',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        LOGOUT: 'LOGOUT',\n        MESSAGE: 'MESSAGE',\n        DOWNLOAD_VENDOR_LOGS: 'DOWNLOAD_VENDOR_LOGS',\n        AGENT_WORK_EVENT: 'AGENT_WORK_EVENT',\n        GET_CONTACTS: 'GET_CONTACTS',\n\n        // Telephony Message Types: sent from SFDC to Telephony Vendor\n        VOICE: {\n            ACCEPT_CALL: 'ACCEPT_CALL',\n            DECLINE_CALL: 'DECLINE_CALL',\n            END_CALL: 'END_CALL',\n            MUTE: 'MUTE',\n            UNMUTE: 'UNMUTE',\n            HOLD: 'HOLD',\n            RESUME: 'RESUME',\n            DIAL: 'DIAL',\n            SEND_DIGITS: 'SEND_DIGITS',\n            GET_PHONE_CONTACTS: 'GET_PHONE_CONTACTS',\n            SWAP_PARTICIPANTS: 'SWAP_PARTICIPANTS',\n            ADD_PARTICIPANT: 'ADD_PARTICIPANT',\n            CONFERENCE: 'CONFERENCE',\n            PAUSE_RECORDING: 'PAUSE_RECORDING',\n            RESUME_RECORDING: 'RESUME_RECORDING',\n            SUPERVISE_CALL: 'SUPERVISE_CALL',\n            SUPERVISOR_BARGE_IN : 'SUPERVISOR_BARGE_IN',\n            SUPERVISOR_DISCONNECT: 'SUPERVISOR_DISCONNECT',\n            SET_AGENT_CONFIG: 'SET_AGENT_CONFIG',\n            GET_SIGNED_RECORDING_URL: 'GET_SIGNED_RECORDING_URL',\n            WRAP_UP_CALL: 'WRAP_UP_CALL',\n            AGENT_AVAILABLE: 'AGENT_AVAILABLE'\n        }\n    },\n    EVENT_TYPE: {\n        ERROR: 'ERROR',\n        WARNING: 'WARNING',\n        INFO: 'INFO',\n        LOGIN_STARTED: 'LOGIN_STARTED',\n        LOGIN_RESULT: 'LOGIN_RESULT', // info about timeout, error, success etc\n        LOGOUT_RESULT: 'LOGOUT_RESULT',\n        SHOW_LOGIN: 'SHOW_LOGIN',\n        SET_AGENT_STATUS_RESULT: 'SET_AGENT_STATUS_RESULT',\n        GET_AGENT_STATUS_RESULT: 'GET_AGENT_STATUS_RESULT',\n        MESSAGE: 'MESSAGE',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        STATE_CHANGE: 'STATE_CHANGE',\n        REMOTE_CONTROLLER: 'REMOTE_CONTROLLER',\n        SHOW_STORAGE_ACCESS: 'SHOW_STORAGE_ACCESS',\n        STORAGE_ACCESS_RESULT: 'STORAGE_ACCESS_RESULT',\n        GET_CONTACTS_RESULT: 'GET_CONTACTS_RESULT',\n        VOICE: {\n            QUEUED_CALL_STARTED: 'QUEUED_CALL_STARTED',\n            CALL_STARTED: 'CALL_STARTED',\n            CALL_CONNECTED: 'CALL_CONNECTED',\n            CALL_FAILED: 'CALL_FAILED',\n            MUTE_TOGGLE: 'MUTE_TOGGLE',\n            HOLD_TOGGLE: 'HOLD_TOGGLE',\n            PHONE_CONTACTS: 'PHONE_CONTACTS',\n            PARTICIPANT_ADDED: 'PARTICIPANT_ADDED',\n            PARTICIPANT_CONNECTED: 'PARTICIPANT_CONNECTED',\n            PARTICIPANT_REMOVED: 'PARTICIPANT_REMOVED',\n            RECORDING_TOGGLE: 'RECORDING_TOGGLE',\n            PARTICIPANTS_SWAPPED: 'PARTICIPANTS_SWAPPED',\n            PARTICIPANTS_CONFERENCED: 'PARTICIPANTS_CONFERENCED',\n            SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n            UPDATE_AUDIO_STATS: 'UPDATE_AUDIO_STATS',\n            UPDATE_AUDIO_STATS_COMPLETED: 'UPDATE_AUDIO_STATS_COMPLETED',\n            SUPERVISOR_BARGED_IN: 'SUPERVISOR_BARGED_IN',\n            SUPERVISOR_CALL_STARTED : 'SUPERVISOR_CALL_STARTED',\n            SUPERVISOR_CALL_CONNECTED: 'SUPERVISOR_CALL_CONNECTED',\n            SUPERVISOR_HANGUP : 'SUPERVISOR_HANGUP',\n            CALL_BARGED_IN : 'CALL_BARGED_IN',\n            WRAP_UP_ENDED: 'WRAP_UP_ENDED',\n            AFTER_CALL_WORK_STARTED: 'AFTER_CALL_WORK_STARTED',\n            AGENT_CONFIG_UPDATED: 'AGENT_CONFIG_UPDATED',\n            AGENT_ERROR: 'AGENT_ERROR',\n            HANGUP: 'HANGUP',\n            SOFTPHONE_ERROR: 'SOFTPHONE_ERROR',\n            SHOW_TRANSFER_VIEW: 'SHOW_TRANSFER_VIEW'\n        }\n    },\n    INFO_TYPE: {\n        VOICE: {\n            CAN_NOT_ACCEPT_THE_CALL: 'CAN_NOT_ACCEPT_THE_CALL'\n        }\n    },\n    ERROR_TYPE: {\n        VOICE: {\n            CAN_NOT_DECLINE_THE_CALL: 'CAN_NOT_DECLINE_THE_CALL',\n            CAN_NOT_END_THE_CALL: 'CAN_NOT_END_THE_CALL',\n            CAN_NOT_HOLD_CALL: 'CAN_NOT_HOLD_CALL',\n            CAN_NOT_RESUME_CALL: 'CAN_NOT_RESUME_CALL',\n            CAN_NOT_MUTE_CALL: 'CAN_NOT_MUTE_CALL',\n            CAN_NOT_UNMUTE_CALL: 'CAN_NOT_UNMUTE_CALL',\n            CAN_NOT_TOGGLE_MUTE: 'CAN_NOT_TOGGLE_MUTE',\n            CAN_NOT_TOGGLE_HOLD: 'CAN_NOT_TOGGLE_HOLD',\n            CAN_NOT_TOGGLE_RECORD: 'CAN_NOT_TOGGLE_RECORD',\n            INVALID_PARTICIPANT: 'INVALID_PARTICIPANT',\n            INVALID_PARAMS: 'INVALID_PARAMS',\n            CAN_NOT_GET_PHONE_CONTACTS: 'CAN_NOT_GET_PHONE_CONTACTS',\n            CAN_NOT_SWAP_PARTICIPANTS: 'CAN_NOT_SWAP_PARTICIPANTS',\n            CAN_NOT_CONFERENCE: 'CAN_NOT_CONFERENCE',\n            INVALID_DESTINATION: 'INVALID_DESTINATION',\n            INVALID_PHONE_NUMBER: 'INVALID_PHONE_NUMBER',\n            CAN_NOT_HANGUP_PARTICIPANT: 'CAN_NOT_HANGUP_PARTICIPANT',\n            CAN_NOT_ADD_PARTICIPANT: 'CAN_NOT_ADD_PARTICIPANT',\n            CAN_NOT_CONNECT_PARTICIPANT: 'CAN_NOT_CONNECT_PARTICIPANT',\n            CAN_NOT_START_THE_CALL: 'CAN_NOT_START_THE_CALL',\n            CAN_NOT_PAUSE_RECORDING: 'CAN_NOT_PAUSE_RECORDING',\n            CAN_NOT_RESUME_RECORDING: 'CAN_NOT_RESUME_RECORDING',\n            CAN_NOT_SET_AGENT_CONFIG: 'CAN_NOT_SET_AGENT_CONFIG',\n            CAN_NOT_SET_CAPABILITIES: 'CAN_NOT_SET_CAPABILITIES',\n            CAN_NOT_UPDATE_PHONE_NUMBER: 'CAN_NOT_UPDATE_PHONE_NUMBER',\n            CAN_NOT_GET_SIGNED_RECORDING_URL: 'CAN_NOT_GET_SIGNED_RECORDING_URL',\n            CAN_NOT_SUPERVISE_CALL : 'CAN_NOT_SUPERVISE_CALL',\n            CAN_NOT_DISCONNECT_SUPERVISOR : 'CAN_NOT_DISCONNECT_SUPERVISOR',\n            CAN_NOT_BARGE_IN_SUPERVISOR: 'CAN_NOT_BARGE_IN_SUPERVISOR',\n            CAN_NOT_BARGE_IN_CALL: 'CAN_NOT_BARGE_IN_CALL',\n            AGENT_ERROR: 'AGENT_ERROR',\n            MICROPHONE_NOT_SHARED: 'MICROPHONE_NOT_SHARED',\n            UNSUPPORTED_BROWSER: 'UNSUPPORTED_BROWSER'\n        },\n        CUSTOM_ERROR: 'CUSTOM_ERROR',\n        GENERIC_ERROR: 'GENERIC_ERROR',\n        AUTHENTICATION_ERROR: 'AUTHENTICATION_ERROR',\n        INVALID_AGENT_STATUS: 'INVALID_AGENT_STATUS',\n        CAN_NOT_GET_AGENT_STATUS: 'CAN_NOT_GET_AGENT_STATUS',\n        CAN_NOT_SET_AGENT_STATUS: 'CAN_NOT_SET_AGENT_STATUS',\n        LOGIN_REQUIRED: 'LOGIN_REQUIRED',\n        CAN_NOT_LOG_IN: 'CAN_NOT_LOG_IN',\n        CAN_NOT_LOG_OUT: 'CAN_NOT_LOG_OUT',\n        INVALID_STATE_CHANGE_RESULT: 'INVALID_STATE_CHANGE_RESULT',\n        INVALID_STORAGE_ACCESS_RESULT: 'INVALID_STORAGE_ACCESS_RESULT'\n    },\n    AGENT_STATUS: {\n        ONLINE: 'Online',\n        OFFLINE: 'Offline',\n        ACW : 'AfterCallWork',\n        CALLBACK_MISSED_OR_REJECTED: 'CallbackMissedOrRejected' // Used only for Amazon; workaround for https://github.com/amazon-connect/amazon-connect-streams/issues/344\n    },\n    PARTICIPANT_TYPE: {\n        AGENT: 'Agent',\n        INITIAL_CALLER: 'Initial_Caller',\n        THIRD_PARTY: 'Third_Party',\n        SUPERVISOR: 'Supervisor'\n    },\n    CALL_TYPE: {\n        INBOUND: 'Inbound',\n        OUTBOUND: 'Outbound',\n        CALLBACK: 'Callback',\n        ADD_PARTICIPANT: 'AddParticipant',\n        TRANSFER:'Transfer',\n        INTERNAL_CALL: 'InternalCall',\n        DIALED_CALLBACK: 'DialedCallback'\n    },\n    DIALER_TYPE: {\n        OUTBOUND_PREVIEW: 'OutboundPreview',\n        NONE: 'None'\n    },\n    CONTACT_TYPE: {\n        PHONEBOOK: 'PhoneBook',\n        QUEUE: 'Queue',\n        PHONENUMBER: 'PhoneNumber',\n        AGENT: 'Agent',\n        FLOW: 'Flow'\n    },\n    AGENT_CONFIG_TYPE: {\n        SHOW_AGENT_SETTINGS: 'SHOW_AGENT_SETTINGS',\n        PHONES: 'PHONES',\n        SELECTED_PHONE: 'SELECTED_PHONE'\n    },\n    CAPABILITIES_TYPE: {\n        MUTE: 'MUTE',\n        RECORD: 'RECORD',\n        MERGE: 'MERGE',\n        SWAP: 'SWAP',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        DEBUG_ENABLED: 'DEBUG_ENABLED',\n        CONTACT_SEARCH: 'CONTACT_SEARCH',\n        VENDOR_PROVIDED_AVAILABILITY: 'VENDOR_PROVIDED_AVAILABILITY',\n        VENDOR_PROVIDED_QUEUE_WAIT_TIME: 'VENDOR_PROVIDED_QUEUE_WAIT_TIME',\n        SUPERVISOR_LISTEN_IN: 'SUPERVISOR_LISTEN_IN',\n        SUPERVISOR_BARGE_IN: 'SUPERVISOR_BARGE_IN',\n        MOS: 'MOS',\n        BLIND_TRANSFER: 'BLIND_TRANSFER',\n        TRANSFER_TO_OMNI_FLOW: 'TRANSFER_TO_OMNI_FLOW',\n        PENDING_STATUS_CHANGE: 'PENDING_STATUS_CHANGE',\n        PHONEBOOK: 'PHONEBOOK',\n        SFDC_PENDING_STATE: 'SFDC_PENDING_STATE'\n    },\n    CALL_STATE: {\n        RINGING: 'ringing',\n        CONNECTED: 'connected',\n        TRANSFERRING: 'transferring',\n        TRANSFERRED: 'transferred',\n        ENDED: 'ended'\n    },\n    PHONE_TYPE: {\n        DESK_PHONE: 'DESK_PHONE',\n        SOFT_PHONE: 'SOFT_PHONE'\n    },\n    HANGUP_REASON: {\n        PHONE_CALL_ERROR: \"error\",\n        PHONE_CALL_ENDED: \"ended\"\n    },\n    AGENT_AVAILABILITY: {\n        AVAILABLE: \"AVAILABLE\",\n        BUSY: \"BUSY\",\n        OFFLINE: \"OFFLINE\"\n    },\n    REMOVE_PARTICIPANT_VARIANT: {\n        ALWAYS : 'ALWAYS',\n        NEVER: 'NEVER',\n        ALWAYS_EXCEPT_ON_HOLD: 'ALWAYS_EXCEPT_ON_HOLD'\n    },\n    LOG_LEVEL: {\n        ERROR: \"ERROR\",\n        INFO: \"INFO\"\n    },\n    LOG_SOURCE: {\n        SYSTEM: \"SYSTEM\",\n        PARTNER: \"PARTNER\"\n    },\n    CONTACTS_FILTER_TYPES: {\n        AGENT: \"AGENT\",\n        QUEUE: \"QUEUE\",\n        CONTACT: \"CONTACT\",\n        DIRECTORY: \"DIRECTORY\",\n        FLOW: \"FLOW\",\n        AVAILABLE: \"AVAILABLE\"\n    },\n    WORK_EVENT: {\n        ASSIGNED: 'ASSIGNED',\n        ACCEPTED: 'ACCEPTED',\n        DECLINED: 'DECLINED',\n        COMPLETED: 'COMPLETED',\n        CLOSED: 'CLOSED'\n    },\n    DIAL_OPTIONS: {\n        CALLBACK: \"isCallback=true\"\n    }\n};\n\n/**\n * Fields in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS = [\n    \"/internalNameLabel\",\n    \"/reqGeneralInfo/reqAdapterUrl\",\n    \"/reqGeneralInfo/reqVendorInfoApiName\",\n    \"isACWAllowed\",\n    \"isHVSEnabled\",\n    \"orgDomainName\",\n    \"phoneServiceChannelId\",\n    \"telephonySettingsComponentFqn\"\n];\n\n/**\n * Fields that starts with string in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH = [\n    \"/reqHvcc\"\n];\n\n/**\n * Fields in the connector configuration that are NOT logged. \n */\nexport const CONNECTOR_CONFIG_EXCEPTION_FIELDS = [\n    \"/reqHvcc/reqTelephonyIntegrationCertificate\"\n];\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { downloadData } from './downloadData.js';\nimport constants from './constants';\n\n//The max size of the logs in # of characaters\nconst MAX_LOGS_SIZE = 1.5e7/2; //15 MB or 7.5M characters\n\nconst _strify = obj => (typeof obj === 'string') ? obj : JSON.stringify(obj);\n\nlet LOGS_SIZE = 0;\nlet logs = [];\n\nfunction _log(logLevel, logMessage, logSource) {\n    if(!logMessage) {\n        throw new Error(\"Log Message required\");\n    }\n    logLevel  = logLevel  || constants.LOG_LEVEL.INFO;\n    logSource = logSource || constants.LOG_SOURCE.PARTNER;\n\n    const logStr = [new Date().toISOString(), _strify(logLevel), _strify(logSource), `${_strify(logMessage)}\\n`].join(\"|\");\n    \n    //If logs size is greater than max size, empty it.\n    if(LOGS_SIZE + logStr.length >= MAX_LOGS_SIZE) {\n        logs = []; \n        LOGS_SIZE = 0;\n    }\n    LOGS_SIZE += logStr.length;\n    logs.push(logStr);\n}\n\n/**\n * Log a message at a custom level.\n * @param {object} logMessage\n * @param {string} logLevel \n * @param {string} [logSource]\n */\nexport function log(logMessage, logLevel, logSource) {\n    _log(logLevel, logMessage, logSource);\n}\n\n/**\n * \n * @returns a deep copy of the logs array\n */\nexport function getLogs() {\n    return JSON.parse(JSON.stringify(logs));\n}\n\n/**\n * Download the logs as a file\n */\nexport function downloadLogs() {\n    downloadData(logs.join(''), `log-${new Date().getTime()}.txt`, 'text/plain');\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * Download data as a file.\n * @param {object} data \n * @param {string} fileName \n * @param {string} fileType\n */\n export function downloadData(data, fileName, fileType) {\n    if(!document || !data) return;\n    \n    const dataStr = (typeof data === 'string') ? data : JSON.stringify(data);\n    const file = new Blob([dataStr], {type: fileType});\n    let a = document.createElement(\"a\") \n    const blobURL = URL.createObjectURL(file);\n    a.download = fileName;\n    a.href = blobURL;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(blobURL);\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { downloadLogs } from './logger.js';\n\nexport const Constants = {\n    /**\n    * @enum {string}\n    */\n    EVENT_TYPE: {\n        VOICE: {\n            CALL_STARTED: constants.EVENT_TYPE.VOICE.CALL_STARTED,\n            QUEUED_CALL_STARTED: constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED,\n            CALL_CONNECTED: constants.EVENT_TYPE.VOICE.CALL_CONNECTED,\n            HANGUP: constants.EVENT_TYPE.VOICE.HANGUP,\n            MUTE_TOGGLE: constants.EVENT_TYPE.VOICE.MUTE_TOGGLE,\n            HOLD_TOGGLE: constants.EVENT_TYPE.VOICE.HOLD_TOGGLE,\n            RECORDING_TOGGLE: constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE,\n            PARTICIPANTS_SWAPPED: constants.EVENT_TYPE.VOICE.PARTICIPANTS_SWAPPED,\n            PARTICIPANTS_CONFERENCED: constants.EVENT_TYPE.VOICE.PARTICIPANTS_CONFERENCED,\n            PARTICIPANT_ADDED: constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED, \n            PARTICIPANT_CONNECTED: constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED,\n            PARTICIPANT_REMOVED: constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED,\n            AFTER_CALL_WORK_STARTED: constants.EVENT_TYPE.VOICE.AFTER_CALL_WORK_STARTED,\n            WRAP_UP_ENDED: constants.EVENT_TYPE.VOICE.WRAP_UP_ENDED,\n            AGENT_ERROR: constants.EVENT_TYPE.VOICE.AGENT_ERROR,\n            SOFTPHONE_ERROR: constants.EVENT_TYPE.VOICE.SOFTPHONE_ERROR,\n            UPDATE_AUDIO_STATS: constants.EVENT_TYPE.VOICE.UPDATE_AUDIO_STATS,\n            SUPERVISOR_BARGED_IN: constants.EVENT_TYPE.VOICE.SUPERVISOR_BARGED_IN,\n            SUPERVISOR_CALL_STARTED : constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_STARTED,\n            SUPERVISOR_CALL_CONNECTED: constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_CONNECTED,\n            SUPERVISOR_HANGUP : constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP,\n            SHOW_TRANSFER_VIEW: constants.EVENT_TYPE.VOICE.SHOW_TRANSFER_VIEW\n        },\n        LOGIN_RESULT: constants.EVENT_TYPE.LOGIN_RESULT,\n        LOGOUT_RESULT: constants.EVENT_TYPE.LOGOUT_RESULT,\n        MESSAGE: constants.EVENT_TYPE.MESSAGE,\n        SET_AGENT_STATUS: constants.EVENT_TYPE.SET_AGENT_STATUS,\n        GET_AGENT_STATUS: constants.EVENT_TYPE.GET_AGENT_STATUS,\n        STATE_CHANGE: constants.EVENT_TYPE.STATE_CHANGE,\n        STORAGE_ACCESS_RESULT: constants.EVENT_TYPE.STORAGE_ACCESS_RESULT,\n        GET_CONTACTS_RESULT: constants.EVENT_TYPE.GET_CONTACTS_RESULT\n    },\n    /**\n    * @enum {string}\n    */\n    ERROR_TYPE: {\n        VOICE: {\n            INVALID_PARTICIPANT: constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT,\n            INVALID_DESTINATION: constants.ERROR_TYPE.VOICE.INVALID_DESTINATION,\n            CAN_NOT_UPDATE_PHONE_NUMBER: constants.ERROR_TYPE.VOICE.CAN_NOT_UPDATE_PHONE_NUMBER,\n            INVALID_PARAMS: constants.ERROR_TYPE.VOICE.INVALID_PARAMS\n        },\n        GENERIC_ERROR: constants.ERROR_TYPE.GENERIC_ERROR,\n        INVALID_AGENT_STATUS: constants.ERROR_TYPE.INVALID_AGENT_STATUS\n    },\n    /**\n    * @enum {string}\n    */\n    AGENT_STATUS: { ...constants.AGENT_STATUS },\n    /**\n    * @enum {string}\n    */\n    PARTICIPANT_TYPE: { ...constants.PARTICIPANT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_TYPE: { ...constants.CALL_TYPE },\n    /**\n    * @enum {string}\n    */\n    DIALER_TYPE: { ...constants.DIALER_TYPE },\n    /**\n    * @enum {string}\n    */\n    CONTACT_TYPE: { ...constants.CONTACT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_STATE: { ...constants.CALL_STATE },\n    /**\n    * @enum {string}\n    */\n    HANGUP_REASON: { ...constants.HANGUP_REASON },\n    /**\n    * @enum {string}\n    */\n    PHONE_TYPE: { ...constants.PHONE_TYPE },\n    /**\n     * @enum {String}\n     */\n    AGENT_AVAILABILITY: { ...constants.AGENT_AVAILABILITY },\n    /**\n     * @enum (String)\n     */\n    REMOVE_PARTICIPANT_VARIANT: { ...constants.REMOVE_PARTICIPANT_VARIANT },\n    /**\n     * @enum {String}\n     */\n    LOG_LEVEL: { ...constants.LOG_LEVEL },\n    /**\n     * @enum {String}\n     */\n    CONTACTS_FILTER_TYPES: { ...constants.CONTACTS_FILTER_TYPES },\n    /**\n     * @enum {String}\n     */\n    WORK_EVENT: { ...constants.WORK_EVENT }\n};\n\n/**\n * Class representing a Custom Error\n */\nexport class CustomError extends Error {\n    /**\n     * Custom error\n     * @param {object} param\n     * @param {String} param.labelName\n     * @param {String} param.namespace\n     * @param {String} [param.message]\n     */\n    constructor({ labelName, namespace, message }) {\n        super(message);\n\n        Validator.validateString(labelName);\n        Validator.validateString(namespace);\n        if (message) {\n            Validator.validateString(message);\n        }\n        this.labelName = labelName;\n        this.namespace = namespace;\n        this.message = message;\n    }\n}\n\n/**\n * Class representing a Phone type\n */\n export class Phone {\n    /**\n     * Create Phone\n     * @param {object} param\n     * @param {PHONE_TYPE} param.type\n     * @param {string} [param.number]\n     */\n    constructor({ type, number}) {\n        Validator.validateEnum(type, Object.values(constants.PHONE_TYPE));\n        if(number) {\n            Validator.validateString(number);\n        }\n        this.type = type;\n        this.number = number;\n    }\n}\n\n/**\n * Class representing result type for mute() & unmute()\n */\nexport class MuteToggleResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {boolean} param.isMuted\n     */\n    constructor({ isMuted }) {\n        this.isMuted = isMuted;\n    }\n}\n\n/**\n * Class representing result type for getActiveCalls()\n */\nexport class ActiveCallsResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {PhoneCall[]} [param.activeCalls]\n     */\n    constructor({ activeCalls = [] }) {\n        if (activeCalls.length > 0) {\n            activeCalls.forEach(activeCall => {\n                Validator.validateClassObject(activeCall, PhoneCall);\n            });\n        }\n        this.activeCalls = activeCalls;\n    }\n}\n\n/**\n * Class representing result type for getCapabilities()\n */\nexport class CapabilitiesResult {\n    /**\n     * Create CapabilitiesResult\n     * @param {object} param\n     * @param {boolean} [param.hasMute]\n     * @param {boolean} [param.hasRecord]\n     * @param {boolean} [param.hasMerge]\n     * @param {boolean} [param.hasSwap]\n     * @param {boolean} [param.hasSignedRecordingUrl]\n     * @param {boolean} [param.debugEnabled]\n     * @param {boolean} [param.hasContactSearch] True if getPhoneContacts uses the 'contain' filter\n     * @param {boolean} [param.hasAgentAvailability] True if getPhoneContacts also provides agent availability, false if Salesforce provides it.\n     * @param {boolean} [param.hasQueueWaitTime] True if getPhoneContacts also provides estimated queue wait time, false if Salesforce provides it.\n     * @param {boolean} [param.supportsMos] True if vendor support MOS\n     * @param {boolean} [param.hasSupervisorListenIn] True if vendor supports supervisor listening  to a ongoing call\n     * @param {boolean} [param.hasSupervisorBargeIn] True if vendor supports Supervisor  barging into a ongoing call\n     * @param {boolean} [param.hasBlindTransfer] True if vendor supports blind transfers\n     * @param {boolean} [param.hasTransferToOmniFlow] True if vendor supports transfer to omni flows\n     * @param {boolean} [param.hasPendingStatusChange] True if vendor supports Pending Status Change\n     * @param {boolean} [param.hasPhoneBook] True if vendor supports the phoneBook UI\n     * @param {boolean} [param.hasSFDCPendingState] True if amazon connect has sfdc_pending state\n     */\n     constructor({ hasMute = true, hasRecord = true, hasMerge = true, hasSwap = true,\n                     hasSignedRecordingUrl = false, debugEnabled = true, hasContactSearch = false,\n                     hasAgentAvailability = false, hasQueueWaitTime = false, supportsMos = false,\n                     hasSupervisorListenIn = false, hasSupervisorBargeIn = false, hasBlindTransfer = false,\n                     hasTransferToOmniFlow = false, hasPendingStatusChange=false, hasPhoneBook=false,\n                     hasSFDCPendingState = false }) {\n        Validator.validateBoolean(hasMute);\n        Validator.validateBoolean(hasRecord);\n        Validator.validateBoolean(hasMerge);\n        Validator.validateBoolean(hasSwap);\n        Validator.validateBoolean(hasSignedRecordingUrl);\n        Validator.validateBoolean(debugEnabled);\n        Validator.validateBoolean(hasContactSearch);\n        Validator.validateBoolean(hasAgentAvailability);\n        Validator.validateBoolean(hasQueueWaitTime);\n        Validator.validateBoolean(supportsMos);\n        Validator.validateBoolean(hasSupervisorListenIn);\n        Validator.validateBoolean(hasSupervisorBargeIn);\n        Validator.validateBoolean(hasBlindTransfer);\n        Validator.validateBoolean(hasTransferToOmniFlow);\n        Validator.validateBoolean(hasPendingStatusChange);\n        Validator.validateBoolean(hasPhoneBook);\n        Validator.validateBoolean(hasSFDCPendingState);\n\n        this.hasMute = hasMute;\n        this.hasRecord = hasRecord;\n        this.hasMerge = hasMerge;\n        this.hasSwap = hasSwap;\n        this.hasSignedRecordingUrl = hasSignedRecordingUrl;\n        this.debugEnabled = debugEnabled;\n        this.hasContactSearch = hasContactSearch;\n        this.hasAgentAvailability = hasAgentAvailability;\n        this.hasQueueWaitTime = hasQueueWaitTime;\n        this.supportsMos = supportsMos;\n        this.hasSupervisorListenIn = hasSupervisorListenIn;\n        this.hasSupervisorBargeIn = hasSupervisorBargeIn;\n        this.hasBlindTransfer = hasBlindTransfer;\n        this.hasTransferToOmniFlow = hasTransferToOmniFlow;\n        this.hasPendingStatusChange = hasPendingStatusChange;\n        this.hasPhoneBook = hasPhoneBook;\n        this.hasSFDCPendingState = hasSFDCPendingState;\n    }\n}\n\n/**\n * Class representing result type for getAgentConfig()\n */\nexport class AgentConfigResult {\n    /**\n     * Create AgentConfigResult\n     * @param {object} param\n     * @param {Phone[]} [param.phones]\n     * @param {Phone} [param.selectedPhone]\n     */\n    constructor({ phones = [constants.PHONE_TYPE.SOFT_PHONE], selectedPhone = new Phone({type: constants.PHONE_TYPE.SOFT_PHONE}) }) {\n        Validator.validateClassObject(phones, Array);\n        Validator.validateClassObject(selectedPhone, Phone);\n\n        this.phones = phones;\n        this.selectedPhone = selectedPhone;\n    }\n}\n\n/**\n * Class representing AgentConfig type for setAgentConfig()\n */\nexport class AgentConfig {\n    /**\n     * Create AgentConfig\n     * @param {object} param\n     * @param {Phone} [param.selectedPhone]\n     */\n    constructor({ selectedPhone }) {\n        Validator.validateClassObject(selectedPhone, Phone);\n        this.selectedPhone = selectedPhone;\n    }\n}\n\n/**\n * Class representing result type for pauseRecording() & resumeRecording\n */\nexport class RecordingToggleResult {\n    /**\n     * Create RecordingToggleResult\n     * @param {object} param\n     * @param {boolean} param.isRecordingPaused\n     * @param {string} [param.contactId]\n     * @param {string} [param.initialContactId]\n     * @param {string} [param.instanceId]\n     * @param {string} [param.region]\n     */\n    constructor({ isRecordingPaused, contactId = null, initialContactId = null, instanceId = null, region = null }) {\n        this.isRecordingPaused = isRecordingPaused;\n        this.contactId = contactId;\n        this.initialContactId = initialContactId;\n        this.instanceId = instanceId;\n        this.region = region;\n    }\n}\n\n/**\n * Class representing result type for addParticipant()\n */\nexport class ParticipantResult {\n    /**\n     * Create ParticipantResult\n     * @param {object} param\n     * @param {boolean} param.initialCallHasEnded\n     * @param {CallInfo} param.callInfo\n     * @param {string} param.phoneNumber\n     * @param {string} param.callId\n     */\n    constructor({ initialCallHasEnded, callInfo, phoneNumber, callId }) {\n        Validator.validateClassObject(callInfo, CallInfo);\n        this.initialCallHasEnded = initialCallHasEnded;\n        this.callInfo = callInfo;\n        this.phoneNumber = phoneNumber;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for getContacts()\n */\nexport class ContactsResult {\n     /**\n     * Create ContactsResult\n     * @param {object} param\n     * @param {Contact[]} [param.contacts]\n     * @param {Array} [param.contactTypes]\n     */\n    constructor({ contacts = [], contactTypes = [] }) {\n        if (contacts.length > 0) {\n            contacts.forEach(contact => {\n                Validator.validateClassObject(contact, Contact);\n            });\n        }\n        if (contactTypes.length > 0) {\n            contactTypes.forEach(filterType => {\n                Validator.validateEnum(filterType, Object.values(constants.CONTACT_TYPE));\n            });\n        }\n        this.contacts = contacts;\n        this.contactTypes = contactTypes;\n    }\n}\n\n/**\n * Class representing result type for getPhoneContacts()\n * NOTE: TO BE DEPRECATED, Use ContactsResult instead\n */\nexport class PhoneContactsResult extends ContactsResult {\n    /**\n     * Create PhoneContactsResult\n     * @param {object} param\n     * @param {Contact[]} [param.contacts]\n     * @param {Array} [param.contactTypes]\n     */\n    constructor({ contacts = [], contactTypes = [] }) {\n        super({ contacts, contactTypes });\n    }\n}\n\n\n\n/**\n * Class representing result type for accept(), decline(), dial()\n */\nexport class CallResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall} [param.call]\n     */\n    constructor({ call }) {\n        if (call !== undefined) {\n            Validator.validateClassObject(call, PhoneCall);\n        }\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for endCall(), hangup()\n */\nexport class HangupResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls (can be multiple calls in case of agent endcall/hangup)\n     */\n    constructor({ calls }) {\n        if (calls instanceof Array) {\n            calls.forEach(call => Validator.validateClassObject(call, PhoneCall));\n            this.calls = calls;\n        } else {\n            Validator.validateClassObject(calls, PhoneCall);\n            this.calls = [calls];\n        }\n    }\n}\n\n/**\n * Class representing result type for hold() & resume()\n */\nexport class HoldToggleResult {\n    /**\n     * Create HoldToggleResult\n     * @param {object} param\n     * @param {boolean} param.isThirdPartyOnHold\n     * @param {boolean} param.isCustomerOnHold\n     * @param {PhoneCall[]} [param.calls]\n     */\n    constructor({ isThirdPartyOnHold, isCustomerOnHold, calls }) {\n        if (calls) {\n            Object.values(calls).forEach(call => {\n                Validator.validateClassObject(call, PhoneCall);\n            });\n            this.calls = calls;\n        }\n        this.isThirdPartyOnHold = isThirdPartyOnHold;\n        this.isCustomerOnHold = isCustomerOnHold;\n    }\n}\n\n/**\n * Class representing result type for getRecordingUrl\n */\n export class SignedRecordingUrlResult {\n    /**\n     * Create SignedRecordingUrlResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {string} [param.url]\n     * @param {number} [param.duration] in seconds\n     * @param {string} [param.callId] Salesforce callId of the voice call\n     */\n    constructor({ success, url, duration, callId }) {\n        if (success) {\n            // For a successfull result, url is required\n            Validator.validateString(url);\n            Validator.validateString(callId);\n            if (duration) {\n                Validator.validateNumber(duration);\n            }\n        }\n        this.success = success;\n        this.url = url;\n        this.duration = duration;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for init()\n */\nexport class InitResult {\n    /**\n     * Create InitResult\n     * @param {object} param\n     * @param {boolean} [param.showLogin]\n     * @param {number} [param.loginFrameHeight]\n     * @param {boolean} [param.isSilentLogin]\n     * @param {boolean} [param.showStorageAccess]\n     */\n    constructor({ showLogin = false, loginFrameHeight = 350, isSilentLogin = false, showStorageAccess = false }) {\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n        this.isSilentLogin = this.showLogin ? false : isSilentLogin;\n        this.showStorageAccess = showStorageAccess;\n    }\n}\n\n/**\n * Class representing dial options for outbound dialing \n */\nexport class DialOptions {\n    /**\n     * Create DialOptions\n     * @param {boolean} [param.isCallback]\n     */\n    constructor({ isCallback = false }) {\n        this.isCallback = isCallback;\n    }\n}\n\n/**\n * Class representing generic result type\n */\nexport class GenericResult {\n    /**\n     * Create GenericResult\n     * @param {object} param\n     * @param {boolean} param.success\n     */\n    constructor({ success }) {\n        this.success = success;\n    }\n}\n\n/**\n * Class representing logout result type\n */\n export class LogoutResult {\n    /**\n     * Create LogoutResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {number} [param.loginFrameHeight]\n     */\n    constructor({ success, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class representing callInfo class (call metadata)\n */\nexport class CallInfo {\n    /**\n     * Create CallInfo\n     * @param {object} param\n     * @param {boolean} param.isOnHold\n     * @param {boolean} param.isRecordingPaused\n     * @param {boolean} param.isMuted\n     * @param {string} [param.initialCallId]\n     * @param {Date} [param.callStateTimestamp]\n     * @param {string} [param.queueName]\n     * @param {string} [param.queueId]\n     * @param {Date} [param.queueTimestamp]\n     * @param {boolean} [param.isSoftphoneCall] - is it a softphone call \n     * @param {boolean} [param.acceptEnabled]\n     * @param {boolean} [param.declineEnabled]\n     * @param {boolean} [param.muteEnabled]\n     * @param {boolean} [param.swapEnabled]\n     * @param {boolean} [param.conferenceEnabled]\n     * @param {boolean} [param.holdEnabled]\n     * @param {boolean} [param.recordEnabled]\n     * @param {boolean} [param.addCallerEnabled]\n     * @param {boolean} [param.extensionEnabled]\n     * @param {boolean} [param.isReplayable]\n     * @param {boolean} [param.isBargeable]\n     * @param {boolean} [param.isExternalTransfer]\n     * @param {boolean} [param.showMuteButton]\n     * @param {boolean} [param.showRecordButton]\n     * @param {boolean} [param.showAddCallerButton]\n     * @param {boolean} [param.showAddBlindTransferButton]\n     * @param {boolean} [param.showMergeButton]\n     * @param {boolean} [param.showSwapButton]\n     * @param {(\"ALWAYS\"|\"NEVER\"|\"ALWAYS_EXCEPT_ON_HOLD\")} [param.removeParticipantVariant] - The type of remove participant variant when in a transfer call.\n     * @param {String} [param.additionalFields] - Represents additional standard and custom fields in the voice call record, where each key-value pair value corresponds to a standard or custom field and its values.\n     * @param {boolean} [param.isMultiParty]\n     */\n    constructor({ callStateTimestamp = null, isOnHold, isMuted = false, isRecordingPaused = false, initialCallId, queueId = null, queueName = null, queueTimestamp = null, isSoftphoneCall = true, \n        acceptEnabled = true, declineEnabled = true, muteEnabled = true, swapEnabled = true, conferenceEnabled = true, holdEnabled = true,\n        recordEnabled = true, addCallerEnabled = true, extensionEnabled = true, isReplayable = true, isBargeable = false, isExternalTransfer, \n        showMuteButton = true, showRecordButton = true, showAddCallerButton = true, showAddBlindTransferButton = true, showMergeButton = true,\n        showSwapButton = true, removeParticipantVariant = Constants.REMOVE_PARTICIPANT_VARIANT.ALWAYS, additionalFields = null, isMultiParty = false }) {\n        if (callStateTimestamp) {\n            Validator.validateDate(callStateTimestamp);\n        }\n        if (queueTimestamp) {\n            Validator.validateDate(queueTimestamp);\n        }\n        if (queueId) {\n            Validator.validateString(queueId);\n        }\n        if (queueName) {\n            Validator.validateString(queueName);\n        }\n        Validator.validateBoolean(isRecordingPaused);\n        Validator.validateBoolean(isMuted);\n        Validator.validateBoolean(isSoftphoneCall);\n        Validator.validateBoolean(acceptEnabled);\n        Validator.validateBoolean(declineEnabled);\n        Validator.validateBoolean(muteEnabled);\n        Validator.validateBoolean(swapEnabled);\n        Validator.validateBoolean(conferenceEnabled);\n        Validator.validateBoolean(holdEnabled);\n        Validator.validateBoolean(recordEnabled);\n        Validator.validateBoolean(addCallerEnabled);\n        Validator.validateBoolean(extensionEnabled);\n        Validator.validateBoolean(isBargeable);\n        Validator.validateBoolean(showMuteButton);\n        Validator.validateBoolean(showRecordButton);\n        Validator.validateBoolean(showAddCallerButton);\n        Validator.validateBoolean(showAddBlindTransferButton);\n        Validator.validateBoolean(showMergeButton);\n        Validator.validateBoolean(showSwapButton);\n        if (isExternalTransfer !== undefined) {\n            Validator.validateBoolean(isExternalTransfer);\n        }\n        Validator.validateEnum(removeParticipantVariant, Object.values(constants.REMOVE_PARTICIPANT_VARIANT));\n        if (additionalFields) {\n            Validator.validateString(additionalFields);\n        }\n        Validator.validateBoolean(isMultiParty);\n        this.callStateTimestamp = callStateTimestamp;\n        this.isRecordingPaused = isRecordingPaused;\n        this.isMuted = isMuted;\n        this.isOnHold = isOnHold;\n        this.initialCallId = initialCallId;\n        this.queueName = queueName;\n        this.queueId = queueId;\n        this.queueTimestamp = queueTimestamp;\n        this.isSoftphoneCall = isSoftphoneCall;\n        this.acceptEnabled = acceptEnabled;\n        this.declineEnabled = declineEnabled;\n        this.muteEnabled = muteEnabled;\n        this.swapEnabled = swapEnabled;\n        this.conferenceEnabled = conferenceEnabled;\n        this.holdEnabled = holdEnabled;\n        this.recordEnabled = recordEnabled;\n        this.addCallerEnabled = addCallerEnabled;\n        this.extensionEnabled = extensionEnabled;\n        this.isReplayable = isReplayable;\n        this.isBargeable = isBargeable;\n        this.isExternalTransfer = isExternalTransfer;\n        this.removeParticipantVariant = removeParticipantVariant;\n        this.showMuteButton = showMuteButton;\n        this.showRecordButton = showRecordButton;\n        this.showAddCallerButton = showAddCallerButton;\n        this.showAddBlindTransferButton = showAddBlindTransferButton;\n        this.showMergeButton = showMergeButton;\n        this.showSwapButton = showSwapButton;\n        this.additionalFields = additionalFields;\n        this.isMultiParty = isMultiParty;\n    }\n}\n\n/** \n * Class representing a Contact. This object is used to represent \n * phone system contact or any call target\n */\n\nexport class Contact {\n    /**\n     * Create a Contact.\n     * @param {object} param\n     * @param {string} [param.id] - The unique contactId\n     * @param {(\"PhoneBook\"|\"Queue\"|\"PhoneNumber\"|\"Agent\")} [param.type] - The type of the contact, one of the CONTACT_TYPE values\n     * @param {string} [param.name] - The label for this contact to be displayed in the UI\n     * @param {string} [param.phoneNumber] - The phone number associcated with this contact\n     * @param {string} [param.prefix] - Any prefix to be dialed before dialing the number (i.e. +1)\n     * @param {string} [param.extension] - Any extension to be dialed after dialing the number\n     * @param {string} [param.endpointARN]\n     * @param {string} [param.queue]\n     * @param {string} [param.availability]\n     * @param {string} [param.recordId] - Salesforce RecordId\n     * @param {string} [param.description] - Contact Description\n     * @param {string} [param.queueWaitTime] - Estimated Queue Wait Time\n     */\n    constructor({phoneNumber, id, type, name, prefix, extension, endpointARN, queue, availability, recordId, description, queueWaitTime}) {\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n        }\n        if (type) {\n            Validator.validateEnum(type, Object.values(constants.CONTACT_TYPE));\n        }\n        if (id) {\n            Validator.validateString(id);\n        }\n        if (name) {\n            Validator.validateString(name);\n        }\n        if (prefix) {\n            Validator.validateString(prefix);\n        }\n        if (extension) {\n            Validator.validateString(extension);\n        }\n        if (availability) {\n            Validator.validateEnum(availability, Object.values(constants.AGENT_AVAILABILITY));\n        }\n        if (recordId) {\n            Validator.validateString(recordId);\n        }\n        if (description) {\n            Validator.validateString(description);\n        }\n        if (queueWaitTime) {\n            Validator.validateString(queueWaitTime);\n        }\n\n        this.phoneNumber = phoneNumber;\n        this.id = id;\n        this.type = type;\n        this.name = name;\n        this.prefix = prefix;\n        this.extension = extension;\n        this.endpointARN = endpointARN;\n        this.queue = queue;\n        if (constants.CONTACT_TYPE.AGENT === this.type) {\n            this.availability = availability;\n        } else {\n            this.availability = null;\n        }\n        this.queueWaitTime = queueWaitTime;\n        this.recordId = recordId;\n        this.description = description;\n    }\n}\n\n/** \n* Class representing PhoneCallAttributes\n*/\n\nexport class PhoneCallAttributes {\n    /**\n     * Create PhoneCallAttributes.\n     * @param {object} param\n     * @param {string} [param.voiceCallId] - The voice call id\n     * @param {PARTICIPANT_TYPE} [param.participantType] - The participant type of the call\n     * @param {DIALER_TYPE} [param.dialerType] - The dialer type of the call\n     * @param {string} [param.parentId] - The parent call id of the call\n     * @param {boolean} [param.isOnHold]\n     * @param {boolean} [param.hasSupervisorBargedIn]\n     */\n    constructor({ voiceCallId, participantType, dialerType = Constants.DIALER_TYPE.NONE, parentId, isOnHold, hasSupervisorBargedIn = false }) {\n        if (voiceCallId) {\n            Validator.validateString(voiceCallId);\n        }\n        if (participantType) {\n            Validator.validateEnum(participantType, Object.values(constants.PARTICIPANT_TYPE));\n        }\n        if (parentId) {\n            Validator.validateString(parentId);\n        }\n        if (isOnHold !== undefined) {\n            Validator.validateBoolean(isOnHold);\n        }\n\n        Validator.validateBoolean(hasSupervisorBargedIn);\n        Validator.validateEnum(dialerType, Object.values(constants.DIALER_TYPE));\n\n        this.voiceCallId = voiceCallId;\n        this.participantType = participantType;\n        this.parentId = parentId;\n        this.isOnHold = isOnHold;\n        this.dialerType = dialerType;\n        this.hasSupervisorBargedIn = hasSupervisorBargedIn;\n    }\n}\n\n/** \n* Class representing a PhoneCall. \n*/\n\nexport class PhoneCall {\n    /**\n     * Create a PhoneCall.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId. This is a required parameter\n     * @param {CALL_TYPE} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {Contact} [param.contact] - The Call Target / Contact \n     * @param {string} [param.state] - The state of the call, i.e. ringing, connected, declined, failed \n     * @param {PhoneCallAttributes} [param.callAttributes] - Any additional call attributes\n     * @param {string} [param.phoneNumber] - The phone number associated with this call (usually external number)\n     * @param {CallInfo} [param.callInfo]\n     * @param {string} [param.reason]\n     * @param {boolean} [param.closeCallOnError]\n     * @param {string} [param.agentStatus]\n     */\n    constructor({callId, callType, contact, state, callAttributes, phoneNumber, callInfo, reason, closeCallOnError, agentStatus }) {\n        // TODO: Revisit the required fields\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n        if (callType) {\n            Validator.validateEnum(callType, Object.values(constants.CALL_TYPE));\n            this.callType = callType;\n        }\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n            this.phoneNumber = phoneNumber;\n        }\n        if (callInfo) {\n            Validator.validateClassObject(callInfo, CallInfo);\n            this.callInfo = callInfo;\n        }\n        if (contact) {\n            Validator.validateClassObject(contact, Contact);\n            this.contact = contact;\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        if (closeCallOnError) {\n            this.closeCallOnError = closeCallOnError;\n        }\n        if (agentStatus) {\n            this.agentStatus = agentStatus;\n        }\n        this.state = state;\n        this.callAttributes = callAttributes;\n    }\n}\n\n/** \n* Class representing a TelephonyConnector\n*/\nexport class TelephonyConnector {\n    /**\n     * Get the currently active calls\n     * @returns {Promise<ActiveCallsResult>} \n     * \n     */\n    getActiveCalls() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Accept call\n     * @param {PhoneCall} call - The call to be accepted\n     * @returns {Promise<CallResult>} \n     * \n     */\n    acceptCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Decline call\n     * @param {PhoneCall} call - The call to be declined\n     * @returns {Promise<CallResult>} \n     * \n     */\n    declineCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * End call\n     * @param {PhoneCall} call - The call to be ended\n     * @param {AGENT_STATUS} agentStatus\n     * @returns {Promise<HangupResult>} \n     * \n     */\n    endCall(call, agentStatus) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    mute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Unmute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    unmute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Hold call\n     * @param {PhoneCall} call - The call to be held\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    hold(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume call\n     * @param {PhoneCall} call - The call to be resumed\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    resume(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Dial out Number\n     * @param {Contact} contact\n     * @param {DialOptions} dialOptions\n     * @returns {Promise<CallResult>} \n     * \n     */\n    dial(contact, dialOptions) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Send digits\n     * @param {string} digits\n     */\n    sendDigits(digits) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get phone contacts\n     * @param {ContactsFilter} filterType\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getPhoneContacts(filter) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Swap calls\n     * @param {PhoneCall} call1\n     * @param {PhoneCall} call2\n     * @returns {Promise<HoldToggleResult>} \n     */\n    swap(call1, call2) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Conference calls\n     * @param {PhoneCall[]} calls\n     * @returns {Promise<HoldToggleResult>} \n     */\n    conference(calls) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Add participant to call\n     * @param {Contact} contact: The transfer target\n     * @param {PhoneCall} parentCall: The call to which a participant will be added\n     * @param {Boolean} isBlindTransfer: True if blind transfering a call and hanging up upon transfer\n     * @returns {Promise<ParticipantResult>} \n     */\n    addParticipant(contact, parentCall, isBlindTransfer) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Pause recording\n     * @param {PhoneCall} call\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    pauseRecording(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume recording\n     * @param {PhoneCall} call\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    resumeRecording(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agentConfig\n     * @returns {Promise<AgentConfigResult>}\n     */\n    getAgentConfig() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set Agent Config\n     * @param {AgentConfig} config\n     * @returns {Promise<GenericResult>}\n     */\n    setAgentConfig(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get Capabilities\n     * @returns {Promise<CapabilitiesResult>}\n     */\n    getCapabilities() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Wrap up call\n     * @param {PhoneCall} call\n     */\n    wrapUpCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n    * Get the signed recording url\n    * @param {String} recordingUrl\n    * @param {String} vendorCallKey\n    * @param {String} callId\n    * @returns {Promise<SignedRecordingUrlResult>} \n    */\n    getSignedRecordingUrl(recordingUrl, vendorCallKey, callId) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervise a call\n     * @param {PhoneCall} call Call to be supervised\n     */\n    superviseCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor disconnects from a call\n     * @param {PhoneCall} call Call to be disconnected\n     */\n    supervisorDisconnect(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor Barges into a ongoing call\n     * @param {PhoneCall} call Call which supervisor barges in\n     */\n    supervisorBargeIn(call) {\n        throw new Error('Not implemented');\n    }\n}\n\n/** \n* Class representing a VendorConnector\n*/\nexport class VendorConnector {\n    /**\n     * Initialize the connector\n     * @param {object} connectorConfig\n     * @returns {Promise<InitResult>} \n     * \n     */\n    init(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Gets the telephonyConnector\n     * @returns {Promise<TelephonyConnector>} \n     * \n     */\n    getTelephonyConnector() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Sends non-voice agent work events to vendor such as work accepted, declined, etc\n     * @param {AgentWork} agentWork\n     * \n     */\n    onAgentWorkEvent(agentWork) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set agent status\n     * @param {string} agentStatus\n     * @param {StatusInfo} statusInfo\n     * @param {Boolean} enqueueNextState - flag to determine if this status change request should be enqueued if neccessary\n     * @returns {Promise<GenericResult>} \n     * \n     */\n    setAgentStatus(agentStatus, statusInfo, enqueueNextState) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agent status\n     * @returns {Promise<AgentStatusInfo>} \n     * \n     */\n     getAgentStatus() {\n        this.logMessageToVendor(constants.LOG_LEVEL.INFO, 'getAgentStatus API is NOT Implemented' );\n    }\n\n    /**\n     * Logout from Omni\n     * @returns {Promise<LogoutResult>} \n     */\n    logout() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Handle message from LWC/Aura component\n     * @param {object} message\n     */\n    handleMessage(message) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Triggers a browser download for Vendor Logs\n     * @param {String[]} logs Array of log messages.\n     */\n    downloadLogs(logs) {\n        downloadLogs();\n    }\n\n    /**\n     * Sends the logs with a logLevel and payload to the vendor connector.\n     * Does a no-op, if not implemented.\n     * @param {String} logLevel Log Level (INFO, WARN, ERROR)\n     * @param {String} message Message to be logged\n     * @param {Object} payload An optional payload to be logged\n     */\n    logMessageToVendor(logLevel, message, payload) {}\n\n    /**\n     * To get the Contacts for this workItem's transfer/other channel operation\n     * @param {ContactsFilter} filter It has fields like the search term  and contact Type\n     * @param {String} workItemId\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getContacts(filter, workItemId) {\n        throw new Error('Not implemented');\n    }\n}\n\nexport class Validator {\n    static validateString(value) {\n        if (typeof value !== 'string') {\n            throw new Error(`Invalid argument. Expecting a string but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateNumber(value) {\n        if (typeof value !== 'number') {\n            throw new Error(`Invalid argument. Expecting a number but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateBoolean(value) {\n        if (typeof value !== 'boolean') {\n            throw new Error(`Invalid argument. Expecting a boolean but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateEnum(value, enumValues) {\n        const regex = new RegExp(enumValues.join( \"|\" ), \"i\");\n        if (!regex.test(value)) {\n            throw new Error(`Invalid argument. Expecting a value from ${JSON.stringify(enumValues)} but got ${value}`);\n        }\n        return this;\n    }\n\n    static validateDate(value) {\n        if (!(value instanceof Date)) {\n            throw new Error(`Invalid argument. Expecting a Date object but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateClassObject(object, className) {\n        if (!(object instanceof className)) {\n            throw new Error(`Invalid className. Expecting object of class ${className} but got ${typeof object}`);\n        }\n        return this;\n    }\n}\n\n/** \n* Class representing an AgentWork\n*/\nexport class AgentWork {\n    /**\n     * Create an AgentWork.\n     * @param {object} param\n     * @param {string} [param.workItemId] - Salesforce agent work item Id\n     * @param {string} [param.workId] - Salesforce work Id\n     * @param {WORK_EVENT} [param.workEvent] - The work lifecycle event\n     */\n    constructor({ workItemId, workId, workEvent }) {\n        Validator.validateEnum(workEvent, Object.values(constants.WORK_EVENT));\n        this.workEvent = workEvent;\n        this.workItemId = workItemId;\n        this.workId = workId;\n    }\n }\n\n/** \n * Class representing an Agent status information. This object is used to represent \n * agent status information\n */\n\nexport class AgentStatusInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (required)\n     * @param {string} [param.statusApiName] - The status API name\n     * @param {string} [param.statusName] - The label for this status to be displayed in the UI\n     */\n    constructor({statusId, statusApiName, statusName}) {\n        Validator.validateString(statusId);\n        if (statusApiName) {\n            Validator.validateString(statusApiName);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusApiName = statusApiName;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * Class representing an Agent Vendor status information. This object is used to represent \n * agent vendor side status information\n */\nexport class AgentVendorStatusInfo {\n    /**\n     * Create a AgentVendorStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (e.g agentStateARN)\n     * @param {string} [param.statusType] - The agent's current availability state type\n     * @param {string} [param.statusName] - The name of the agent's current availability state\n     */\n    constructor({statusId, statusType, statusName}) {\n        if (statusId) {\n            Validator.validateString(statusId);\n        }\n        if (statusType) {\n            Validator.validateString(statusType);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusType = statusType;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * NOTE: SALESFORCE INTERNAL USE ONLY\n * Class representing an State Change Result information. This object is used to represent \n * Agent State Change Infomation\n */\n export class StateChangeResult {\n    /**\n     * Create a StateChangeResult.\n     * @param {object} param\n     * @param {AgentVendorStatusInfo} [param.newVendorStateInfo] - newStateName (e.g 'Available') (required), newStateType (e.g 'routable')\n     * @param {AgentVendorStatusInfo} [param.oldVendorStateInfo] - oldStateName (e.g 'offline'), oldStateType (e.g 'Offline')\n     */\n    constructor({newVendorStateInfo, oldVendorStateInfo}) {\n        Validator.validateClassObject(newVendorStateInfo, AgentVendorStatusInfo);\n        Validator.validateString(newVendorStateInfo.statusName);\n        if (oldVendorStateInfo) {\n            Validator.validateClassObject(oldVendorStateInfo, AgentVendorStatusInfo);\n        }\n        this.newVendorStateInfo = newVendorStateInfo;\n        this.oldVendorStateInfo = oldVendorStateInfo;\n    }\n}\n\n/** \n * Class representing a Supervised Call Info. This object is used to represent \n * information about a call that is being supervised by a supervisor.\n */\nexport class SupervisedCallInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique supervised vendor call ID (required)\n     * @param {string} [param.voiceCallId] - The supervised salesforce voice call ID\n     * @param {string} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {string} [param.from] - From phone number (for Inbound calls)\n     * @param {string} [param.to] - To phone number (for Outbound calls)\n     * @param {string} [param.supervisorName] - The supervisor name (shown to the supervised agent on barge in)\n     * @param {boolean} [param.isBargedIn] - True if the Supervisor has barged in, False if the supervisor is listening in.\n     */\n\n    constructor({callId, voiceCallId, callType, from, to, supervisorName, isBargedIn}) {\n        Validator.validateString(callId);\n        this.callId = callId;\n        this.voiceCallId = voiceCallId;\n        this.callType = callType;\n        this.from = from;\n        this.to = to;\n        this.supervisorName = supervisorName;\n        this.isBargedIn = isBargedIn;\n    }\n}\n\n/**\n * Class representing a Audio Stats, which contains array of AudioStats. This object is used to calculate the MOS Score\n */\n\nexport class AudioStats {\n    /**\n     * Create a AudioStats\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId.\n     * @param {AudioStatsElement[]} param.stats - array of AudioStatsElement\n     * @param {boolean} [param.isAudioStatsCompleted] - True if the audio stats is completed, will calculate MOS and update VoiceCall record\n     */\n    constructor({ callId, stats, isAudioStatsCompleted }) {\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n\n        if (stats) {\n            Validator.validateClassObject(stats, Array);\n            stats.forEach(audioStatsElement => Validator.validateClassObject(audioStatsElement, AudioStatsElement));\n            this.stats = stats;\n        }\n\n        if (isAudioStatsCompleted) {\n            Validator.validateBoolean(isAudioStatsCompleted);\n            this.isAudioStatsCompleted = isAudioStatsCompleted;\n        }\n    }\n}\n\n/**\n * Class representing a Audio Stats Element. This object is used to calculate the MOS Score\n */\n\nexport class AudioStatsElement {\n    /**\n     * Create a AudioStatsElement\n     * @param {object} param\n     * @param {StatsInfo} [param.inputChannelStats] - the inputChannel stream stats\n     * @param {StatsInfo} [param.outputChannelStats] - the ouputChannel stream stats\n     */\n    constructor({inputChannelStats, outputChannelStats}) {\n        if (inputChannelStats) {\n            Validator.validateClassObject(inputChannelStats, StatsInfo);\n        }\n        if (outputChannelStats) {\n            Validator.validateClassObject(outputChannelStats, StatsInfo);\n        }\n        \n        this.inputChannelStats = inputChannelStats;\n        this.outputChannelStats = outputChannelStats;\n    }\n}\n\n/**\n * Class representing a Stream Stats. This object is used to calculate the MOS Score\n */\n\nexport class StatsInfo {\n    /**\n     * Create a StatsInfo\n     * @param {object} param\n     * @param {number} [param.packetsCount] - the packets count\n     * @param {number} [param.packetsLost] - packets lost count\n     * @param {number} [param.jitterBufferMillis] - jitter buffer in milliseconds\n     * @param {number} [param.roundTripTimeMillis] - round trip time in milliseconds\n     */\n    constructor({packetsCount, packetsLost, jitterBufferMillis, roundTripTimeMillis}) {\n        packetsCount = (packetsCount == null || packetsCount < 0) ? 0 : packetsCount;\n        packetsLost = (packetsLost == null || packetsLost < 0) ? 0 : packetsLost;\n        jitterBufferMillis = (jitterBufferMillis == null || jitterBufferMillis < 0) ? 0 : jitterBufferMillis;\n        roundTripTimeMillis = (roundTripTimeMillis == null || roundTripTimeMillis < 0) ? 0 : roundTripTimeMillis;\n\n        this.statsCount = 0;\n        this.packetsCount = packetsCount;\n        this.packetsLost = packetsLost;\n        this.jitterBufferMillis = jitterBufferMillis;\n        this.roundTripTimeMillis = roundTripTimeMillis;\n    }\n}\n\n/**\n * Class representing supervise call result\n */\n export class SuperviseCallResult {\n    /**\n     * Create a SuperviseCallResult\n     * @param {object} param\n     * @param {PhoneCall} param.call\n     */\n    constructor({call}) {\n        Validator.validateClassObject(call, PhoneCall);\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for supervisorDisconnected()\n */\n export class SupervisorHangupResult extends HangupResult {\n     /**\n     * Create SupervisorHangupResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls when supervisor hangsup\n     */\n    constructor({ calls }) {\n        super({ calls });\n    }\n }\n\n/** \n * Class representing result type for STORAGE_ACCESS_RESULT\n * @param {object} param\n * @param {boolean} [param.success]\n * @param {boolean} [param.showLogin] \n * @param {number} [param.loginFrameHeight]\n */\nexport class ShowStorageAccessResult {\n    constructor({success= false, showLogin = false, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class used to filter contacts. Passed as a parameter to TelephonyConnector.getPhoneContacts\n * @param {object} param\n * @param {string} param.contains\n * @param {number} param.limit\n * @param {number} param.offset\n * @param {CONTACTS_FILTER_TYPES[]} param.types \n */ \nexport class ContactsFilter {\n    constructor(param) {\n        if (param) {\n            const {contains = null, limit = 50, offset = 0, types = []} = param;\n            if (contains) {\n                Validator.validateString(contains);\n            }\n            Validator.validateNumber(limit);\n            Validator.validateNumber(offset);\n            for (const type of types){\n                Validator.validateEnum(types, Object.values(constants.CONTACTS_FILTER_TYPES));\n            }\n            this.contains = contains;\n            this.limit = limit;\n            this.offset = offset;\n            this.types = types;\n        }\n    }\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport { AudioStatsElement, StatsInfo } from './types';\nlet audioStatus;\nlet supportsMos = false;\n\nfunction getAvgStats(streamType) {\n    const stats = audioStatus[streamType];\n    return {\n        packetsCount: stats.packetsCount / stats.statsCount,\n        packetsLost: stats.packetsLost / stats.statsCount,\n        jitterBufferMillis: stats.jitterBufferMillis / stats.statsCount,\n        roundTripTimeMillis: stats.roundTripTimeMillis / stats.statsCount\n    };\n}\n\nfunction getMOSByStream(streamType) {\n    const avgStats = getAvgStats(streamType);\n    const effectiveLatency = avgStats.roundTripTimeMillis + (avgStats.jitterBufferMillis * 2) + 10.0;\n    let R = 0;\n    if (effectiveLatency < 160) {\n        R = 93.2 - (effectiveLatency / 40);\n    } else {\n        R = 93.2 - (effectiveLatency - 120) / 10;\n    }\n    R -= avgStats.packetsLost / avgStats.packetsCount * 2.50;\n    return 1 + (0.035) * R + (.000007) * R * (R - 60) * (100 - R);\n}\n\nexport function enableMos() {\n    supportsMos = true;\n}\n\nexport function getMOS() {\n    if (!supportsMos || !audioStatus) {\n        return undefined;\n    }\n    const inputChannelMOS = getMOSByStream('inputChannelStats');\n    const ouputChannelMOS = getMOSByStream('outputChannelStats');\n    audioStatus = null;\n    if (isNaN(ouputChannelMOS) && isNaN(inputChannelMOS)) {\n        return 0;\n    } else if (isNaN(ouputChannelMOS)) {\n        return inputChannelMOS;\n    } else if (isNaN(inputChannelMOS)) {\n        return ouputChannelMOS;\n    } else {\n        return Math.min(inputChannelMOS, ouputChannelMOS);\n    }\n}\n\nexport function initAudioStats() {\n    audioStatus = new AudioStatsElement({inputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0}), \n                               outputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0})});\n}\n\nexport function updateAudioStats(statsArray) {\n    if (audioStatus) {\n        statsArray.forEach((stats) => {\n            if (stats.inputChannelStats) {\n                audioStatus.inputChannelStats.statsCount++;\n                audioStatus.inputChannelStats.packetsCount += stats.inputChannelStats.packetsCount | 0;\n                audioStatus.inputChannelStats.packetsLost += stats.inputChannelStats.packetsLost | 0;\n                audioStatus.inputChannelStats.jitterBufferMillis += stats.inputChannelStats.jitterBufferMillis | 0;\n                audioStatus.inputChannelStats.roundTripTimeMillis += stats.inputChannelStats.roundTripTimeMillis | 0;\n            }\n            if (stats.outputChannelStats) {\n                audioStatus.outputChannelStats.statsCount++;\n                audioStatus.outputChannelStats.packetsCount += stats.outputChannelStats.packetsCount | 0;\n                audioStatus.outputChannelStats.packetsLost += stats.outputChannelStats.packetsLost | 0;\n                audioStatus.outputChannelStats.jitterBufferMillis += stats.outputChannelStats.jitterBufferMillis | 0;\n                audioStatus.outputChannelStats.roundTripTimeMillis += stats.outputChannelStats.roundTripTimeMillis | 0;\n            }\n        });\n    }\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { CONNECTOR_CONFIG_EXPOSED_FIELDS, CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH, CONNECTOR_CONFIG_EXCEPTION_FIELDS } from './constants.js';\nimport { Validator, GenericResult, InitResult, CallResult, HangupResult, HoldToggleResult, ContactsResult, PhoneContactsResult, MuteToggleResult,\n    ParticipantResult, RecordingToggleResult, AgentConfigResult, ActiveCallsResult, SignedRecordingUrlResult, LogoutResult,\n    VendorConnector, Contact, AudioStats, SuperviseCallResult, SupervisorHangupResult, AgentStatusInfo, SupervisedCallInfo, \n    CapabilitiesResult, AgentVendorStatusInfo, StateChangeResult, CustomError, DialOptions, ShowStorageAccessResult } from './types';\nimport { enableMos, getMOS, initAudioStats, updateAudioStats } from './mosUtil';\nimport { log, getLogs } from './logger';\n\nlet channelPort;\nlet vendorConnector;\nlet agentAvailable;\nlet isSupervisorConnected;\n\n/**\n * Gets the error type from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorType(e) {\n    return e && e.type ? e.type : e;\n}\n\n/**\n * Sanitizes the object by removing any PII data\n * @param {object} payload\n */\nfunction sanitizePayload(payload) {\n    if (payload) {\n        if (typeof (payload) === 'function') {\n            // remove functions from the payload, because they cannot be copied by the postMessage function\n            return;\n        } else if (typeof (payload) === 'object') {\n            const isArray = Array.isArray(payload);\n            const sanitizedPayload = isArray ? [] : {};\n\n            if (isArray) {\n                payload.forEach(element => {\n                    sanitizedPayload.push(sanitizePayload(element));\n                });\n            } else {\n                for (const property in payload) {\n                    if (property !== 'phoneNumber' &&\n                        property !== 'number' &&\n                        property !== 'name' &&\n                        property !== 'callAttributes') {\n                        sanitizedPayload[property] = sanitizePayload(payload[property]);\n                    }\n                }\n            }\n            return sanitizedPayload;\n        }\n    }\n    return payload;\n}\n\n/**\n * Gets the error message from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorMessage(e) {\n    return e && e.message ? e.message : e;\n}\n/** \n * Dispatch a telephony event log to Salesforce\n * @param {String} eventType event type, i.e. constants.EVENT_TYPE.VOICE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} isError error scenario\n */\nfunction dispatchEventLog(eventType, payload, isError) {\n    const sanitizedPayload = sanitizePayload(payload);\n    const logLevel = isError ? constants.LOG_LEVEL.ERROR : constants.LOG_LEVEL.INFO;\n    log({eventType, payload}, logLevel, constants.LOG_SOURCE.SYSTEM);\n\n    channelPort.postMessage({\n        type: constants.MESSAGE_TYPE.LOG,\n        payload: { eventType, payload: sanitizedPayload, isError }\n    });\n}\n/** \n * Dispatch a telephony event to Salesforce\n * @param {String} eventType event type, i.e. constants.EVENT_TYPE.VOICE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} registerLog optional argument to not register the event\n */\nfunction dispatchEvent(eventType, payload, registerLog = true) {\n    channelPort.postMessage({\n        type: constants.MESSAGE_TYPE.TELEPHONY_EVENT_DISPATCHED,\n        payload: { telephonyEventType: eventType, telephonyEventPayload: payload }\n    });\n    if (registerLog) {\n        dispatchEventLog(eventType, payload, false);\n    }\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {string} errorType Error Type, ex: constants.ErrorType.VOICE.MICROPHONE_NOT_SHARED\n * @param {object} error Error object representing the error\n * @param {string} eventType The event that caused this error, ex: constants.MESSAGE_TYPE.VOICE.ACCEPT_CALL\n */\nfunction dispatchError(errorType, error, eventType) {\n    // eslint-disable-next-line no-console\n    console.error(`SCV dispatched error ${errorType} for eventType ${eventType}`, error);\n    dispatchEvent(constants.EVENT_TYPE.ERROR, { message: errorType }, false);\n    dispatchEventLog(eventType, { errorType, error }, true);\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {CustomError} error Error object representing the custom error\n * @param {string} eventType The event that caused this error, ex: constants.MESSAGE_TYPE.ACCEPT_CALL\n */\nfunction dispatchCustomError(error, eventType) {\n    // eslint-disable-next-line no-console\n    const payload = {\n        customError: {\n            labelName: error.labelName,\n            namespace: error.namespace,\n            message: error.message\n        }\n    };\n    console.error(`SCV dispatched custom error for eventType ${eventType}`, payload);\n    dispatchEvent(constants.EVENT_TYPE.ERROR, payload, false);\n    dispatchEventLog(eventType, { errorType: constants.ERROR_TYPE.CUSTOM_ERROR, error }, true);\n}\n\nfunction dispatchInfo(eventType, payload) {\n    // eslint-disable-next-line no-console\n    console.info(`SCV info message dispatched for eventType ${eventType} with payload ${JSON.stringify(payload)}`);\n    dispatchEvent(constants.EVENT_TYPE.INFO, { message: eventType }, false);\n    dispatchEventLog(eventType, payload, false);\n}\n\n/** \n * Notify Salesforce that the connector is ready\n */\nasync function setConnectorReady() {\n    try {\n        const telephonyConnector = await vendorConnector.getTelephonyConnector();\n        const agentConfigResult = await telephonyConnector.getAgentConfig();\n        const capabilitiesResult = await telephonyConnector.getCapabilities();\n        Validator.validateClassObject(agentConfigResult, AgentConfigResult);\n        Validator.validateClassObject(capabilitiesResult, CapabilitiesResult);\n        if (capabilitiesResult.supportsMos) {\n            enableMos();\n        }\n        const activeCallsResult = await telephonyConnector.getActiveCalls();\n        Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n        const activeCalls = activeCallsResult.activeCalls;\n        const type = constants.MESSAGE_TYPE.CONNECTOR_READY;\n        const payload = {\n            agentConfig: {\n\n                [constants.AGENT_CONFIG_TYPE.PHONES] : agentConfigResult.phones,\n                [constants.AGENT_CONFIG_TYPE.SELECTED_PHONE] : agentConfigResult.selectedPhone\n            },\n            capabilities: {\n                [constants.CAPABILITIES_TYPE.MUTE] : capabilitiesResult.hasMute,\n                [constants.CAPABILITIES_TYPE.RECORD] : capabilitiesResult.hasRecord,\n                [constants.CAPABILITIES_TYPE.MERGE] : capabilitiesResult.hasMerge,\n                [constants.CAPABILITIES_TYPE.SWAP] : capabilitiesResult.hasSwap,\n                [constants.CAPABILITIES_TYPE.SIGNED_RECORDING_URL] : capabilitiesResult.hasSignedRecordingUrl,\n                [constants.CAPABILITIES_TYPE.DEBUG_ENABLED] : capabilitiesResult.debugEnabled,\n                [constants.CAPABILITIES_TYPE.CONTACT_SEARCH] : capabilitiesResult.hasContactSearch,\n                [constants.CAPABILITIES_TYPE.VENDOR_PROVIDED_AVAILABILITY] : capabilitiesResult.hasAgentAvailability,\n                [constants.CAPABILITIES_TYPE.VENDOR_PROVIDED_QUEUE_WAIT_TIME] : capabilitiesResult.hasQueueWaitTime,\n                [constants.CAPABILITIES_TYPE.SUPERVISOR_LISTEN_IN] : capabilitiesResult.hasSupervisorListenIn,\n                [constants.CAPABILITIES_TYPE.SUPERVISOR_BARGE_IN] : capabilitiesResult.hasSupervisorBargeIn,\n                [constants.CAPABILITIES_TYPE.MOS] : capabilitiesResult.supportsMos,\n                [constants.CAPABILITIES_TYPE.BLIND_TRANSFER] : capabilitiesResult.hasBlindTransfer,\n                [constants.CAPABILITIES_TYPE.TRANSFER_TO_OMNI_FLOW] : capabilitiesResult.hasTransferToOmniFlow,\n                [constants.CAPABILITIES_TYPE.PENDING_STATUS_CHANGE] : capabilitiesResult.hasPendingStatusChange,\n                [constants.CAPABILITIES_TYPE.PHONEBOOK] : capabilitiesResult.hasPhoneBook,\n                [constants.CAPABILITIES_TYPE.SFDC_PENDING_STATE]: capabilitiesResult.hasSFDCPendingState\n            },\n            callInProgress: activeCalls.length > 0 ? activeCalls[0] : null\n        }\n        channelPort.postMessage({\n            type,\n            payload\n        });\n        dispatchEventLog(type, payload, false);\n    } catch (e) {\n        // Post CONNECTOR_READY even if getAgentConfig is not implemented\n        channelPort.postMessage({\n            type: constants.MESSAGE_TYPE.CONNECTOR_READY,\n            payload: {}\n        });\n        dispatchEventLog(constants.MESSAGE_TYPE.CONNECTOR_READY, {}, false);\n    }\n}\n\n//TODO: 230 we should convert call object to PhoneCall object\nasync function channelMessageHandler(message) { \n    const eventType = message.data.type;\n    if (eventType !== constants.MESSAGE_TYPE.LOG) {\n        dispatchEventLog(eventType, message.data, false);\n    }\n    switch (eventType) {\n        case constants.MESSAGE_TYPE.VOICE.ACCEPT_CALL:\n            try {\n                if (message.data.call && message.data.call.callType &&\n                    (message.data.call.callType.toLowerCase() === constants.CALL_TYPE.OUTBOUND.toLowerCase() ||\n                    message.data.call.callType.toLowerCase() === constants.CALL_TYPE.DIALED_CALLBACK.toLowerCase())) {\n                    return;\n                }\n                initAudioStats();\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                if (isSupervisorConnected) {\n                    const hangupPayload = await telephonyConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP, hangupPayload.calls);\n                }\n                let payload = await telephonyConnector.acceptCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(call.callType.toLowerCase() === constants.CALL_TYPE.CALLBACK.toLowerCase() ?\n                    constants.EVENT_TYPE.VOICE.CALL_STARTED : constants.EVENT_TYPE.VOICE.CALL_CONNECTED, call);\n            } catch (e) {\n                isSupervisorConnected = false;\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.ACCEPT_CALL);\n                } else {\n                    dispatchInfo(constants.INFO_TYPE.VOICE.CAN_NOT_ACCEPT_THE_CALL, {messagetype: constants.MESSAGE_TYPE.VOICE.ACCEPT_CALL, additionalInfo: e});\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.DECLINE_CALL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload =  await telephonyConnector.declineCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.HANGUP, call);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.DECLINE_CALL);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_DECLINE_THE_CALL, e, constants.MESSAGE_TYPE.VOICE.DECLINE_CALL);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.END_CALL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.endCall(message.data.call, message.data.agentStatus);\n                Validator.validateClassObject(payload, HangupResult);\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                const { calls } = payload;\n                // after end calls from vendor side, if no more active calls, fire HANGUP, otherwise, fire PARTICIPANT_REMOVED\n                if (activeCalls.length === 0) {\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.HANGUP, calls);\n                } else {\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED, calls.length > 0 && calls[0]);\n                }\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.END_CALL);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_END_THE_CALL, e, constants.MESSAGE_TYPE.VOICE.END_CALL);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.MUTE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.mute();\n                publishEvent({eventType: constants.EVENT_TYPE.VOICE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.MUTE);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_MUTE_CALL, e, constants.MESSAGE_TYPE.VOICE.MUTE);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.UNMUTE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.unmute();\n                publishEvent({eventType: constants.EVENT_TYPE.VOICE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.UNMUTE);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_UNMUTE_CALL, e, constants.MESSAGE_TYPE.VOICE.UNMUTE);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.HOLD:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.hold(message.data.call);\n                publishEvent({eventType: constants.EVENT_TYPE.VOICE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.HOLD);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT:\n                            dispatchError(constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.HOLD);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_HOLD_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.HOLD);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.RESUME:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.resume(message.data.call);\n                publishEvent({eventType: constants.EVENT_TYPE.VOICE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.RESUME);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT:\n                            dispatchError(constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.RESUME);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_RESUME_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.RESUME);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.SET_AGENT_STATUS:\n            try {\n                const statusInfo = message.data.statusInfo || {};\n                const enqueueNextState = message.data.enqueueNextState || false;\n                const payload = await vendorConnector.setAgentStatus(message.data.agentStatus, statusInfo, enqueueNextState);\n                Validator.validateClassObject(payload, GenericResult);\n                const { success } = payload;\n                dispatchEvent(constants.EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.SET_AGENT_STATUS);\n                } else {\n                    if (message.data.statusInfo) {\n                        dispatchEvent(constants.EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success: false });\n                    }\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.INVALID_AGENT_STATUS:\n                            dispatchError(constants.ERROR_TYPE.INVALID_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.SET_AGENT_STATUS);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.SET_AGENT_STATUS);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.GET_AGENT_STATUS:\n            try {\n                const payload = await vendorConnector.getAgentStatus();\n                Validator.validateClassObject(payload, AgentVendorStatusInfo);\n                dispatchEvent(constants.EVENT_TYPE.GET_AGENT_STATUS_RESULT, payload);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.GET_AGENT_STATUS);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.GET_AGENT_STATUS);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.DIAL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const isCallback = message.data.params && message.data.params.indexOf(constants.DIAL_OPTIONS.CALLBACK) >= 0;\n                const payload = await telephonyConnector.dial(new Contact(message.data.contact),\n                                                              new DialOptions({ isCallback }));\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                // If connectors wants this to be created as callback \n                if (constants.CALL_TYPE.DIALED_CALLBACK.toLowerCase() === call.callType.toLowerCase() && isCallback) {\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED, call);\n                } else { // continue treating this as outbound\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_STARTED, call);\n                }\n            } catch (e) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_FAILED);\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.DIAL);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.VOICE.INVALID_DESTINATION:\n                            dispatchError(constants.ERROR_TYPE.VOICE.INVALID_DESTINATION, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.DIAL);\n                            break;\n                        case constants.ERROR_TYPE.GENERIC_ERROR:\n                            dispatchError(constants.ERROR_TYPE.GENERIC_ERROR, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.DIAL);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.DIAL);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.SEND_DIGITS:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                await telephonyConnector.sendDigits(message.data.digits);\n            } catch (e) {\n                dispatchEventLog(constants.MESSAGE_TYPE.VOICE.SEND_DIGITS, message.data.digits, true);\n            }\n            break;\n        case constants.MESSAGE_TYPE.VOICE.GET_PHONE_CONTACTS:\n            try  {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.getPhoneContacts(message.data.filter);\n                Validator.validateClassObject(payload, PhoneContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        type: contact.type,\n                        name: contact.name,\n                        phoneNumber: contact.phoneNumber,\n                        prefix: contact.prefix,\n                        extension: contact.extension,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        availability: contact.availability,\n                        queueWaitTime: contact.queueWaitTime,\n                        recordId: contact.recordId,\n                        description: contact.description\n                    };\n                });\n                dispatchEvent(constants.EVENT_TYPE.VOICE.PHONE_CONTACTS, {\n                    contacts, contactTypes: payload.contactTypes\n                });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.GET_PHONE_CONTACTS);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_GET_PHONE_CONTACTS, e, constants.MESSAGE_TYPE.VOICE.GET_PHONE_CONTACTS);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.GET_CONTACTS:\n            try  {\n                const payload = await vendorConnector.getContacts(message.data.filter, message.data.workItemId);\n                Validator.validateClassObject(payload, ContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        type: contact.type,\n                        name: contact.name,\n                        phoneNumber: contact.phoneNumber,\n                        prefix: contact.prefix,\n                        extension: contact.extension,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        availability: contact.availability,\n                        queueWaitTime: contact.queueWaitTime,\n                        recordId: contact.recordId,\n                        description: contact.description\n                    };\n                });\n                dispatchEvent(constants.EVENT_TYPE.GET_CONTACTS_RESULT, {\n                    contacts, contactTypes: payload.contactTypes\n                });\n            } catch (e) {\n                dispatchCustomError(e, constants.MESSAGE_TYPE.GET_CONTACTS);\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.SWAP_PARTICIPANTS:\n            try {\n                // TODO: Create PhoneCall from call1.callId & call2.callId\n                // TODO: rename to call1 and call2\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.swap(message.data.callToHold, message.data.callToResume);\n                publishEvent({ eventType: constants.EVENT_TYPE.VOICE.PARTICIPANTS_SWAPPED, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.SWAP_PARTICIPANTS);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_SWAP_PARTICIPANTS, e, constants.MESSAGE_TYPE.VOICE.SWAP_PARTICIPANTS);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.CONFERENCE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.conference(message.data.calls);\n                publishEvent({ eventType: constants.EVENT_TYPE.VOICE.PARTICIPANTS_CONFERENCED, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.CONFERENCE);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_CONFERENCE, e, constants.MESSAGE_TYPE.VOICE.CONFERENCE);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.ADD_PARTICIPANT:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.addParticipant(new Contact(message.data.contact), message.data.call, message.data.isBlindTransfer);\n                publishEvent({ eventType: constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED, payload });\n                if (message.data.isBlindTransfer) {\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.HANGUP, message.data.call);\n                }\n            } catch (e) {\n                // TODO: Can we avoid passing in reason field\n                dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED, {\n                    reason: constants.EVENT_TYPE.ERROR.toLowerCase()\n                });\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.ADD_PARTICIPANT);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.VOICE.INVALID_DESTINATION:\n                            dispatchError(constants.ERROR_TYPE.VOICE.INVALID_DESTINATION, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.ADD_PARTICIPANT);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_ADD_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.ADD_PARTICIPANT);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.PAUSE_RECORDING:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.pauseRecording(message.data.call);\n                publishEvent({ eventType: constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.PAUSE_RECORDING);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_PAUSE_RECORDING, e, constants.MESSAGE_TYPE.VOICE.PAUSE_RECORDING);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.RESUME_RECORDING:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.resumeRecording(message.data.call);\n                publishEvent({ eventType: constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.RESUME_RECORDING);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_RESUME_RECORDING, e, constants.MESSAGE_TYPE.VOICE.RESUME_RECORDING);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.LOGOUT:\n            try {\n                const payload = await vendorConnector.logout();\n                Validator.validateClassObject(payload, LogoutResult);\n                const { success, loginFrameHeight } = payload;\n                dispatchEvent(constants.EVENT_TYPE.LOGOUT_RESULT, { success, loginFrameHeight });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.LOGOUT);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_OUT, e, constants.MESSAGE_TYPE.LOGOUT);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.MESSAGE:\n            // TODO: Define a return type for handling message\n            vendorConnector.handleMessage(message.data.message);\n        break;\n        case constants.MESSAGE_TYPE.VOICE.WRAP_UP_CALL: {\n            const telephonyConnector = await vendorConnector.getTelephonyConnector();\n            telephonyConnector.wrapUpCall(message.data.call);\n        }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.AGENT_AVAILABLE: {\n            if (message.data && message.data.isAvailable) {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                for (const callId in activeCalls) {\n                    const call = activeCalls[callId];\n                    const shouldReplay = call.callInfo ? call.callInfo.isReplayable : true;\n                    const isSupervisorCall = call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.SUPERVISOR;\n                    const hasSupervisorBargedIn = isSupervisorCall && call.callAttributes && call.callAttributes.hasSupervisorBargedIn;\n                    if (shouldReplay) {\n                        call.isReplayedCall = true;\n                        switch(call.state) {\n                            case constants.CALL_STATE.CONNECTED:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_CONNECTED, call);\n                                    if (hasSupervisorBargedIn) {\n                                        dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_BARGED_IN, call);\n                                    }\n                                    break;\n                                }\n                                dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_CONNECTED, call);\n                                break;\n                            case constants.CALL_STATE.RINGING:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_STARTED, call);\n                                    break;\n                                }\n                                dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_STARTED, call);\n                                break;\n                            case constants.CALL_STATE.TRANSFERRING:\n                                dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            case constants.CALL_STATE.TRANSFERRED:\n                                dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.SET_AGENT_CONFIG:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.setAgentConfig(message.data.config);\n                Validator.validateClassObject(result, GenericResult);\n                dispatchEvent(constants.EVENT_TYPE.VOICE.AGENT_CONFIG_UPDATED, result);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.SET_AGENT_CONFIG);\n                } else {\n                    dispatchError(getErrorType(e) === constants.ERROR_TYPE.VOICE.CAN_NOT_UPDATE_PHONE_NUMBER ? constants.ERROR_TYPE.VOICE.CAN_NOT_UPDATE_PHONE_NUMBER : constants.ERROR_TYPE.VOICE.CAN_NOT_SET_AGENT_CONFIG , getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.SET_AGENT_CONFIG);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.GET_SIGNED_RECORDING_URL:\n            try {\n                const { recordingUrl, vendorCallKey, callId } = message.data;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.getSignedRecordingUrl(recordingUrl, vendorCallKey, callId);\n                Validator.validateClassObject(result, SignedRecordingUrlResult);\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SIGNED_RECORDING_URL, result);\n            } catch (e) {\n                // In case of an error, we want to show an error message in the recording player\n                const signedRecordingUrlResult = new SignedRecordingUrlResult({\n                    success: false\n                });\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SIGNED_RECORDING_URL, signedRecordingUrlResult, false);\n                dispatchEventLog(constants.MESSAGE_TYPE.VOICE.GET_SIGNED_RECORDING_URL, signedRecordingUrlResult, true);\n            }\n        break;\n        case constants.MESSAGE_TYPE.DOWNLOAD_VENDOR_LOGS:\n            vendorConnector.downloadLogs(getLogs());\n        break;\n        case constants.MESSAGE_TYPE.LOG: {\n                const { logLevel, logMessage, payload } = message.data;\n                vendorConnector.logMessageToVendor(logLevel, logMessage, payload);\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.SUPERVISE_CALL:\n            try {\n                isSupervisorConnected = true;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.superviseCall(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                const agentConfigResult = await telephonyConnector.getAgentConfig();\n                if(agentConfigResult.selectedPhone.type === constants.PHONE_TYPE.SOFT_PHONE) {\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_CONNECTED, result.call);\n                } else {\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_STARTED, result.call);\n                }\n            } catch (e){\n                isSupervisorConnected = false;\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.SUPERVISE_CALL);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_SUPERVISE_CALL, e, constants.MESSAGE_TYPE.VOICE.SUPERVISE_CALL);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.SUPERVISOR_DISCONNECT:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.supervisorDisconnect(message.data.call);\n                Validator.validateClassObject(result, SupervisorHangupResult);\n                isSupervisorConnected = false;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP, result.calls);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.SUPERVISOR_DISCONNECT);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_DISCONNECT_SUPERVISOR, e, constants.MESSAGE_TYPE.VOICE.SUPERVISOR_DISCONNECT);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.SUPERVISOR_BARGE_IN:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.supervisorBargeIn(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_BARGED_IN, result.call );\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.SUPERVISOR_BARGE_IN);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_BARGE_IN_SUPERVISOR, e, constants.MESSAGE_TYPE.VOICE.SUPERVISOR_BARGE_IN);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.AGENT_WORK_EVENT: {\n            let { workItemId, workId, workEvent } = message.data.agentWork;\n            vendorConnector.onAgentWorkEvent({\n                workItemId,\n                workId,\n                workEvent\n            });\n        }\n        break;\n        default:\n            break;\n    }\n}\n\n\nasync function windowMessageHandler(message) {\n    switch (message.data.type) {\n        case constants.MESSAGE_TYPE.SETUP_CONNECTOR: {\n            const sfDomain = /^https:\\/\\/[\\w-.]+(lightning\\.[\\w]+\\.soma\\.force\\.com|\\.lightning\\.force\\.com|\\.lightning\\.pc-rnd\\.force\\.com|\\.stm\\.force\\.com|\\.vf\\.force\\.com|\\.salesforce\\.com|\\.my\\.salesforce-sites\\.com|\\.lightning\\.localhost\\.[\\w]+\\.force.com)$/;\n            const originUrl = new URL(message.origin);\n            const url = originUrl.protocol + '//' + originUrl.hostname;\n\n            if (sfDomain.test(url)) {\n                channelPort = message.ports[0];\n                channelPort.onmessage = channelMessageHandler;\n                dispatchEventLog(constants.MESSAGE_TYPE.SETUP_CONNECTOR, exposedConnectorConfig(message.data.connectorConfig), false);\n                try {\n                    const payload = await vendorConnector.init(message.data.connectorConfig);\n                    Validator.validateClassObject(payload, InitResult);\n                    if (payload.showStorageAccess) {\n                        dispatchEvent(constants.EVENT_TYPE.SHOW_STORAGE_ACCESS, {\n                            success: true\n                        });\n                    } else if (payload.showLogin) {\n                        dispatchEvent(constants.EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        });\n                    } else if (payload.isSilentLogin) {\n                        dispatchEvent(constants.EVENT_TYPE.SHOW_LOGIN, {\n                            isSilentLogin: payload.isSilentLogin\n                        });\n                    } else {\n                        setConnectorReady();\n                    }\n                } catch (e) {\n                    if (e instanceof CustomError) {\n                        dispatchCustomError(e, constants.MESSAGE_TYPE.SETUP_CONNECTOR);\n                    } else {\n                        switch(getErrorType(e)) {\n                            case constants.ERROR_TYPE.VOICE.INVALID_PARAMS:\n                                dispatchError(constants.ERROR_TYPE.VOICE.INVALID_PARAMS, getErrorMessage(e), constants.MESSAGE_TYPE.SETUP_CONNECTOR);\n                                break;\n                            default:\n                                dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_IN, getErrorMessage(e), constants.MESSAGE_TYPE.SETUP_CONNECTOR);\n                                break;\n                        }\n                    }\n                }\n            }\n            window.removeEventListener('message', windowMessageHandler);\n        }\n            break;\n        default:\n            break;\n    }\n}\n\nfunction exposedConnectorConfig(payload) {\n    payload = payload || {};\n    let obj = {};\n    //properties that are equal to key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS.forEach(prop => {\n        if (payload.hasOwnProperty(prop)) {\n            obj[prop] = payload[prop];\n        }\n    });\n    //properties that start with key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH.forEach(prop => {\n        Object.keys(payload).forEach(key => {\n            if (key.startsWith(prop) && !CONNECTOR_CONFIG_EXCEPTION_FIELDS.includes(key)) {\n                obj[key] = payload[key];\n            }\n        });\n    });\n\n    return obj;\n}\n\nfunction validatePayload(payload, payloadType, errorType, eventType) {\n    try {\n        Validator.validateClassObject(payload, payloadType);\n        return true;\n    } catch (e) {\n        if (errorType) {\n            dispatchError(errorType, e, eventType);\n        }\n        return false;\n    }\n}\n\n/*========================== Exported Functions ==========================*/\n/**\n * Initialize a vendor connector\n * @param {VendorConnector} connector\n */\nexport function initializeConnector(connector) {\n    vendorConnector = connector;\n    window.addEventListener('message', windowMessageHandler);\n}\n\n/**\n * Publish an event or error log to Salesforce\n * @param {object} param\n * @param {string} param.eventType Any event type to be logged\n * @param {object} param.payload Any payload for the log that needs to be logged\n * @param {boolean} param.isError\n */\nexport function publishLog({ eventType, payload, isError }) {\n    dispatchEventLog(eventType, payload, isError);\n}\n\n/**\n * Publish a telephony error to Salesforce\n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\"|\"AGENT_ERROR\"|\"SOFTPHONE_ERROR\")} param.eventType Event type to publish.\n * @param {object} param.error Error object representing the error\n */\nexport function publishError({ eventType, error }) {\n    if (error instanceof CustomError) {\n        dispatchCustomError(error, eventType);\n        return;\n    }\n\n    switch(eventType) {\n        case constants.EVENT_TYPE.LOGIN_RESULT:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_IN, error, constants.EVENT_TYPE.LOGIN_RESULT);\n            break;\n        case constants.EVENT_TYPE.LOGOUT_RESULT:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_OUT, error, constants.EVENT_TYPE.LOGOUT_RESULT);\n            break;\n        case constants.EVENT_TYPE.VOICE.CALL_STARTED:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.VOICE.CALL_STARTED);\n            break;\n        case constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED);\n            break;\n        case constants.EVENT_TYPE.VOICE.CALL_CONNECTED:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.VOICE.CALL_CONNECTED);\n            break;\n        case constants.EVENT_TYPE.VOICE.HANGUP: \n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_END_THE_CALL, error, constants.EVENT_TYPE.VOICE.HANGUP);\n            break;\n        case constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED:\n            dispatchError(getErrorType(error) === constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT ? constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT : constants.ERROR_TYPE.VOICE.CAN_NOT_ADD_PARTICIPANT, error, constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED);\n            break;\n        case constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_CONNECT_PARTICIPANT, error, constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED);\n            break;\n        case constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_HANGUP_PARTICIPANT, error, constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED); \n            break;\n        case constants.EVENT_TYPE.VOICE.MUTE_TOGGLE:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_TOGGLE_MUTE, error, constants.EVENT_TYPE.VOICE.MUTE_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.VOICE.HOLD_TOGGLE: \n            dispatchError(getErrorType(error) === constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT ? constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT : constants.ERROR_TYPE.VOICE.CAN_NOT_TOGGLE_HOLD, error, constants.EVENT_TYPE.VOICE.HOLD_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_TOGGLE_RECORD, error, constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.VOICE.PARTICIPANTS_SWAPPED: \n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_SWAP_PARTICIPANTS, error, constants.EVENT_TYPE.VOICE.PARTICIPANTS_SWAPPED);\n            break;\n        case constants.EVENT_TYPE.VOICE.PARTICIPANTS_CONFERENCED:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_CONFERENCE, error, constants.EVENT_TYPE.VOICE.PARTICIPANTS_CONFERENCED);\n            break;\n        case constants.EVENT_TYPE.VOICE.AGENT_ERROR:\n            dispatchError(constants.ERROR_TYPE.VOICE.AGENT_ERROR, error, constants.EVENT_TYPE.VOICE.AGENT_ERROR);\n            break;\n        case constants.EVENT_TYPE.VOICE.SOFTPHONE_ERROR:\n            switch(getErrorType(error)) {\n                case constants.ERROR_TYPE.VOICE.UNSUPPORTED_BROWSER:\n                    dispatchError(constants.ERROR_TYPE.VOICE.UNSUPPORTED_BROWSER, error, constants.EVENT_TYPE.VOICE.SOFTPHONE_ERROR);\n                    break;\n                case constants.ERROR_TYPE.VOICE.MICROPHONE_NOT_SHARED:\n                    dispatchError(constants.ERROR_TYPE.VOICE.MICROPHONE_NOT_SHARED, error, constants.EVENT_TYPE.VOICE.SOFTPHONE_ERROR);\n                    break;\n                default:\n                    dispatchError(constants.ERROR_TYPE.GENERIC_ERROR, error, constants.EVENT_TYPE.VOICE.SOFTPHONE_ERROR);\n            }\n            break;\n        default:\n            console.error('Unhandled error scenario with arguments ', arguments);\n    }\n}\n\n/**\n * Publish an event to Sfdc. The event payload will be verified to be the correct type before being published. \n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\")} param.eventType Event type to publish\n * @param {object} param.payload Payload for the event. Must to be an object of the payload class associated with the EVENT_TYPE else the event is NOT dispatched\n * @param {boolean} param.registerLog Boolean to opt out of registering logs for events\n * LOGIN_RESULT - GenericResult\n * LOGOUT_RESULT - LogoutResult\n * CALL_STARTED - CallResult\n * QUEUED_CALL_STARTED - CallResult\n * CALL_CONNECTED - CallResult\n * HANGUP - CallResult\n * PARTICIPANT_CONNECTED - ParticipantResult\n * PARTICIPANT_ADDED - ParticipantResult\n * PARTICIPANTS_SWAPPED - HoldToggleResult\n * PARTICIPANTS_CONFERENCED - HoldToggleResult\n * MESSAGE - object\n * MUTE_TOGGLE - MuteToggleResult\n * HOLD_TOGGLE - HoldToggleResult\n * RECORDING_TOGGLE - RecordingToggleResult\n */\nexport async function publishEvent({ eventType, payload, registerLog = true }) {\n    switch(eventType) {\n        case constants.EVENT_TYPE.LOGIN_RESULT: {\n            if (validatePayload(payload, GenericResult, constants.ERROR_TYPE.CAN_NOT_LOG_IN, constants.EVENT_TYPE.LOGIN_RESULT)) {\n                dispatchEvent(constants.EVENT_TYPE.LOGIN_RESULT, payload, registerLog);\n                if (payload.success) {\n                    setConnectorReady();\n                }\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.LOGOUT_RESULT:\n            if (validatePayload(payload, LogoutResult, constants.ERROR_TYPE.CAN_NOT_LOG_OUT, constants.EVENT_TYPE.LOGOUT_RESULT)) {\n                dispatchEvent(constants.EVENT_TYPE.LOGOUT_RESULT, {\n                    success: payload.success,\n                    loginFrameHeight: payload.loginFrameHeight\n                }, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.VOICE.CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.VOICE.CALL_STARTED)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.EVENT_TYPE.VOICE.CALL_CONNECTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.VOICE.CALL_CONNECTED)) {\n                initAudioStats();\n                if (isSupervisorConnected) {\n                    const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                    const hangupPayload = await telephonyConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP, hangupPayload, true /* ignoring registerLog for critical event*/);\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n                    break;\n                } \n                dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.EVENT_TYPE.VOICE.HANGUP: {\n            if (validatePayload(payload, HangupResult, constants.ERROR_TYPE.VOICE.CAN_NOT_END_THE_CALL, constants.EVENT_TYPE.VOICE.HANGUP)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.HANGUP, payload.calls, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED: {\n            if (validatePayload(payload, ParticipantResult, constants.ERROR_TYPE.VOICE.CAN_NOT_ADD_PARTICIPANT, constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED)) {\n                const { initialCallHasEnded, callInfo, phoneNumber, callId } = payload;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    phoneNumber,\n                    callId\n                }, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED: {\n            if (validatePayload(payload, ParticipantResult, constants.ERROR_TYPE.VOICE.CAN_NOT_CONNECT_PARTICIPANT, constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED)) {\n                const { initialCallHasEnded, callInfo, phoneNumber, callId } = payload;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    phoneNumber,\n                    callId\n                }, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED: {\n            // TODO: The logic here needs to be modified. Ideally firing CallResult with \n            // correct participantType should do the trick but we are firing PARTICIPANT_CONNECTED because of a bug W-8601645\n            // Once the bug is fixed, this code needs to be updated\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.VOICE.CAN_NOT_HANGUP_PARTICIPANT, constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED)) { \n                const { call } = payload;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                if (validatePayload(activeCallsResult, ActiveCallsResult)) {\n                    // when no more active calls, fire HANGUP\n                    const activeCalls = activeCallsResult.activeCalls;\n                    if (activeCalls.length === 0) {\n                        dispatchEvent(constants.EVENT_TYPE.VOICE.HANGUP, call, true /* ignoring registerLog for critical event*/);\n                    } else if (call && call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.INITIAL_CALLER) {\n                        // when there is still transfer call, based on the state of the transfer call, fire PARTICIPANT_ADDED or PARTICIPANT_CONNECTED\n                        const transferCall = Object.values(activeCalls).filter((obj) => obj['callType'] === constants.CALL_TYPE.ADD_PARTICIPANT).pop();\n                        const event = transferCall.state === constants.CALL_STATE.TRANSFERRING ? constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED : constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED;\n                        dispatchEvent(event, {\n                            initialCallHasEnded : true\n                        }, true /* ignoring registerLog for critical event*/)\n                    } else {\n                        dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED, {\n                            reason: call? call.reason : null\n                        }, true /* ignoring registerLog for critical event*/);\n                    }\n                }\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.MESSAGE:\n            dispatchEvent(constants.EVENT_TYPE.MESSAGE, payload, registerLog);\n            break;\n        // TODO: Add validations for the ACW & Wrap up ended\n        case constants.EVENT_TYPE.VOICE.AFTER_CALL_WORK_STARTED:\n            dispatchEvent(constants.EVENT_TYPE.VOICE.AFTER_CALL_WORK_STARTED, payload, registerLog);\n            break;\n        case constants.EVENT_TYPE.VOICE.WRAP_UP_ENDED:\n            dispatchEvent(constants.EVENT_TYPE.VOICE.WRAP_UP_ENDED, payload, registerLog);\n            break;\n        /* This is only added to aid in connector development */\n        case constants.EVENT_TYPE.REMOTE_CONTROLLER:\n            channelMessageHandler(payload);\n            break;\n        case constants.EVENT_TYPE.VOICE.MUTE_TOGGLE:\n            if (validatePayload(payload, MuteToggleResult, constants.ERROR_TYPE.VOICE.CAN_NOT_TOGGLE_MUTE, constants.EVENT_TYPE.VOICE.MUTE_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.MUTE_TOGGLE, payload, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.VOICE.HOLD_TOGGLE: {\n            const { isThirdPartyOnHold, isCustomerOnHold, calls} = payload;\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.VOICE.CAN_NOT_TOGGLE_HOLD, constants.EVENT_TYPE.VOICE.HOLD_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE: {\n            const { isRecordingPaused,\n                contactId,\n                initialContactId,\n                instanceId,\n                region\n            } = payload;\n            if (validatePayload(payload, RecordingToggleResult, constants.ERROR_TYPE.VOICE.CAN_NOT_TOGGLE_RECORD, constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE, {\n                    isRecordingPaused,\n                    contactId,\n                    initialContactId,\n                    instanceId,\n                    region\n                }, registerLog);\n            }\n        break;\n        }\n        case constants.EVENT_TYPE.VOICE.PARTICIPANTS_SWAPPED: {\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.VOICE.CAN_NOT_SWAP_PARTICIPANTS, constants.EVENT_TYPE.VOICE.PARTICIPANTS_SWAPPED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold, calls } = payload;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, true /* ignoring registerLog for critical event*/);\n            }\n        }\n        break;\n        case constants.EVENT_TYPE.VOICE.PARTICIPANTS_CONFERENCED: {\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.VOICE.CAN_NOT_CONFERENCE, constants.EVENT_TYPE.VOICE.PARTICIPANTS_CONFERENCED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold } = payload;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold\n                }, true /* ignoring registerLog for critical event*/);\n            }\n        break;\n        }\n        case constants.EVENT_TYPE.VOICE.UPDATE_AUDIO_STATS: {\n            if (validatePayload(payload, AudioStats)) {\n                if (payload.stats) {\n                    updateAudioStats(payload.stats);\n                }\n                if (payload.isAudioStatsCompleted && payload.callId) {\n                    const callId = payload.callId;\n                    const mos = getMOS();\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.UPDATE_AUDIO_STATS_COMPLETED, {callId, mos}, registerLog);\n                }\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.VOICE.SUPERVISOR_BARGED_IN: {\n            if (validatePayload(payload, SuperviseCallResult, constants.ERROR_TYPE.VOICE.CAN_NOT_BARGE_IN_SUPERVISOR, constants.EVENT_TYPE.VOICE.SUPERVISOR_BARGED_IN)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_BARGED_IN, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.VOICE.CALL_BARGED_IN: {\n            if (validatePayload(payload, SupervisedCallInfo,  constants.ERROR_TYPE.GENERIC_ERROR, constants.EVENT_TYPE.VOICE.CALL_BARGED_IN)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_BARGED_IN, payload, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_STARTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.ERROR_TYPE.VOICE.CAN_NOT_SUPERVISE_CALL, constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_STARTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_CONNECTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.ERROR_TYPE.VOICE.CAN_NOT_SUPERVISE_CALL, constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_CONNECTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP: {\n            if (validatePayload(payload, SupervisorHangupResult,  constants.ERROR_TYPE.VOICE.CAN_NOT_DISCONNECT_SUPERVISOR, constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP)) {\n                isSupervisorConnected = false;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP, payload.calls, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.SET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentStatusInfo,  constants.ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, constants.EVENT_TYPE.SET_AGENT_STATUS)) {\n                const statusId = payload.statusId;\n                dispatchEvent(constants.EVENT_TYPE.SET_AGENT_STATUS, { statusId }, registerLog);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.VOICE.SHOW_TRANSFER_VIEW: {\n            dispatchEvent(constants.EVENT_TYPE.VOICE.SHOW_TRANSFER_VIEW, payload);\n            break;\n        }\n\n        case constants.EVENT_TYPE.STORAGE_ACCESS_RESULT: {\n            if(validatePayload(payload, ShowStorageAccessResult, constants.ERROR_TYPE.INVALID_STORAGE_ACCESS_RESULT, constants.EVENT_TYPE.STORAGE_ACCESS_RESULT)) {\n                dispatchEvent(constants.EVENT_TYPE.STORAGE_ACCESS_RESULT, payload);\n                if(payload.success) {\n                    if (payload.showLogin) {\n                        dispatchEvent(constants.EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        }, registerLog);\n                    } else {\n                        setConnectorReady();\n                    }   \n                }\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.EVENT_TYPE.GET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentVendorStatusInfo, constants.ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, constants.EVENT_TYPE.GET_AGENT_STATUS)) {\n                dispatchEvent(constants.EVENT_TYPE.GET_AGENT_STATUS, payload, registerLog);\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.EVENT_TYPE.STATE_CHANGE: {\n            if(validatePayload(payload, StateChangeResult, constants.ERROR_TYPE.INVALID_STATE_CHANGE_RESULT, constants.EVENT_TYPE.STATE_CHANGE)) {\n                dispatchEvent(constants.EVENT_TYPE.STATE_CHANGE, payload);\n            }\n            break;\n        }\n    }\n}\n"],"sourceRoot":""}