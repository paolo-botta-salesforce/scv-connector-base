{"version":3,"sources":["webpack://SCVConnectorBase/webpack/universalModuleDefinition","webpack://SCVConnectorBase/webpack/bootstrap","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/createClass.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/typeof.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/regenerator/index.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/getPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/toPropertyKey.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/inherits.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/toPrimitive.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/regeneratorRuntime.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack://SCVConnectorBase/./src/main/constants.js","webpack://SCVConnectorBase/./src/main/logger.js","webpack://SCVConnectorBase/./src/main/downloadData.js","webpack://SCVConnectorBase/./src/main/types.js","webpack://SCVConnectorBase/./src/main/mosUtil.js","webpack://SCVConnectorBase/./src/main/baseConnector.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","toPropertyKey","_defineProperties","target","props","length","descriptor","configurable","writable","Constructor","protoProps","staticProps","instance","TypeError","obj","_typeof","iterator","constructor","runtime","regeneratorRuntime","accidentalStrictMode","globalThis","Function","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","fn","self","args","arguments","apply","err","undefined","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","toPrimitive","String","subClass","superClass","assertThisInitialized","input","hint","prim","res","Number","_regeneratorRuntime","Op","hasOwn","desc","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","context","Context","makeInvokeMethod","tryCatch","type","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","invoke","record","result","__await","unwrapped","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","awrap","async","iter","keys","val","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","_setPrototypeOf","ReferenceError","MESSAGE_TYPE","SETUP_CONNECTOR","CONNECTOR_READY","LOG","TELEPHONY_EVENT_DISPATCHED","ACCEPT_CALL","DECLINE_CALL","END_CALL","MUTE","UNMUTE","HOLD","RESUME","SET_AGENT_STATUS","GET_AGENT_STATUS","DIAL","SEND_DIGITS","GET_PHONE_CONTACTS","SWAP_PARTICIPANTS","ADD_PARTICIPANT","CONFERENCE","PAUSE_RECORDING","RESUME_RECORDING","LOGOUT","MESSAGE","WRAP_UP_CALL","AGENT_AVAILABLE","SET_AGENT_CONFIG","GET_SIGNED_RECORDING_URL","DOWNLOAD_VENDOR_LOGS","SUPERVISE_CALL","SUPERVISOR_BARGE_IN","SUPERVISOR_DISCONNECT","EVENT_TYPE","QUEUED_CALL_STARTED","CALL_STARTED","CALL_CONNECTED","CALL_FAILED","MUTE_TOGGLE","HOLD_TOGGLE","HANGUP","ERROR","WARNING","INFO","PHONE_CONTACTS","PARTICIPANT_ADDED","PARTICIPANT_CONNECTED","PARTICIPANT_REMOVED","LOGIN_STARTED","LOGIN_RESULT","LOGOUT_RESULT","RECORDING_TOGGLE","PARTICIPANTS_SWAPPED","PARTICIPANTS_CONFERENCED","SHOW_LOGIN","SET_AGENT_STATUS_RESULT","GET_AGENT_STATUS_RESULT","WRAP_UP_ENDED","AFTER_CALL_WORK_STARTED","AGENT_CONFIG_UPDATED","AGENT_ERROR","SOFTPHONE_ERROR","SIGNED_RECORDING_URL","UPDATE_AUDIO_STATS","UPDATE_AUDIO_STATS_COMPLETED","SUPERVISOR_BARGED_IN","SUPERVISOR_CALL_STARTED","SUPERVISOR_CALL_CONNECTED","SUPERVISOR_HANGUP","CALL_BARGED_IN","STATE_CHANGE","INFO_TYPE","CAN_NOT_ACCEPT_THE_CALL","ERROR_TYPE","GENERIC_ERROR","MICROPHONE_NOT_SHARED","UNSUPPORTED_BROWSER","AUTHENTICATION_ERROR","INVALID_AGENT_STATUS","CAN_NOT_SET_AGENT_STATUS","LOGIN_REQUIRED","CAN_NOT_DECLINE_THE_CALL","CAN_NOT_END_THE_CALL","CAN_NOT_HOLD_CALL","CAN_NOT_RESUME_CALL","CAN_NOT_MUTE_CALL","CAN_NOT_UNMUTE_CALL","CAN_NOT_TOGGLE_MUTE","CAN_NOT_TOGGLE_HOLD","CAN_NOT_TOGGLE_RECORD","INVALID_PARTICIPANT","CAN_NOT_LOG_IN","CAN_NOT_LOG_OUT","INVALID_PARAMS","CAN_NOT_GET_PHONE_CONTACTS","CAN_NOT_SWAP_PARTICIPANTS","CAN_NOT_CONFERENCE","INVALID_DESTINATION","INVALID_PHONE_NUMBER","CAN_NOT_HANGUP_PARTICIPANT","CAN_NOT_ADD_PARTICIPANT","CAN_NOT_CONNECT_PARTICIPANT","CAN_NOT_START_THE_CALL","CAN_NOT_PAUSE_RECORDING","CAN_NOT_RESUME_RECORDING","CAN_NOT_SET_AGENT_CONFIG","CAN_NOT_SET_CAPABILITIES","CAN_NOT_UPDATE_PHONE_NUMBER","CAN_NOT_GET_SIGNED_RECORDING_URL","CAN_NOT_SUPERVISE_CALL","CAN_NOT_DISCONNECT_SUPERVISOR","CAN_NOT_BARGE_IN_SUPERVISOR","CAN_NOT_BARGE_IN_CALL","CAN_NOT_GET_AGENT_STATUS","INVALID_STATE_CHANGE_RESULT","AGENT_STATUS","ONLINE","OFFLINE","ACW","CALLBACK_MISSED_OR_REJECTED","PARTICIPANT_TYPE","AGENT","INITIAL_CALLER","THIRD_PARTY","SUPERVISOR","CALL_TYPE","INBOUND","OUTBOUND","CALLBACK","TRANSFER","DIALER_TYPE","OUTBOUND_PREVIEW","NONE","CONTACT_TYPE","PHONEBOOK","QUEUE","PHONENUMBER","FLOW","AGENT_CONFIG_TYPE","SHOW_AGENT_SETTINGS","PHONES","SELECTED_PHONE","CAPABILITIES_TYPE","RECORD","MERGE","SWAP","DEBUG_ENABLED","CONTACT_SEARCH","VENDOR_PROVIDED_AVAILABILITY","VENDOR_PROVIDED_QUEUE_WAIT_TIME","SUPERVISOR_LISTEN_IN","MOS","BLIND_TRANSFER","TRANSFER_TO_OMNI_FLOW","PENDING_STATUS_CHANGE","CALL_STATE","RINGING","CONNECTED","TRANSFERRING","TRANSFERRED","ENDED","PHONE_TYPE","DESK_PHONE","SOFT_PHONE","HANGUP_REASON","PHONE_CALL_ERROR","PHONE_CALL_ENDED","AGENT_AVAILABILITY","AVAILABLE","BUSY","REMOVE_PARTICIPANT_VARIANT","ALWAYS","NEVER","ALWAYS_EXCEPT_ON_HOLD","LOG_LEVEL","LOG_SOURCE","SYSTEM","PARTNER","CONTACTS_FILTER_TYPES","CONNECTOR_CONFIG_EXPOSED_FIELDS","CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH","CONNECTOR_CONFIG_EXCEPTION_FIELDS","_strify","JSON","stringify","LOGS_SIZE","logs","log","logMessage","logLevel","logSource","constants","logStr","Date","toISOString","concat","join","_log","getLogs","parse","downloadLogs","data","fileName","fileType","document","dataStr","file","Blob","a","createElement","blobURL","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","downloadData","getTime","audioStatus","channelPort","vendorConnector","isSupervisorConnected","Constants","_objectSpread","Phone","_createClass","_ref","number","_classCallCheck","Validator","validateEnum","validateString","MuteToggleResult","_ref2","isMuted","ActiveCallsResult","_ref3","_ref3$activeCalls","activeCalls","activeCall","validateClassObject","PhoneCall","CapabilitiesResult","_ref4","_ref4$hasMute","hasMute","_ref4$hasRecord","hasRecord","_ref4$hasMerge","hasMerge","_ref4$hasSwap","hasSwap","_ref4$hasSignedRecord","hasSignedRecordingUrl","_ref4$debugEnabled","debugEnabled","_ref4$hasContactSearc","hasContactSearch","_ref4$hasAgentAvailab","hasAgentAvailability","_ref4$hasQueueWaitTim","hasQueueWaitTime","_ref4$supportsMos","supportsMos","_ref4$hasSupervisorLi","hasSupervisorListenIn","_ref4$hasSupervisorBa","hasSupervisorBargeIn","_ref4$hasBlindTransfe","hasBlindTransfer","_ref4$hasTransferToOm","hasTransferToOmniFlow","_ref4$hasPendingStatu","hasPendingStatusChange","validateBoolean","AgentConfigResult","_ref5","_ref5$phones","phones","_ref5$selectedPhone","selectedPhone","Array","AgentConfig","_ref6","RecordingToggleResult","_ref7","isRecordingPaused","_ref7$contactId","contactId","_ref7$initialContactI","initialContactId","_ref7$instanceId","instanceId","_ref7$region","region","ParticipantResult","_ref8","initialCallHasEnded","callInfo","phoneNumber","callId","CallInfo","PhoneContactsResult","_ref9","_ref9$contacts","contacts","_ref9$contactTypes","contactTypes","contact","Contact","filterType","CallResult","_ref10","HangupResult","_ref11","calls","HoldToggleResult","_ref12","isThirdPartyOnHold","isCustomerOnHold","SignedRecordingUrlResult","_ref13","success","url","duration","validateNumber","InitResult","_ref14","_ref14$showLogin","showLogin","_ref14$loginFrameHeig","loginFrameHeight","GenericResult","_ref15","LogoutResult","_ref16","_ref16$loginFrameHeig","_ref17","_ref17$callStateTimes","callStateTimestamp","isOnHold","_ref17$isMuted","_ref17$isRecordingPau","initialCallId","_ref17$isSoftphoneCal","isSoftphoneCall","_ref17$acceptEnabled","acceptEnabled","_ref17$declineEnabled","declineEnabled","_ref17$muteEnabled","muteEnabled","_ref17$swapEnabled","swapEnabled","_ref17$conferenceEnab","conferenceEnabled","_ref17$holdEnabled","holdEnabled","_ref17$recordEnabled","recordEnabled","_ref17$addCallerEnabl","addCallerEnabled","_ref17$extensionEnabl","extensionEnabled","_ref17$isReplayable","isReplayable","_ref17$isBargeable","isBargeable","isExternalTransfer","_ref17$showMuteButton","showMuteButton","_ref17$showRecordButt","showRecordButton","_ref17$showAddCallerB","showAddCallerButton","_ref17$showAddBlindTr","showAddBlindTransferButton","_ref17$showMergeButto","showMergeButton","_ref17$showSwapButton","showSwapButton","_ref17$removeParticip","removeParticipantVariant","validateDate","_ref18","id","prefix","extension","endpointARN","queue","availability","recordId","description","queueWaitTime","PhoneCallAttributes","_ref19","voiceCallId","participantType","_ref19$dialerType","dialerType","parentId","_ref19$hasSupervisorB","hasSupervisorBargedIn","_ref20","callType","callAttributes","reason","closeCallOnError","agentStatus","VendorConnector","config","statusInfo","enqueueNextState","logMessageToVendor","digits","call1","call2","isBlindTransfer","message","recordingUrl","vendorCallKey","payload","supervisedCallInfo","enumValues","RegExp","test","className","AgentStatusInfo","_ref21","statusId","statusApiName","statusName","AgentVendorStatusInfo","_ref22","statusType","StateChangeResult","_ref23","newVendorStateInfo","oldVendorStateInfo","SupervisedCallInfo","_ref24","from","to","supervisorName","isBargedIn","AudioStats","_ref25","stats","isAudioStatsCompleted","audioStatsElement","AudioStatsElement","_ref26","inputChannelStats","outputChannelStats","StatsInfo","_ref27","packetsCount","packetsLost","jitterBufferMillis","roundTripTimeMillis","statsCount","SuperviseCallResult","_ref28","SupervisorHangupResult","_HangupResult","_inherits","_super","_createSuper","_ref29","getMOSByStream","streamType","avgStats","getAvgStats","effectiveLatency","R","enableMos","getMOS","inputChannelMOS","ouputChannelMOS","Math","min","initAudioStats","updateAudioStats","statsArray","getErrorType","e","getErrorMessage","dispatchEventLog","eventType","isError","sanitizedPayload","sanitizePayload","isArray","element","postMessage","dispatchEvent","registerLog","telephonyEventType","telephonyEventPayload","dispatchError","errorType","console","dispatchInfo","setConnectorReady","_setConnectorReady","_asyncToGenerator","_callee","_agentConfig","_capabilities","agentConfigResult","capabilitiesResult","activeCallsResult","_context","getAgentConfig","getCapabilities","getActiveCalls","agentConfig","_defineProperty","capabilities","callInProgress","t0","channelMessageHandler","_x","_channelMessageHandler","_callee2","hangupPayload","_payload","_call","_payload2","_payload3","_payload4","_payload5","_payload6","_payload7","_payload8","_payload9","_call2","_payload10","_payload11","_payload12","_payload13","_payload14","_payload15","_payload16","_success","_activeCallsResult","_activeCalls","_call3","shouldReplay","isSupervisorCall","_message$data","_callId","_result","signedRecordingUrlResult","_message$data2","_payload17","_result2","_result3","_result4","_context2","toLowerCase","supervisorDisconnect","acceptCall","t1","messagetype","additionalInfo","declineCall","t2","endCall","t3","mute","publishEvent","t4","unmute","t5","hold","t6","t7","resume","t8","t9","setAgentStatus","t10","t11","getAgentStatus","t12","dial","t13","t14","sendDigits","t15","getPhoneContacts","filter","map","t16","swap","callToHold","callToResume","t17","conference","t18","addParticipant","t19","t20","pauseRecording","t21","resumeRecording","t22","logout","t23","handleMessage","wrapUpCall","isAvailable","t24","t25","isReplayedCall","t26","setAgentConfig","t27","getSignedRecordingUrl","t28","superviseCall","t29","t30","supervisorBargeIn","t31","windowMessageHandler","_x2","_windowMessageHandler","_callee3","sfDomain","originUrl","_context3","origin","protocol","hostname","ports","onmessage","exposedConnectorConfig","connectorConfig","init","window","removeEventListener","prop","startsWith","includes","validatePayload","payloadType","initializeConnector","connector","addEventListener","publishLog","publishError","_x3","_publishEvent","_callee4","_ref3$registerLog","_initialCallHasEnded","_callInfo","_phoneNumber","_callId2","transferCall","_isThirdPartyOnHold","_isCustomerOnHold","_calls","_isThirdPartyOnHold2","_isCustomerOnHold2","_callId3","mos","_context4","REMOTE_CONTROLLER"],"mappings":"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","file":"scv-connector-base.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SCVConnectorBase\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SCVConnectorBase\"] = factory();\n\telse\n\t\troot[\"SCVConnectorBase\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nmodule.exports = _createClass, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nmodule.exports = _classCallCheck, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var toPropertyKey = require(\"./toPropertyKey.js\");\nfunction _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return (module.exports = _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports), _typeof(obj);\n}\nmodule.exports = _typeof, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","// TODO(Babel 8): Remove this file.\n\nvar runtime = require(\"../helpers/regeneratorRuntime\")();\nmodule.exports = runtime;\n\n// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _getPrototypeOf(o);\n}\nmodule.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar toPrimitive = require(\"./toPrimitive.js\");\nfunction _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nmodule.exports = _toPropertyKey, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var setPrototypeOf = require(\"./setPrototypeOf.js\");\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\nmodule.exports = _inherits, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nvar assertThisInitialized = require(\"./assertThisInitialized.js\");\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}\nmodule.exports = _possibleConstructorReturn, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nmodule.exports = _toPrimitive, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var _typeof = require(\"./typeof.js\")[\"default\"];\nfunction _regeneratorRuntime() {\n  \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */\n  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {\n    return exports;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  var exports = {},\n    Op = Object.prototype,\n    hasOwn = Op.hasOwnProperty,\n    defineProperty = Object.defineProperty || function (obj, key, desc) {\n      obj[key] = desc.value;\n    },\n    $Symbol = \"function\" == typeof Symbol ? Symbol : {},\n    iteratorSymbol = $Symbol.iterator || \"@@iterator\",\n    asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\",\n    toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n  function define(obj, key, value) {\n    return Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: !0,\n      configurable: !0,\n      writable: !0\n    }), obj[key];\n  }\n  try {\n    define({}, \"\");\n  } catch (err) {\n    define = function define(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,\n      generator = Object.create(protoGenerator.prototype),\n      context = new Context(tryLocsList || []);\n    return defineProperty(generator, \"_invoke\", {\n      value: makeInvokeMethod(innerFn, self, context)\n    }), generator;\n  }\n  function tryCatch(fn, obj, arg) {\n    try {\n      return {\n        type: \"normal\",\n        arg: fn.call(obj, arg)\n      };\n    } catch (err) {\n      return {\n        type: \"throw\",\n        arg: err\n      };\n    }\n  }\n  exports.wrap = wrap;\n  var ContinueSentinel = {};\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n  var getProto = Object.getPrototypeOf,\n    NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);\n  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function (method) {\n      define(prototype, method, function (arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (\"throw\" !== record.type) {\n        var result = record.arg,\n          value = result.value;\n        return value && \"object\" == _typeof(value) && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) {\n          invoke(\"next\", value, resolve, reject);\n        }, function (err) {\n          invoke(\"throw\", err, resolve, reject);\n        }) : PromiseImpl.resolve(value).then(function (unwrapped) {\n          result.value = unwrapped, resolve(result);\n        }, function (error) {\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n      reject(record.arg);\n    }\n    var previousPromise;\n    defineProperty(this, \"_invoke\", {\n      value: function value(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      }\n    });\n  }\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = \"suspendedStart\";\n    return function (method, arg) {\n      if (\"executing\" === state) throw new Error(\"Generator is already running\");\n      if (\"completed\" === state) {\n        if (\"throw\" === method) throw arg;\n        return doneResult();\n      }\n      for (context.method = method, context.arg = arg;;) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n        if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) {\n          if (\"suspendedStart\" === state) throw state = \"completed\", context.arg;\n          context.dispatchException(context.arg);\n        } else \"return\" === context.method && context.abrupt(\"return\", context.arg);\n        state = \"executing\";\n        var record = tryCatch(innerFn, self, context);\n        if (\"normal\" === record.type) {\n          if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue;\n          return {\n            value: record.arg,\n            done: context.done\n          };\n        }\n        \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg);\n      }\n    };\n  }\n  function maybeInvokeDelegate(delegate, context) {\n    var methodName = context.method,\n      method = delegate.iterator[methodName];\n    if (undefined === method) return context.delegate = null, \"throw\" === methodName && delegate.iterator[\"return\"] && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method) || \"return\" !== methodName && (context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a '\" + methodName + \"' method\")), ContinueSentinel;\n    var record = tryCatch(method, delegate.iterator, context.arg);\n    if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel;\n    var info = record.arg;\n    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel);\n  }\n  function pushTryEntry(locs) {\n    var entry = {\n      tryLoc: locs[0]\n    };\n    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);\n  }\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\", delete record.arg, entry.completion = record;\n  }\n  function Context(tryLocsList) {\n    this.tryEntries = [{\n      tryLoc: \"root\"\n    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);\n  }\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) return iteratorMethod.call(iterable);\n      if (\"function\" == typeof iterable.next) return iterable;\n      if (!isNaN(iterable.length)) {\n        var i = -1,\n          next = function next() {\n            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;\n            return next.value = undefined, next.done = !0, next;\n          };\n        return next.next = next;\n      }\n    }\n    return {\n      next: doneResult\n    };\n  }\n  function doneResult() {\n    return {\n      value: undefined,\n      done: !0\n    };\n  }\n  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, \"constructor\", {\n    value: GeneratorFunctionPrototype,\n    configurable: !0\n  }), defineProperty(GeneratorFunctionPrototype, \"constructor\", {\n    value: GeneratorFunction,\n    configurable: !0\n  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) {\n    var ctor = \"function\" == typeof genFun && genFun.constructor;\n    return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name));\n  }, exports.mark = function (genFun) {\n    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun;\n  }, exports.awrap = function (arg) {\n    return {\n      __await: arg\n    };\n  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    void 0 === PromiseImpl && (PromiseImpl = Promise);\n    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {\n      return result.done ? result.value : iter.next();\n    });\n  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () {\n    return this;\n  }), define(Gp, \"toString\", function () {\n    return \"[object Generator]\";\n  }), exports.keys = function (val) {\n    var object = Object(val),\n      keys = [];\n    for (var key in object) keys.push(key);\n    return keys.reverse(), function next() {\n      for (; keys.length;) {\n        var key = keys.pop();\n        if (key in object) return next.value = key, next.done = !1, next;\n      }\n      return next.done = !0, next;\n    };\n  }, exports.values = values, Context.prototype = {\n    constructor: Context,\n    reset: function reset(skipTempReset) {\n      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);\n    },\n    stop: function stop() {\n      this.done = !0;\n      var rootRecord = this.tryEntries[0].completion;\n      if (\"throw\" === rootRecord.type) throw rootRecord.arg;\n      return this.rval;\n    },\n    dispatchException: function dispatchException(exception) {\n      if (this.done) throw exception;\n      var context = this;\n      function handle(loc, caught) {\n        return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught;\n      }\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i],\n          record = entry.completion;\n        if (\"root\" === entry.tryLoc) return handle(\"end\");\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\"),\n            hasFinally = hasOwn.call(entry, \"finallyLoc\");\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);\n          } else {\n            if (!hasFinally) throw new Error(\"try statement without catch or finally\");\n            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);\n          }\n        }\n      }\n    },\n    abrupt: function abrupt(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n      finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);\n      var record = finallyEntry ? finallyEntry.completion : {};\n      return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);\n    },\n    complete: function complete(record, afterLoc) {\n      if (\"throw\" === record.type) throw record.arg;\n      return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;\n    },\n    finish: function finish(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;\n      }\n    },\n    \"catch\": function _catch(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (\"throw\" === record.type) {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n      throw new Error(\"illegal catch attempt\");\n    },\n    delegateYield: function delegateYield(iterable, resultName, nextLoc) {\n      return this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel;\n    }\n  }, exports;\n}\nmodule.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  return _setPrototypeOf(o, p);\n}\nmodule.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nmodule.exports = _assertThisInitialized, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nexport default {\n    MESSAGE_TYPE: {\n        // Framework Message Types\n        SETUP_CONNECTOR: 'SETUP_CONNECTOR',\n        CONNECTOR_READY: 'CONNECTOR_READY',\n\n        // Telephony Message Types: sent from SFDC to Telephony Vendor\n        LOG: 'LOG',\n        TELEPHONY_EVENT_DISPATCHED: 'TELEPHONY_EVENT_DISPATCHED',\n        ACCEPT_CALL: 'ACCEPT_CALL',\n        DECLINE_CALL: 'DECLINE_CALL',\n        END_CALL: 'END_CALL',\n        MUTE: 'MUTE',\n        UNMUTE: 'UNMUTE',\n        HOLD: 'HOLD',\n        RESUME: 'RESUME',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        DIAL: 'DIAL',\n        SEND_DIGITS: 'SEND_DIGITS',\n        GET_PHONE_CONTACTS: 'GET_PHONE_CONTACTS',\n        SWAP_PARTICIPANTS: 'SWAP_PARTICIPANTS',\n        ADD_PARTICIPANT: 'ADD_PARTICIPANT',\n        CONFERENCE: 'CONFERENCE',\n        PAUSE_RECORDING: 'PAUSE_RECORDING',\n        RESUME_RECORDING: 'RESUME_RECORDING',\n        LOGOUT: 'LOGOUT',\n        MESSAGE: 'MESSAGE',\n        WRAP_UP_CALL: 'WRAP_UP_CALL',\n        AGENT_AVAILABLE: 'AGENT_AVAILABLE',\n        SET_AGENT_CONFIG: 'SET_AGENT_CONFIG',\n        GET_SIGNED_RECORDING_URL: 'GET_SIGNED_RECORDING_URL',\n        DOWNLOAD_VENDOR_LOGS: 'DOWNLOAD_VENDOR_LOGS',\n        SUPERVISE_CALL: 'SUPERVISE_CALL',\n        SUPERVISOR_BARGE_IN : 'SUPERVISOR_BARGE_IN',\n        SUPERVISOR_DISCONNECT: 'SUPERVISOR_DISCONNECT'\n    },\n    EVENT_TYPE: {\n        QUEUED_CALL_STARTED: 'QUEUED_CALL_STARTED',\n        CALL_STARTED: 'CALL_STARTED',\n        CALL_CONNECTED: 'CALL_CONNECTED',\n        CALL_FAILED: 'CALL_FAILED',\n        MUTE_TOGGLE: 'MUTE_TOGGLE',\n        HOLD_TOGGLE: 'HOLD_TOGGLE',\n        HANGUP: 'HANGUP',\n        ERROR: 'ERROR',\n        WARNING: 'WARNING',\n        INFO: 'INFO',\n        PHONE_CONTACTS: 'PHONE_CONTACTS',\n        PARTICIPANT_ADDED: 'PARTICIPANT_ADDED',\n        PARTICIPANT_CONNECTED: 'PARTICIPANT_CONNECTED',\n        PARTICIPANT_REMOVED: 'PARTICIPANT_REMOVED',\n        LOGIN_STARTED: 'LOGIN_STARTED',\n        LOGIN_RESULT: 'LOGIN_RESULT', // info about timeout, error, success etc\n        LOGOUT_RESULT: 'LOGOUT_RESULT',\n        RECORDING_TOGGLE: 'RECORDING_TOGGLE',\n        PARTICIPANTS_SWAPPED: 'PARTICIPANTS_SWAPPED',\n        PARTICIPANTS_CONFERENCED: 'PARTICIPANTS_CONFERENCED',\n        SHOW_LOGIN: 'SHOW_LOGIN',\n        SET_AGENT_STATUS_RESULT: 'SET_AGENT_STATUS_RESULT',\n        GET_AGENT_STATUS_RESULT: 'GET_AGENT_STATUS_RESULT',\n        WRAP_UP_ENDED: 'WRAP_UP_ENDED',\n        MESSAGE: 'MESSAGE',\n        AFTER_CALL_WORK_STARTED: 'AFTER_CALL_WORK_STARTED',\n        AGENT_CONFIG_UPDATED: 'AGENT_CONFIG_UPDATED',\n        AGENT_ERROR: 'AGENT_ERROR',\n        SOFTPHONE_ERROR: 'SOFTPHONE_ERROR',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        UPDATE_AUDIO_STATS: 'UPDATE_AUDIO_STATS',\n        UPDATE_AUDIO_STATS_COMPLETED: 'UPDATE_AUDIO_STATS_COMPLETED',\n        SUPERVISOR_BARGED_IN: 'SUPERVISOR_BARGED_IN',\n        SUPERVISOR_CALL_STARTED : 'SUPERVISOR_CALL_STARTED',\n        SUPERVISOR_CALL_CONNECTED: 'SUPERVISOR_CALL_CONNECTED',\n        SUPERVISOR_HANGUP : 'SUPERVISOR_HANGUP',\n        CALL_BARGED_IN : 'CALL_BARGED_IN',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        STATE_CHANGE: 'STATE_CHANGE'\n    },\n    INFO_TYPE: {\n        CAN_NOT_ACCEPT_THE_CALL: 'CAN_NOT_ACCEPT_THE_CALL'\n    },\n    ERROR_TYPE: {\n        GENERIC_ERROR: 'GENERIC_ERROR',\n        AGENT_ERROR: 'AGENT_ERROR',\n        MICROPHONE_NOT_SHARED: 'MICROPHONE_NOT_SHARED',\n        UNSUPPORTED_BROWSER: 'UNSUPPORTED_BROWSER',\n        AUTHENTICATION_ERROR: 'AUTHENTICATION_ERROR',\n        INVALID_AGENT_STATUS: 'INVALID_AGENT_STATUS',\n        CAN_NOT_SET_AGENT_STATUS: 'CAN_NOT_SET_AGENT_STATUS',\n        LOGIN_REQUIRED: 'LOGIN_REQUIRED',\n        CAN_NOT_DECLINE_THE_CALL: 'CAN_NOT_DECLINE_THE_CALL',\n        CAN_NOT_END_THE_CALL: 'CAN_NOT_END_THE_CALL',\n        CAN_NOT_HOLD_CALL: 'CAN_NOT_HOLD_CALL',\n        CAN_NOT_RESUME_CALL: 'CAN_NOT_RESUME_CALL',\n        CAN_NOT_MUTE_CALL: 'CAN_NOT_MUTE_CALL',\n        CAN_NOT_UNMUTE_CALL: 'CAN_NOT_UNMUTE_CALL',\n        CAN_NOT_TOGGLE_MUTE: 'CAN_NOT_TOGGLE_MUTE',\n        CAN_NOT_TOGGLE_HOLD: 'CAN_NOT_TOGGLE_HOLD',\n        CAN_NOT_TOGGLE_RECORD: 'CAN_NOT_TOGGLE_RECORD',\n        INVALID_PARTICIPANT: 'INVALID_PARTICIPANT',\n        CAN_NOT_LOG_IN: 'CAN_NOT_LOG_IN',\n        CAN_NOT_LOG_OUT: 'CAN_NOT_LOG_OUT',\n        INVALID_PARAMS: 'INVALID_PARAMS',\n        CAN_NOT_GET_PHONE_CONTACTS: 'CAN_NOT_GET_PHONE_CONTACTS',\n        CAN_NOT_SWAP_PARTICIPANTS: 'CAN_NOT_SWAP_PARTICIPANTS',\n        CAN_NOT_CONFERENCE: 'CAN_NOT_CONFERENCE',\n        INVALID_DESTINATION: 'INVALID_DESTINATION',\n        INVALID_PHONE_NUMBER: 'INVALID_PHONE_NUMBER',\n        CAN_NOT_HANGUP_PARTICIPANT: 'CAN_NOT_HANGUP_PARTICIPANT',\n        CAN_NOT_ADD_PARTICIPANT: 'CAN_NOT_ADD_PARTICIPANT',\n        CAN_NOT_CONNECT_PARTICIPANT: 'CAN_NOT_CONNECT_PARTICIPANT',\n        CAN_NOT_START_THE_CALL: 'CAN_NOT_START_THE_CALL',\n        CAN_NOT_PAUSE_RECORDING: 'CAN_NOT_PAUSE_RECORDING',\n        CAN_NOT_RESUME_RECORDING: 'CAN_NOT_RESUME_RECORDING',\n        CAN_NOT_SET_AGENT_CONFIG: 'CAN_NOT_SET_AGENT_CONFIG',\n        CAN_NOT_SET_CAPABILITIES: 'CAN_NOT_SET_CAPABILITIES',\n        CAN_NOT_UPDATE_PHONE_NUMBER: 'CAN_NOT_UPDATE_PHONE_NUMBER',\n        CAN_NOT_GET_SIGNED_RECORDING_URL: 'CAN_NOT_GET_SIGNED_RECORDING_URL',\n        CAN_NOT_SUPERVISE_CALL : 'CAN_NOT_SUPERVISE_CALL',\n        CAN_NOT_DISCONNECT_SUPERVISOR : 'CAN_NOT_DISCONNECT_SUPERVISOR',\n        CAN_NOT_BARGE_IN_SUPERVISOR: 'CAN_NOT_BARGE_IN_SUPERVISOR',\n        CAN_NOT_BARGE_IN_CALL: 'CAN_NOT_BARGE_IN_CALL',\n        CAN_NOT_GET_AGENT_STATUS: 'CAN_NOT_GET_AGENT_STATUS',\n        INVALID_STATE_CHANGE_RESULT: 'INVALID_STATE_CHANGE_RESULT'\n    },\n    AGENT_STATUS: {\n        ONLINE: 'Online',\n        OFFLINE: 'Offline',\n        ACW : 'AfterCallWork',\n        CALLBACK_MISSED_OR_REJECTED: 'CallbackMissedOrRejected' // Used only for Amazon; workaround for https://github.com/amazon-connect/amazon-connect-streams/issues/344\n    },\n    PARTICIPANT_TYPE: {\n        AGENT: 'Agent',\n        INITIAL_CALLER: 'Initial_Caller',\n        THIRD_PARTY: 'Third_Party',\n        SUPERVISOR: 'Supervisor'\n    },\n    CALL_TYPE: {\n        INBOUND: 'Inbound',\n        OUTBOUND: 'Outbound',\n        CALLBACK: 'Callback',\n        ADD_PARTICIPANT: 'AddParticipant',\n        TRANSFER:'Transfer'\n    },\n    DIALER_TYPE: {\n        OUTBOUND_PREVIEW: 'OutboundPreview',\n        NONE: 'None'\n    },\n    CONTACT_TYPE: {\n        PHONEBOOK: 'PhoneBook',\n        QUEUE: 'Queue',\n        PHONENUMBER: 'PhoneNumber',\n        AGENT: 'Agent',\n        FLOW: 'Flow'\n    },\n    AGENT_CONFIG_TYPE: {\n        SHOW_AGENT_SETTINGS: 'SHOW_AGENT_SETTINGS',\n        PHONES: 'PHONES',\n        SELECTED_PHONE: 'SELECTED_PHONE'\n    },\n    CAPABILITIES_TYPE: {\n        MUTE: 'MUTE',\n        RECORD: 'RECORD',\n        MERGE: 'MERGE',\n        SWAP: 'SWAP',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        DEBUG_ENABLED: 'DEBUG_ENABLED',\n        CONTACT_SEARCH: 'CONTACT_SEARCH',\n        VENDOR_PROVIDED_AVAILABILITY: 'VENDOR_PROVIDED_AVAILABILITY',\n        VENDOR_PROVIDED_QUEUE_WAIT_TIME: 'VENDOR_PROVIDED_QUEUE_WAIT_TIME',\n        SUPERVISOR_LISTEN_IN: 'SUPERVISOR_LISTEN_IN',\n        SUPERVISOR_BARGE_IN: 'SUPERVISOR_BARGE_IN',\n        MOS: 'MOS',\n        BLIND_TRANSFER: 'BLIND_TRANSFER',\n        TRANSFER_TO_OMNI_FLOW: 'TRANSFER_TO_OMNI_FLOW',\n        PENDING_STATUS_CHANGE: 'PENDING_STATUS_CHANGE'\n    },\n    CALL_STATE: {\n        RINGING: 'ringing',\n        CONNECTED: 'connected',\n        TRANSFERRING: 'transferring',\n        TRANSFERRED: 'transferred',\n        ENDED: 'ended'\n    },\n    PHONE_TYPE: {\n        DESK_PHONE: 'DESK_PHONE',\n        SOFT_PHONE: 'SOFT_PHONE'\n    },\n    HANGUP_REASON: {\n        PHONE_CALL_ERROR: \"error\",\n        PHONE_CALL_ENDED: \"ended\"\n    },\n    AGENT_AVAILABILITY: {\n        AVAILABLE: \"AVAILABLE\",\n        BUSY: \"BUSY\",\n        OFFLINE: \"OFFLINE\"\n    },\n    REMOVE_PARTICIPANT_VARIANT: {\n        ALWAYS : 'ALWAYS',\n        NEVER: 'NEVER',\n        ALWAYS_EXCEPT_ON_HOLD: 'ALWAYS_EXCEPT_ON_HOLD'\n    },\n    LOG_LEVEL: {\n        ERROR: \"ERROR\",\n        INFO: \"INFO\"\n    },\n    LOG_SOURCE: {\n        SYSTEM: \"SYSTEM\",\n        PARTNER: \"PARTNER\"\n    },\n    CONTACTS_FILTER_TYPES: {\n        \"AGENT\": \"AGENT\",\n        \"QUEUE\": \"QUEUE\",\n        \"CONTACT\": \"CONTACT\",\n        \"DIRECTORY\": \"DIRECTORY\",\n        \"FLOW\": \"FLOW\",\n        \"AVAILABLE\": \"AVAILABLE\"\n    }\n};\n\n/**\n * Fields in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS = [\n    \"/internalNameLabel\",\n    \"/reqGeneralInfo/reqAdapterUrl\",\n    \"/reqGeneralInfo/reqVendorInfoApiName\",\n    \"isACWAllowed\",\n    \"isHVSEnabled\",\n    \"orgDomainName\",\n    \"phoneServiceChannelId\",\n    \"telephonySettingsComponentFqn\"\n];\n\n/**\n * Fields that starts with string in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH = [\n    \"/reqHvcc\"\n];\n\n/**\n * Fields in the connector configuration that are NOT logged. \n */\nexport const CONNECTOR_CONFIG_EXCEPTION_FIELDS = [\n    \"/reqHvcc/reqTelephonyIntegrationCertificate\"\n];\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { downloadData } from './downloadData.js';\nimport constants from './constants';\n\n//The max size of the logs in # of characaters\nconst MAX_LOGS_SIZE = 1.5e7/2; //15 MB or 7.5M characters\n\nconst _strify = obj => (typeof obj === 'string') ? obj : JSON.stringify(obj);\n\nlet LOGS_SIZE = 0;\nlet logs = [];\n\nfunction _log(logLevel, logMessage, logSource) {\n    if(!logMessage) {\n        throw new Error(\"Log Message required\");\n    }\n    logLevel  = logLevel  || constants.LOG_LEVEL.INFO;\n    logSource = logSource || constants.LOG_SOURCE.PARTNER;\n\n    const logStr = [new Date().toISOString(), _strify(logLevel), _strify(logSource), `${_strify(logMessage)}\\n`].join(\"|\");\n    \n    //If logs size is greater than max size, empty it.\n    if(LOGS_SIZE + logStr.length >= MAX_LOGS_SIZE) {\n        logs = []; \n        LOGS_SIZE = 0;\n    }\n    LOGS_SIZE += logStr.length;\n    logs.push(logStr);\n}\n\n/**\n * Log a message at a custom level.\n * @param {object} logMessage\n * @param {string} logLevel \n * @param {string} [logSource]\n */\nexport function log(logMessage, logLevel, logSource) {\n    _log(logLevel, logMessage, logSource);\n}\n\n/**\n * \n * @returns a deep copy of the logs array\n */\nexport function getLogs() {\n    return JSON.parse(JSON.stringify(logs));\n}\n\n/**\n * Download the logs as a file\n */\nexport function downloadLogs() {\n    downloadData(logs.join(''), `log-${new Date().getTime()}.txt`, 'text/plain');\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * Download data as a file.\n * @param {object} data \n * @param {string} fileName \n * @param {string} fileType\n */\n export function downloadData(data, fileName, fileType) {\n    if(!document || !data) return;\n    \n    const dataStr = (typeof data === 'string') ? data : JSON.stringify(data);\n    const file = new Blob([dataStr], {type: fileType});\n    let a = document.createElement(\"a\") \n    const blobURL = URL.createObjectURL(file);\n    a.download = fileName;\n    a.href = blobURL;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(blobURL);\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { downloadLogs } from './logger.js';\n\nexport const Constants = {\n    EVENT_TYPE: {\n        LOGIN_RESULT: constants.EVENT_TYPE.LOGIN_RESULT,\n        LOGOUT_RESULT: constants.EVENT_TYPE.LOGOUT_RESULT,\n        CALL_STARTED: constants.EVENT_TYPE.CALL_STARTED,\n        QUEUED_CALL_STARTED: constants.EVENT_TYPE.QUEUED_CALL_STARTED,\n        CALL_CONNECTED: constants.EVENT_TYPE.CALL_CONNECTED,\n        HANGUP: constants.EVENT_TYPE.HANGUP,\n        MUTE_TOGGLE: constants.EVENT_TYPE.MUTE_TOGGLE,\n        HOLD_TOGGLE: constants.EVENT_TYPE.HOLD_TOGGLE,\n        RECORDING_TOGGLE: constants.EVENT_TYPE.RECORDING_TOGGLE,\n        PARTICIPANTS_SWAPPED: constants.EVENT_TYPE.PARTICIPANTS_SWAPPED,\n        PARTICIPANTS_CONFERENCED: constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED,\n        PARTICIPANT_ADDED: constants.EVENT_TYPE.PARTICIPANT_ADDED, \n        PARTICIPANT_CONNECTED: constants.EVENT_TYPE.PARTICIPANT_CONNECTED,\n        PARTICIPANT_REMOVED: constants.EVENT_TYPE.PARTICIPANT_REMOVED,\n        MESSAGE: constants.EVENT_TYPE.MESSAGE,\n        AFTER_CALL_WORK_STARTED: constants.EVENT_TYPE.AFTER_CALL_WORK_STARTED,\n        WRAP_UP_ENDED: constants.EVENT_TYPE.WRAP_UP_ENDED,\n        AGENT_ERROR: constants.EVENT_TYPE.AGENT_ERROR,\n        SOFTPHONE_ERROR: constants.EVENT_TYPE.SOFTPHONE_ERROR,\n        UPDATE_AUDIO_STATS: constants.EVENT_TYPE.UPDATE_AUDIO_STATS,\n        SUPERVISOR_BARGED_IN: constants.EVENT_TYPE.SUPERVISOR_BARGED_IN,\n        SUPERVISOR_CALL_STARTED : constants.EVENT_TYPE.SUPERVISOR_CALL_STARTED,\n        SUPERVISOR_CALL_CONNECTED: constants.EVENT_TYPE.SUPERVISOR_CALL_CONNECTED,\n        SUPERVISOR_HANGUP : constants.EVENT_TYPE.SUPERVISOR_HANGUP,\n        SET_AGENT_STATUS: constants.EVENT_TYPE.SET_AGENT_STATUS,\n        GET_AGENT_STATUS: constants.EVENT_TYPE.GET_AGENT_STATUS,\n        STATE_CHANGE: constants.EVENT_TYPE.STATE_CHANGE\n    },\n    /**\n    * @enum {string}\n    */\n    ERROR_TYPE: {\n        GENERIC_ERROR: constants.ERROR_TYPE.GENERIC_ERROR,\n        INVALID_PARTICIPANT: constants.ERROR_TYPE.INVALID_PARTICIPANT,\n        INVALID_DESTINATION: constants.ERROR_TYPE.INVALID_DESTINATION,\n        INVALID_PARAMS: constants.ERROR_TYPE.INVALID_PARAMS,\n        INVALID_AGENT_STATUS: constants.ERROR_TYPE.INVALID_AGENT_STATUS,\n        CAN_NOT_UPDATE_PHONE_NUMBER: constants.ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER\n    },\n    /**\n    * @enum {string}\n    */\n    AGENT_STATUS: { ...constants.AGENT_STATUS },\n    /**\n    * @enum {string}\n    */\n    PARTICIPANT_TYPE: { ...constants.PARTICIPANT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_TYPE: { ...constants.CALL_TYPE },\n    /**\n    * @enum {string}\n    */\n    DIALER_TYPE: { ...constants.DIALER_TYPE },\n    /**\n    * @enum {string}\n    */\n    CONTACT_TYPE: { ...constants.CONTACT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_STATE: { ...constants.CALL_STATE },\n    /**\n    * @enum {string}\n    */\n    HANGUP_REASON: { ...constants.HANGUP_REASON },\n    /**\n    * @enum {string}\n    */\n    PHONE_TYPE: { ...constants.PHONE_TYPE },\n    /**\n     * @enum {String}\n     */\n    AGENT_AVAILABILITY: { ...constants.AGENT_AVAILABILITY },\n    /**\n     * @enum (String)\n     */\n     REMOVE_PARTICIPANT_VARIANT: { ...constants.REMOVE_PARTICIPANT_VARIANT },\n    /**\n     * @enum {String}\n     */\n    LOG_LEVEL: { ...constants.LOG_LEVEL },\n    /**\n     * @enum {String}\n     */\n    CONTACTS_FILTER_TYPES: { ...constants.CONTACTS_FILTER_TYPES }\n};\n\n/**\n * Class representing a Phone type\n */\n export class Phone {\n    /**\n     * Create Phone\n     * @param {object} param\n     * @param {PHONE_TYPE} param.type\n     * @param {string} [param.number]\n     */\n    constructor({ type, number}) {\n        Validator.validateEnum(type, Object.values(constants.PHONE_TYPE));\n        if(number) {\n            Validator.validateString(number);\n        }\n        this.type = type;\n        this.number = number;\n    }\n}\n\n/**\n * Class representing result type for mute() & unmute()\n */\nexport class MuteToggleResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {boolean} param.isMuted\n     */\n    constructor({ isMuted }) {\n        this.isMuted = isMuted;\n    }\n}\n\n/**\n * Class representing result type for getActiveCalls()\n */\nexport class ActiveCallsResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {PhoneCall[]} [param.activeCalls]\n     */\n    constructor({ activeCalls = [] }) {\n        if (activeCalls.length > 0) {\n            activeCalls.forEach(activeCall => {\n                Validator.validateClassObject(activeCall, PhoneCall);\n            });\n        }\n        this.activeCalls = activeCalls;\n    }\n}\n\n/**\n * Class representing result type for getCapabilities()\n */\nexport class CapabilitiesResult {\n    /**\n     * Create CapabilitiesResult\n     * @param {object} param\n     * @param {boolean} [param.hasMute]\n     * @param {boolean} [param.hasRecord]\n     * @param {boolean} [param.hasMerge]\n     * @param {boolean} [param.hasSwap]\n     * @param {boolean} [param.hasSignedRecordingUrl]\n     * @param {boolean} [param.debugEnabled]\n     * @param {boolean} [param.hasContactSearch] True if getPhoneContacts uses the 'contain' filter\n     * @param {boolean} [param.hasAgentAvailability] True if getPhoneContacts also provides agent availability, false if Salesforce provides it.\n     * @param {boolean} [param.hasQueueWaitTime] True if getPhoneContacts also provides estimated queue wait time, false if Salesforce provides it.\n     * @param {boolean} [param.supportsMos] True if vendor support MOS\n     * @param {boolean} [param.hasSupervisorListenIn] True if vendor supports supervisor listening  to a ongoing call\n     * @param {boolean} [param.hasSupervisorBargeIn] True if vendor supports Supervisor  barging into a ongoing call\n     * @param {boolean} [param.hasBlindTransfer] True if vendor supports blind transfers\n     * @param {boolean} [param.hasTransferToOmniFlow] True if vendor supports transfer to omni flows\n     * @param {boolean} [param.hasPendingStatusChange] True if vendor supports Pending Status Change\n     */\n     constructor({ hasMute = true, hasRecord = true, hasMerge = true, hasSwap = true, hasSignedRecordingUrl = false, debugEnabled = true, hasContactSearch = false, hasAgentAvailability = false, hasQueueWaitTime = false, supportsMos = false, hasSupervisorListenIn = false, hasSupervisorBargeIn = false, hasBlindTransfer = false, hasTransferToOmniFlow = false, hasPendingStatusChange=false }) {\n        Validator.validateBoolean(hasMute);\n        Validator.validateBoolean(hasRecord);\n        Validator.validateBoolean(hasMerge);\n        Validator.validateBoolean(hasSwap);\n        Validator.validateBoolean(hasSignedRecordingUrl);\n        Validator.validateBoolean(debugEnabled);\n        Validator.validateBoolean(hasContactSearch);\n        Validator.validateBoolean(hasAgentAvailability);\n        Validator.validateBoolean(hasQueueWaitTime);\n        Validator.validateBoolean(supportsMos);\n        Validator.validateBoolean(hasSupervisorListenIn);\n        Validator.validateBoolean(hasSupervisorBargeIn);\n        Validator.validateBoolean(hasBlindTransfer);\n        Validator.validateBoolean(hasTransferToOmniFlow);\n        Validator.validateBoolean(hasPendingStatusChange);\n\n        this.hasMute = hasMute;\n        this.hasRecord = hasRecord;\n        this.hasMerge = hasMerge;\n        this.hasSwap = hasSwap;\n        this.hasSignedRecordingUrl = hasSignedRecordingUrl;\n        this.debugEnabled = debugEnabled;\n        this.hasContactSearch = hasContactSearch;\n        this.hasAgentAvailability = hasAgentAvailability;\n        this.supportsMos = supportsMos;\n        this.hasSupervisorListenIn = hasSupervisorListenIn;\n        this.hasSupervisorBargeIn = hasSupervisorBargeIn;\n        this.hasBlindTransfer = hasBlindTransfer;\n        this.hasTransferToOmniFlow = hasTransferToOmniFlow;\n        this.hasPendingStatusChange = hasPendingStatusChange;\n    }\n}\n\n/**\n * Class representing result type for getAgentConfig()\n */\nexport class AgentConfigResult {\n    /**\n     * Create AgentConfigResult\n     * @param {object} param\n     * @param {Phone[]} [param.phones]\n     * @param {Phone} [param.selectedPhone]\n     */\n    constructor({ phones = [constants.PHONE_TYPE.SOFT_PHONE], selectedPhone = new Phone({type: constants.PHONE_TYPE.SOFT_PHONE}) }) {\n        Validator.validateClassObject(phones, Array);\n        Validator.validateClassObject(selectedPhone, Phone);\n\n        this.phones = phones;\n        this.selectedPhone = selectedPhone;\n    }\n}\n\n/**\n * Class representing AgentConfig type for setAgentConfig()\n */\nexport class AgentConfig {\n    /**\n     * Create AgentConfig\n     * @param {object} param\n     * @param {Phone} [param.selectedPhone]\n     */\n    constructor({ selectedPhone }) {\n        Validator.validateClassObject(selectedPhone, Phone);\n        this.selectedPhone = selectedPhone;\n    }\n}\n\n/**\n * Class representing result type for pauseRecording() & resumeRecording\n */\nexport class RecordingToggleResult {\n    /**\n     * Create RecordingToggleResult\n     * @param {object} param\n     * @param {boolean} param.isRecordingPaused\n     * @param {string} [param.contactId]\n     * @param {string} [param.initialContactId]\n     * @param {string} [param.instanceId]\n     * @param {string} [param.region]\n     */\n    constructor({ isRecordingPaused, contactId = null, initialContactId = null, instanceId = null, region = null }) {\n        this.isRecordingPaused = isRecordingPaused;\n        this.contactId = contactId;\n        this.initialContactId = initialContactId;\n        this.instanceId = instanceId;\n        this.region = region;\n    }\n}\n\n/**\n * Class representing result type for addParticipant()\n */\nexport class ParticipantResult {\n    /**\n     * Create ParticipantResult\n     * @param {object} param\n     * @param {boolean} param.initialCallHasEnded\n     * @param {CallInfo} param.callInfo\n     * @param {string} param.phoneNumber\n     * @param {string} param.callId\n     */\n    constructor({ initialCallHasEnded, callInfo, phoneNumber, callId }) {\n        Validator.validateClassObject(callInfo, CallInfo);\n        this.initialCallHasEnded = initialCallHasEnded;\n        this.callInfo = callInfo;\n        this.phoneNumber = phoneNumber;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for getPhoneContacts()\n */\nexport class PhoneContactsResult {\n    /**\n     * Create PhoneContactsResult\n     * @param {object} param\n     * @param {Contact[]} [param.contacts]\n     * @param {Array} [param.contactTypes]\n     */\n    constructor({ contacts = [], contactTypes = [] }) {\n        if (contacts.length > 0) {\n            contacts.forEach(contact => {\n                Validator.validateClassObject(contact, Contact);\n            });\n        }\n        if (contactTypes.length > 0) {\n            contactTypes.forEach(filterType => {\n                Validator.validateEnum(filterType, Object.values(constants.CONTACT_TYPE));\n            });\n        }\n        this.contacts = contacts;\n        this.contactTypes = contactTypes;\n    }\n}\n\n/**\n * Class representing result type for accept(), decline(), dial()\n */\nexport class CallResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall} [param.call]\n     */\n    constructor({ call }) {\n        if (call !== undefined) {\n            Validator.validateClassObject(call, PhoneCall);\n        }\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for endCall(), hangup()\n */\nexport class HangupResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls (can be multiple calls in case of agent endcall/hangup)\n     */\n    constructor({ calls }) {\n        if (calls instanceof Array) {\n            calls.forEach(call => Validator.validateClassObject(call, PhoneCall));\n            this.calls = calls;\n        } else {\n            Validator.validateClassObject(calls, PhoneCall);\n            this.calls = [calls];\n        }\n    }\n}\n\n/**\n * Class representing result type for hold() & resume()\n */\nexport class HoldToggleResult {\n    /**\n     * Create HoldToggleResult\n     * @param {object} param\n     * @param {boolean} param.isThirdPartyOnHold\n     * @param {boolean} param.isCustomerOnHold\n     * @param {PhoneCall[]} [param.calls]\n     */\n    constructor({ isThirdPartyOnHold, isCustomerOnHold, calls }) {\n        if (calls) {\n            Object.values(calls).forEach(call => {\n                Validator.validateClassObject(call, PhoneCall);\n            });\n            this.calls = calls;\n        }\n        this.isThirdPartyOnHold = isThirdPartyOnHold;\n        this.isCustomerOnHold = isCustomerOnHold;\n    }\n}\n\n/**\n * Class representing result type for getRecordingUrl\n */\n export class SignedRecordingUrlResult {\n    /**\n     * Create SignedRecordingUrlResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {string} [param.url]\n     * @param {number} [param.duration] in seconds\n     * @param {string} [param.callId] Salesforce callId of the voice call\n     */\n    constructor({ success, url, duration, callId }) {\n        if (success) {\n            // For a successfull result, url is required\n            Validator.validateString(url);\n            Validator.validateString(callId);\n            if (duration) {\n                Validator.validateNumber(duration);\n            }\n        }\n        this.success = success;\n        this.url = url;\n        this.duration = duration;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for init()\n */\nexport class InitResult {\n    /**\n     * Create InitResult\n     * @param {object} param\n     * @param {boolean} [param.showLogin]\n     * @param {number} [param.loginFrameHeight]\n     */\n    constructor({ showLogin = false, loginFrameHeight = 350 }) {\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class representing generic result type\n */\nexport class GenericResult {\n    /**\n     * Create GenericResult\n     * @param {object} param\n     * @param {boolean} param.success\n     */\n    constructor({ success }) {\n        this.success = success;\n    }\n}\n\n/**\n * Class representing logout result type\n */\n export class LogoutResult {\n    /**\n     * Create LogoutResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {number} [param.loginFrameHeight]\n     */\n    constructor({ success, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class representing callInfo class (call metadata)\n */\nexport class CallInfo {\n    /**\n     * Create CallInfo\n     * @param {object} param\n     * @param {boolean} param.isOnHold\n     * @param {boolean} param.isRecordingPaused\n     * @param {boolean} param.isMuted\n     * @param {string} [param.initialCallId]\n     * @param {Date} [param.callStateTimestamp]\n     * @param {boolean} [param.isSoftphoneCall] - is it a softphone call \n     * @param {boolean} [param.acceptEnabled]\n     * @param {boolean} [param.declineEnabled]\n     * @param {boolean} [param.muteEnabled]\n     * @param {boolean} [param.swapEnabled]\n     * @param {boolean} [param.conferenceEnabled]\n     * @param {boolean} [param.holdEnabled]\n     * @param {boolean} [param.recordEnabled]\n     * @param {boolean} [param.addCallerEnabled]\n     * @param {boolean} [param.extensionEnabled]\n     * @param {boolean} [param.isReplayable]\n     * @param {boolean} [param.isBargeable]\n     * @param {boolean} [param.isExternalTransfer]\n     * @param {boolean} [param.showMuteButton]\n     * @param {boolean} [param.showRecordButton]\n     * @param {boolean} [param.showAddCallerButton]\n     * @param {boolean} [param.showAddBlindTransferButton]\n     * @param {boolean} [param.showMergeButton]\n     * @param {boolean} [param.showSwapButton]\n     * @param {(\"ALWAYS\"|\"NEVER\"|\"ALWAYS_EXCEPT_ON_HOLD\")} [param.removeParticipantVariant] - The type of remove participant variant when in a transfer call. \n     */\n    constructor({ callStateTimestamp = null, isOnHold, isMuted = false, isRecordingPaused = false, initialCallId, isSoftphoneCall = true, \n        acceptEnabled = true, declineEnabled = true, muteEnabled = true, swapEnabled = true, conferenceEnabled = true, holdEnabled = true,\n        recordEnabled = true, addCallerEnabled = true, extensionEnabled = true, isReplayable = true, isBargeable = false, isExternalTransfer, \n        showMuteButton = true, showRecordButton = true, showAddCallerButton = true, showAddBlindTransferButton = true, showMergeButton = true,\n        showSwapButton = true, removeParticipantVariant = Constants.REMOVE_PARTICIPANT_VARIANT.ALWAYS }) {\n        if (callStateTimestamp) {\n            Validator.validateDate(callStateTimestamp);\n        }\n        Validator.validateBoolean(isRecordingPaused);\n        Validator.validateBoolean(isMuted);\n        Validator.validateBoolean(isSoftphoneCall);\n        Validator.validateBoolean(acceptEnabled);\n        Validator.validateBoolean(declineEnabled);\n        Validator.validateBoolean(muteEnabled);\n        Validator.validateBoolean(swapEnabled);\n        Validator.validateBoolean(conferenceEnabled);\n        Validator.validateBoolean(holdEnabled);\n        Validator.validateBoolean(recordEnabled);\n        Validator.validateBoolean(addCallerEnabled);\n        Validator.validateBoolean(extensionEnabled);\n        Validator.validateBoolean(isBargeable);\n        Validator.validateBoolean(showMuteButton);\n        Validator.validateBoolean(showRecordButton);\n        Validator.validateBoolean(showAddCallerButton);\n        Validator.validateBoolean(showAddBlindTransferButton);\n        Validator.validateBoolean(showMergeButton);\n        Validator.validateBoolean(showSwapButton);\n        if (isExternalTransfer !== undefined) {\n            Validator.validateBoolean(isExternalTransfer);\n        }\n        Validator.validateEnum(removeParticipantVariant, Object.values(constants.REMOVE_PARTICIPANT_VARIANT));\n        this.callStateTimestamp = callStateTimestamp;\n        this.isRecordingPaused = isRecordingPaused;\n        this.isMuted = isMuted;\n        this.isOnHold = isOnHold;\n        this.initialCallId = initialCallId;\n        this.isSoftphoneCall = isSoftphoneCall;\n        this.acceptEnabled = acceptEnabled;\n        this.declineEnabled = declineEnabled;\n        this.muteEnabled = muteEnabled;\n        this.swapEnabled = swapEnabled;\n        this.conferenceEnabled = conferenceEnabled;\n        this.holdEnabled = holdEnabled;\n        this.recordEnabled = recordEnabled;\n        this.addCallerEnabled = addCallerEnabled;\n        this.extensionEnabled = extensionEnabled;\n        this.isReplayable = isReplayable;\n        this.isBargeable = isBargeable;\n        this.isExternalTransfer = isExternalTransfer;\n        this.removeParticipantVariant = removeParticipantVariant;\n        this.showMuteButton = showMuteButton;\n        this.showRecordButton = showRecordButton;\n        this.showAddCallerButton = showAddCallerButton;\n        this.showAddBlindTransferButton = showAddBlindTransferButton;\n        this.showMergeButton = showMergeButton;\n        this.showSwapButton = showSwapButton;\n    }\n}\n\n/** \n * Class representing a Contact. This object is used to represent \n * phone system contact or any call target\n */\n\nexport class Contact {\n    /**\n     * Create a Contact.\n     * @param {object} param\n     * @param {string} [param.id] - The unique contactId\n     * @param {(\"PhoneBook\"|\"Queue\"|\"PhoneNumber\"|\"Agent\")} [param.type] - The type of the contact, one of the CONTACT_TYPE values\n     * @param {string} [param.name] - The label for this contact to be displayed in the UI\n     * @param {string} [param.phoneNumber] - The phone number associcated with this contact\n     * @param {string} [param.prefix] - Any prefix to be dialed before dialing the number (i.e. +1)\n     * @param {string} [param.extension] - Any extension to be dialed after dialing the number\n     * @param {string} [param.endpointARN]\n     * @param {string} [param.queue]\n     * @param {string} [param.availability]\n     * @param {string} [param.recordId] - Salesforce RecordId\n     * @param {string} [param.description] - Contact Description\n     * @param {string} [param.queueWaitTime] - Estimated Queue Wait Time \n     */\n    constructor({phoneNumber, id, type, name, prefix, extension, endpointARN, queue, availability, recordId, description, queueWaitTime}) {\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n        }\n        if (type) {\n            Validator.validateEnum(type, Object.values(constants.CONTACT_TYPE));\n        }\n        if (id) {\n            Validator.validateString(id);\n        }\n        if (name) {\n            Validator.validateString(name);\n        }\n        if (prefix) {\n            Validator.validateString(prefix);\n        }\n        if (extension) {\n            Validator.validateString(extension);\n        }\n        if (availability) {\n            Validator.validateEnum(availability, Object.values(constants.AGENT_AVAILABILITY));\n        }\n        if (recordId) {\n            Validator.validateString(recordId);\n        }\n        if (description) {\n            Validator.validateString(description);\n        }\n        if (queueWaitTime) {\n            Validator.validateString(queueWaitTime);\n        }\n\n        this.phoneNumber = phoneNumber;\n        this.id = id;\n        this.type = type;\n        this.name = name;\n        this.prefix = prefix;\n        this.extension = extension;\n        this.endpointARN = endpointARN;\n        this.queue = queue;\n        if (constants.CONTACT_TYPE.AGENT === this.type) {\n            this.availability = availability;\n        } else {\n            this.availability = null;\n        }\n        this.queueWaitTime = queueWaitTime;\n        this.recordId = recordId;\n        this.description = description;\n    }\n}\n\n/** \n* Class representing PhoneCallAttributes\n*/\n\nexport class PhoneCallAttributes {\n    /**\n     * Create PhoneCallAttributes.\n     * @param {object} param\n     * @param {string} [param.voiceCallId] - The voice call id\n     * @param {PARTICIPANT_TYPE} [param.participantType] - The participant type of the call\n     * @param {DIALER_TYPE} [param.dialerType] - The dialer type of the call\n     * @param {string} [param.parentId] - The parent call id of the call\n     * @param {boolean} [param.isOnHold]\n     * @param {boolean} [param.hasSupervisorBargedIn]\n     */\n    constructor({ voiceCallId, participantType, dialerType = Constants.DIALER_TYPE.NONE, parentId, isOnHold, hasSupervisorBargedIn = false }) {\n        if (voiceCallId) {\n            Validator.validateString(voiceCallId);\n        }\n        if (participantType) {\n            Validator.validateEnum(participantType, Object.values(constants.PARTICIPANT_TYPE));\n        }\n        if (parentId) {\n            Validator.validateString(parentId);\n        }\n        if (isOnHold !== undefined) {\n            Validator.validateBoolean(isOnHold);\n        }\n\n        Validator.validateBoolean(hasSupervisorBargedIn);\n        Validator.validateEnum(dialerType, Object.values(constants.DIALER_TYPE));\n\n        this.voiceCallId = voiceCallId;\n        this.participantType = participantType;\n        this.parentId = parentId;\n        this.isOnHold = isOnHold;\n        this.dialerType = dialerType;\n        this.hasSupervisorBargedIn = hasSupervisorBargedIn;\n    }\n}\n\n/** \n* Class representing a PhoneCall. \n*/\n\nexport class PhoneCall {\n    /**\n     * Create a PhoneCall.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId. This is a required parameter\n     * @param {CALL_TYPE} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {Contact} [param.contact] - The Call Target / Contact \n     * @param {string} [param.state] - The state of the call, i.e. ringing, connected, declined, failed \n     * @param {PhoneCallAttributes} [param.callAttributes] - Any additional call attributes\n     * @param {string} [param.phoneNumber] - The phone number associated with this call (usually external number)\n     * @param {CallInfo} [param.callInfo]\n     * @param {string} [param.reason]\n     * @param {boolean} [param.closeCallOnError]\n     * @param {string} [param.agentStatus]\n     */\n    constructor({callId, callType, contact, state, callAttributes, phoneNumber, callInfo, reason, closeCallOnError, agentStatus }) {\n        // TODO: Revisit the required fields\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n        if (callType) {\n            Validator.validateEnum(callType, Object.values(constants.CALL_TYPE));\n            this.callType = callType;\n        }\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n            this.phoneNumber = phoneNumber;\n        }\n        if (callInfo) {\n            Validator.validateClassObject(callInfo, CallInfo);\n            this.callInfo = callInfo;\n        }\n        if (contact) {\n            Validator.validateClassObject(contact, Contact);\n            this.contact = contact;\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        if (closeCallOnError) {\n            this.closeCallOnError = closeCallOnError;\n        }\n        if (agentStatus) {\n            this.agentStatus = agentStatus;\n        }\n        this.state = state;\n        this.callAttributes = callAttributes;\n    }\n}\n\n/** \n* Class representing a VendorConnector\n*/\nexport class VendorConnector {\n    /**\n     * Initialize the connector\n     * @param {object} connectorConfig\n     * @returns {Promise<InitResult>} \n     * \n     */\n    init(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get the currently active calls\n     * @returns {Promise<ActiveCallsResult>} \n     * \n     */\n    getActiveCalls() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Accept call\n     * @param {PhoneCall} call - The call to be accepted\n     * @returns {Promise<CallResult>} \n     * \n     */\n    acceptCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Decline call\n     * @param {PhoneCall} call - The call to be declined\n     * @returns {Promise<CallResult>} \n     * \n     */\n    declineCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * End call\n     * @param {PhoneCall} call - The call to be ended\n     * @param {AGENT_STATUS} agentStatus\n     * @returns {Promise<HangupResult>} \n     * \n     */\n    endCall(call, agentStatus) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    mute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Unmute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    unmute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Hold call\n     * @param {PhoneCall} call - The call to be held\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    hold(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume call\n     * @param {PhoneCall} call - The call to be resumed\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    resume(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set agent status\n     * @param {string} agentStatus\n     * @param {StatusInfo} statusInfo\n     * @param {Boolean} enqueueNextState - flag to determine if this status change request should be enqueued if neccessary\n     * @returns {Promise<GenericResult>} \n     * \n     */\n    setAgentStatus(agentStatus, statusInfo, enqueueNextState) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agent status\n     * @returns {Promise<AgentStatusInfo>} \n     * \n     */\n     getAgentStatus() {\n        this.logMessageToVendor(constants.LOG_LEVEL.INFO, 'getAgentStatus API is NOT Implemented' );\n    }\n\n    /**\n     * Dial out Number\n     * @param {Contact} contact\n     * @returns {Promise<CallResult>} \n     * \n     */\n    dial(contact) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Send digits\n     * @param {string} digits\n     */\n    sendDigits(digits) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get phone contacts\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getPhoneContacts() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Swap calls\n     * @param {PhoneCall} call1\n     * @param {PhoneCall} call2\n     * @returns {Promise<HoldToggleResult>} \n     */\n    swap(call1, call2) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Conference calls\n     * @param {PhoneCall[]} calls\n     * @returns {Promise<HoldToggleResult>} \n     */\n    conference(calls) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Add participant to call\n     * @param {Contact} contact\n     * @param {PhoneCall} call\n     * @returns {Promise<ParticipantResult>} \n     */\n    addParticipant(contact, call, isBlindTransfer) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Pause recording\n     * @param {PhoneCall} call\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    pauseRecording(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume recording\n     * @param {PhoneCall} call\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    resumeRecording(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agentConfig\n     * @returns {Promise<AgentConfigResult>}\n     */\n    getAgentConfig() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set Agent Config\n     * @param {AgentConfig} config\n     * @returns {Promise<GenericResult>}\n     */\n    setAgentConfig(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get Capabilities\n     * @returns {Promise<CapabilitiesResult>}\n     */\n    getCapabilities() {\n        throw new Error('Not implemented');\n    }\n    \n\n    /**\n     * Logout from Omni\n     * @returns {Promise<LogoutResult>} \n     */\n    logout() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Handle message from LWC/Aura component\n     * @param {object} message\n     */\n    handleMessage(message) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Wrap up call\n     * @param {PhoneCall} call\n     */\n    wrapUpCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n    * Get the signed recording url\n    * @param {String} recordingUrl\n    * @param {String} vendorCallKey\n    * @param {String} callId\n    * @returns {Promise<SignedRecordingUrlResult>} \n    */\n    getSignedRecordingUrl(recordingUrl, vendorCallKey, callId) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Triggers a browser download for Vendor Logs\n     * @param {String[]} logs Array of log messages.\n     */\n    downloadLogs(logs) {\n        downloadLogs();\n    }\n\n    /**\n     * Sends the logs with a logLevel and payload to the vendor connector.\n     * Does a no-op, if not implemented.\n     * @param {String} logLevel Log Level (INFO, WARN, ERROR)\n     * @param {String} message Message to be logged\n     * @param {Object} payload An optional payload to be logged\n     */\n    logMessageToVendor(logLevel, message, payload) {}\n\n    /**\n     * Supervise a call\n     * @param {SupervisedCallInfo} call Call to be supervised\n     */\n     superviseCall(supervisedCallInfo) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor disconnects from a call\n     * @param {PhoneCall} call Call to be disconnected\n     */\n    supervisorDisconnect(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor Barges into a ongoing call\n     * @param {PhoneCall} call Call which supervisor barges in\n     */\n    supervisorBargeIn(call) {\n        throw new Error('Not implemented');\n    }\n}\n\nexport class Validator {\n    static validateString(value) {\n        if (typeof value !== 'string') {\n            throw new Error(`Invalid argument. Expecting a string but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateNumber(value) {\n        if (typeof value !== 'number') {\n            throw new Error(`Invalid argument. Expecting a number but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateBoolean(value) {\n        if (typeof value !== 'boolean') {\n            throw new Error(`Invalid argument. Expecting a boolean but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateEnum(value, enumValues) {\n        const regex = new RegExp(enumValues.join( \"|\" ), \"i\");\n        if (!regex.test(value)) {\n            throw new Error(`Invalid argument. Expecting a value from ${JSON.stringify(enumValues)} but got ${value}`);\n        }\n        return this;\n    }\n\n    static validateDate(value) {\n        if (!(value instanceof Date)) {\n            throw new Error(`Invalid argument. Expecting a Date object but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateClassObject(object, className) {\n        if (!(object instanceof className)) {\n            throw new Error(`Invalid className. Expecting object of class ${className} but got ${typeof object}`);\n        }\n        return this;\n    }\n}\n\n/** \n * Class representing an Agent status information. This object is used to represent \n * agent status information\n */\n\nexport class AgentStatusInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (required)\n     * @param {string} [param.statusApiName] - The status API name\n     * @param {string} [param.statusName] - The label for this status to be displayed in the UI\n     */\n    constructor({statusId, statusApiName, statusName}) {\n        Validator.validateString(statusId);\n        if (statusApiName) {\n            Validator.validateString(statusApiName);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusApiName = statusApiName;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * Class representing an Agent Vendor status information. This object is used to represent \n * agent vendor side status information\n */\nexport class AgentVendorStatusInfo {\n    /**\n     * Create a AgentVendorStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (e.g agentStateARN)\n     * @param {string} [param.statusType] - The agent's current availability state type\n     * @param {string} [param.statusName] - The name of the agent's current availability state\n     */\n    constructor({statusId, statusType, statusName}) {\n        if (statusId) {\n            Validator.validateString(statusId);\n        }\n        if (statusType) {\n            Validator.validateString(statusType);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusType = statusType;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * NOTE: SALESFORCE INTERNAL USE ONLY\n * Class representing an State Change Result information. This object is used to represent \n * Agent State Change Infomation\n */\n export class StateChangeResult {\n    /**\n     * Create a StateChangeResult.\n     * @param {object} param\n     * @param {AgentVendorStatusInfo} [param.newVendorStateInfo] - newStateName (e.g 'Available') (required), newStateType (e.g 'routable')\n     * @param {AgentVendorStatusInfo} [param.oldVendorStateInfo] - oldStateName (e.g 'offline'), oldStateType (e.g 'Offline')\n     */\n    constructor({newVendorStateInfo, oldVendorStateInfo}) {\n        Validator.validateClassObject(newVendorStateInfo, AgentVendorStatusInfo);\n        Validator.validateString(newVendorStateInfo.statusName);\n        if (oldVendorStateInfo) {\n            Validator.validateClassObject(oldVendorStateInfo, AgentVendorStatusInfo);\n        }\n        this.newVendorStateInfo = newVendorStateInfo;\n        this.oldVendorStateInfo = oldVendorStateInfo;\n    }\n}\n\n/** \n * Class representing a Supervised Call Info. This object is used to represent \n * information about a call that is being supervised by a supervisor.\n */\nexport class SupervisedCallInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique supervised vendor call ID (required)\n     * @param {string} [param.voiceCallId] - The supervised salesforce voice call ID\n     * @param {string} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {string} [param.from] - From phone number (for Inbound calls)\n     * @param {string} [param.to] - To phone number (for Outbound calls)\n     * @param {string} [param.supervisorName] - The supervisor name (shown to the supervised agent on barge in)\n     * @param {boolean} [param.isBargedIn] - True if the Supervisor has barged in, False if the supervisor is listening in.\n     */\n\n    constructor({callId, voiceCallId, callType, from, to, supervisorName, isBargedIn}) {\n        Validator.validateString(callId);\n        this.callId = callId;\n        this.voiceCallId = voiceCallId;\n        this.callType = callType;\n        this.from = from;\n        this.to = to;\n        this.supervisorName = supervisorName;\n        this.isBargedIn = isBargedIn;\n    }\n}\n\n/**\n * Class representing a Audio Stats, which contains array of AudioStats. This object is used to calculate the MOS Score\n */\n\nexport class AudioStats {\n    /**\n     * Create a AudioStats\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId.\n     * @param {AudioStatsElement[]} param.stats - array of AudioStatsElement\n     * @param {boolean} [param.isAudioStatsCompleted] - True if the audio stats is completed, will calculate MOS and update VoiceCall record\n     */\n    constructor({ callId, stats, isAudioStatsCompleted }) {\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n\n        if (stats) {\n            Validator.validateClassObject(stats, Array);\n            stats.forEach(audioStatsElement => Validator.validateClassObject(audioStatsElement, AudioStatsElement));\n            this.stats = stats;\n        }\n\n        if (isAudioStatsCompleted) {\n            Validator.validateBoolean(isAudioStatsCompleted);\n            this.isAudioStatsCompleted = isAudioStatsCompleted;\n        }\n    }\n}\n\n/**\n * Class representing a Audio Stats Element. This object is used to calculate the MOS Score\n */\n\nexport class AudioStatsElement {\n    /**\n     * Create a AudioStatsElement\n     * @param {object} param\n     * @param {StatsInfo} [param.inputChannelStats] - the inputChannel stream stats\n     * @param {StatsInfo} [param.outputChannelStats] - the ouputChannel stream stats\n     */\n    constructor({inputChannelStats, outputChannelStats}) {\n        if (inputChannelStats) {\n            Validator.validateClassObject(inputChannelStats, StatsInfo);\n        }\n        if (outputChannelStats) {\n            Validator.validateClassObject(outputChannelStats, StatsInfo);\n        }\n        \n        this.inputChannelStats = inputChannelStats;\n        this.outputChannelStats = outputChannelStats;\n    }\n}\n\n/**\n * Class representing a Stream Stats. This object is used to calculate the MOS Score\n */\n\nexport class StatsInfo {\n    /**\n     * Create a StatsInfo\n     * @param {object} param\n     * @param {number} [param.packetsCount] - the packets count\n     * @param {number} [param.packetsLost] - packets lost count\n     * @param {number} [param.jitterBufferMillis] - jitter buffer in milliseconds\n     * @param {number} [param.roundTripTimeMillis] - round trip time in milliseconds\n     */\n    constructor({packetsCount, packetsLost, jitterBufferMillis, roundTripTimeMillis}) {\n        packetsCount = (packetsCount == null || packetsCount < 0) ? 0 : packetsCount;\n        packetsLost = (packetsLost == null || packetsLost < 0) ? 0 : packetsLost;\n        jitterBufferMillis = (jitterBufferMillis == null || jitterBufferMillis < 0) ? 0 : jitterBufferMillis;\n        roundTripTimeMillis = (roundTripTimeMillis == null || roundTripTimeMillis < 0) ? 0 : roundTripTimeMillis;\n\n        this.statsCount = 0;\n        this.packetsCount = packetsCount;\n        this.packetsLost = packetsLost;\n        this.jitterBufferMillis = jitterBufferMillis;\n        this.roundTripTimeMillis = roundTripTimeMillis;\n    }\n}\n\n/**\n * Class representing supervise call result\n */\n export class  SuperviseCallResult {\n    /**\n     * Create a SuperviseCallResult\n     * @param {object} param\n     * @param {PhoneCall} param.call\n     */\n    constructor({call}) {\n        Validator.validateClassObject(call, PhoneCall);\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for supervisorDisconnected()\n */\n export class SupervisorHangupResult extends HangupResult {\n     /**\n     * Create SupervisorHangupResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls when supervisor hangsup\n     */\n    constructor({ calls }) {\n        super({ calls });\n    }\n }","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport { AudioStatsElement, StatsInfo } from './types';\nlet audioStatus;\nlet supportsMos = false;\n\nfunction getAvgStats(streamType) {\n    const stats = audioStatus[streamType];\n    return {\n        packetsCount: stats.packetsCount / stats.statsCount,\n        packetsLost: stats.packetsLost / stats.statsCount,\n        jitterBufferMillis: stats.jitterBufferMillis / stats.statsCount,\n        roundTripTimeMillis: stats.roundTripTimeMillis / stats.statsCount\n    };\n}\n\nfunction getMOSByStream(streamType) {\n    const avgStats = getAvgStats(streamType);\n    const effectiveLatency = avgStats.roundTripTimeMillis + (avgStats.jitterBufferMillis * 2) + 10.0;\n    let R = 0;\n    if (effectiveLatency < 160) {\n        R = 93.2 - (effectiveLatency / 40);\n    } else {\n        R = 93.2 - (effectiveLatency - 120) / 10;\n    }\n    R -= avgStats.packetsLost / avgStats.packetsCount * 2.50;\n    return 1 + (0.035) * R + (.000007) * R * (R - 60) * (100 - R);\n}\n\nexport function enableMos() {\n    supportsMos = true;\n}\n\nexport function getMOS() {\n    if (!supportsMos || !audioStatus) {\n        return undefined;\n    }\n    const inputChannelMOS = getMOSByStream('inputChannelStats');\n    const ouputChannelMOS = getMOSByStream('outputChannelStats');\n    audioStatus = null;\n    if (isNaN(ouputChannelMOS) && isNaN(inputChannelMOS)) {\n        return 0;\n    } else if (isNaN(ouputChannelMOS)) {\n        return inputChannelMOS;\n    } else if (isNaN(inputChannelMOS)) {\n        return ouputChannelMOS;\n    } else {\n        return Math.min(inputChannelMOS, ouputChannelMOS);\n    }\n}\n\nexport function initAudioStats() {\n    audioStatus = new AudioStatsElement({inputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0}), \n                               outputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0})});\n}\n\nexport function updateAudioStats(statsArray) {\n    if (audioStatus) {\n        statsArray.forEach((stats) => {\n            if (stats.inputChannelStats) {\n                audioStatus.inputChannelStats.statsCount++;\n                audioStatus.inputChannelStats.packetsCount += stats.inputChannelStats.packetsCount | 0;\n                audioStatus.inputChannelStats.packetsLost += stats.inputChannelStats.packetsLost | 0;\n                audioStatus.inputChannelStats.jitterBufferMillis += stats.inputChannelStats.jitterBufferMillis | 0;\n                audioStatus.inputChannelStats.roundTripTimeMillis += stats.inputChannelStats.roundTripTimeMillis | 0;\n            }\n            if (stats.outputChannelStats) {\n                audioStatus.outputChannelStats.statsCount++;\n                audioStatus.outputChannelStats.packetsCount += stats.outputChannelStats.packetsCount | 0;\n                audioStatus.outputChannelStats.packetsLost += stats.outputChannelStats.packetsLost | 0;\n                audioStatus.outputChannelStats.jitterBufferMillis += stats.outputChannelStats.jitterBufferMillis | 0;\n                audioStatus.outputChannelStats.roundTripTimeMillis += stats.outputChannelStats.roundTripTimeMillis | 0;\n            }\n        });\n    }\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { CONNECTOR_CONFIG_EXPOSED_FIELDS, CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH, CONNECTOR_CONFIG_EXCEPTION_FIELDS } from './constants.js';\nimport { Validator, GenericResult, InitResult, CallResult, HangupResult, HoldToggleResult, PhoneContactsResult, MuteToggleResult,\n    ParticipantResult, RecordingToggleResult, AgentConfigResult, ActiveCallsResult, SignedRecordingUrlResult, LogoutResult,\n    VendorConnector, Contact, AudioStats, SuperviseCallResult, SupervisorHangupResult, AgentStatusInfo, SupervisedCallInfo, CapabilitiesResult, AgentVendorStatusInfo, StateChangeResult} from './types';\nimport { enableMos, getMOS, initAudioStats, updateAudioStats } from './mosUtil';\nimport { log, getLogs } from './logger';\n\nlet channelPort;\nlet vendorConnector;\nlet agentAvailable;\nlet isSupervisorConnected;\n\n/**\n * Gets the error type from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorType(e) {\n    return e && e.type ? e.type : e;\n}\n\n/**\n * Sanitizes the object by removing any PII data\n * @param {object} payload\n */\nfunction sanitizePayload(payload) {\n    if (payload) {\n        if (typeof (payload) === 'function') {\n            // remove functions from the payload, because they cannot be copied by the postMessage function\n            return;\n        } else if (typeof (payload) === 'object') {\n            const isArray = Array.isArray(payload);\n            const sanitizedPayload = isArray ? [] : {};\n\n            if (isArray) {\n                payload.forEach(element => {\n                    sanitizedPayload.push(sanitizePayload(element));\n                });\n            } else {\n                for (const property in payload) {\n                    if (property !== 'phoneNumber' &&\n                        property !== 'number' &&\n                        property !== 'name' &&\n                        property !== 'callAttributes') {\n                        sanitizedPayload[property] = sanitizePayload(payload[property]);\n                    }\n                }\n            }\n            return sanitizedPayload;\n        }\n    }\n    return payload;\n}\n\n/**\n * Gets the error message from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorMessage(e) {\n    return e && e.message ? e.message : e;\n}\n/** \n * Dispatch a telephony event log to Salesforce\n * @param {String} eventType event type, i.e. constants.EVENT_TYPE.CALL_STARTED    \n * @param {Object} payload event payload\n * @param {Boolean} isError error scenario\n */\nfunction dispatchEventLog(eventType, payload, isError) {\n    const sanitizedPayload = sanitizePayload(payload);\n    const logLevel = isError ? constants.LOG_LEVEL.ERROR : constants.LOG_LEVEL.INFO;\n    log({eventType, payload}, logLevel, constants.LOG_SOURCE.SYSTEM);\n\n    channelPort.postMessage({\n        type: constants.MESSAGE_TYPE.LOG,\n        payload: { eventType, payload: sanitizedPayload, isError }\n    });\n}\n/** \n * Dispatch a telephony event to Salesforce\n * @param {String} eventType event type, i.e. constants.EVENT_TYPE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} registerLog optional argument to not register the event\n */\nfunction dispatchEvent(eventType, payload, registerLog = true) {\n    channelPort.postMessage({\n        type: constants.MESSAGE_TYPE.TELEPHONY_EVENT_DISPATCHED,\n        payload: { telephonyEventType: eventType, telephonyEventPayload: payload }\n    });\n    if (registerLog) {\n        dispatchEventLog(eventType, payload, false);\n    }\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {string} errorType Error Type, ex: constants.ErrorType.MICROPHONE_NOT_SHARED\n * @param {object} error Error object representing the error\n * @param {string} eventType The event that caused this error, ex: constants.MESSAGE_TYPE.ACCEPT_CALL\n */\nfunction dispatchError(errorType, error, eventType) {\n    // eslint-disable-next-line no-console\n    console.error(`SCV dispatched error ${errorType} for eventType ${eventType}`, error);\n    dispatchEvent(constants.EVENT_TYPE.ERROR, { message: constants.ERROR_TYPE[errorType] }, false);\n    dispatchEventLog(eventType, { errorType, error }, true);\n}\n\nfunction dispatchInfo(eventType, payload) {\n    // eslint-disable-next-line no-console\n    console.info(`SCV info message dispatched for eventType ${eventType} with payload ${JSON.stringify(payload)}`);\n    dispatchEvent(constants.EVENT_TYPE.INFO, { message: constants.INFO_TYPE[eventType] }, false);\n    dispatchEventLog(eventType, payload, false);\n}\n\n/** \n * Notify Salesforce that the connector is ready\n */\nasync function setConnectorReady() {\n    try {\n        const agentConfigResult = await vendorConnector.getAgentConfig();\n        const capabilitiesResult = await vendorConnector.getCapabilities();\n        Validator.validateClassObject(agentConfigResult, AgentConfigResult);\n        Validator.validateClassObject(capabilitiesResult, CapabilitiesResult);\n        if (capabilitiesResult.supportsMos) {\n            enableMos();\n        }\n        const activeCallsResult = await vendorConnector.getActiveCalls();\n        Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n        const activeCalls = activeCallsResult.activeCalls;\n        const type = constants.MESSAGE_TYPE.CONNECTOR_READY;\n        const payload = {\n            agentConfig: {\n\n                [constants.AGENT_CONFIG_TYPE.PHONES] : agentConfigResult.phones,\n                [constants.AGENT_CONFIG_TYPE.SELECTED_PHONE] : agentConfigResult.selectedPhone\n            },\n            capabilities: {\n                [constants.CAPABILITIES_TYPE.MUTE] : capabilitiesResult.hasMute,\n                [constants.CAPABILITIES_TYPE.RECORD] : capabilitiesResult.hasRecord,\n                [constants.CAPABILITIES_TYPE.MERGE] : capabilitiesResult.hasMerge,\n                [constants.CAPABILITIES_TYPE.SWAP] : capabilitiesResult.hasSwap,\n                [constants.CAPABILITIES_TYPE.SIGNED_RECORDING_URL] : capabilitiesResult.hasSignedRecordingUrl,\n                [constants.CAPABILITIES_TYPE.DEBUG_ENABLED] : capabilitiesResult.debugEnabled,\n                [constants.CAPABILITIES_TYPE.CONTACT_SEARCH] : capabilitiesResult.hasContactSearch,\n                [constants.CAPABILITIES_TYPE.VENDOR_PROVIDED_AVAILABILITY] : capabilitiesResult.hasAgentAvailability,\n                [constants.CAPABILITIES_TYPE.VENDOR_PROVIDED_QUEUE_WAIT_TIME] : capabilitiesResult.hasQueueWaitTime,\n                [constants.CAPABILITIES_TYPE.SUPERVISOR_LISTEN_IN] : capabilitiesResult.hasSupervisorListenIn,\n                [constants.CAPABILITIES_TYPE.SUPERVISOR_BARGE_IN] : capabilitiesResult.hasSupervisorBargeIn,\n                [constants.CAPABILITIES_TYPE.MOS] : capabilitiesResult.supportsMos,\n                [constants.CAPABILITIES_TYPE.BLIND_TRANSFER] : capabilitiesResult.hasBlindTransfer,\n                [constants.CAPABILITIES_TYPE.TRANSFER_TO_OMNI_FLOW] : capabilitiesResult.hasTransferToOmniFlow,\n                [constants.CAPABILITIES_TYPE.PENDING_STATUS_CHANGE] : capabilitiesResult.hasPendingStatusChange\n            },\n            callInProgress: activeCalls.length > 0 ? activeCalls[0] : null\n        }\n        channelPort.postMessage({\n            type,\n            payload\n        });\n        dispatchEventLog(type, payload, false);\n    } catch (e) {\n        // Post CONNECTOR_READY even if getAgentConfig is not implemented\n        channelPort.postMessage({\n            type: constants.MESSAGE_TYPE.CONNECTOR_READY,\n            payload: {}\n        });\n        dispatchEventLog(constants.MESSAGE_TYPE.CONNECTOR_READY, {}, false);\n    }\n}\n\n//TODO: 230 we should convert call object to PhoneCall object\nasync function channelMessageHandler(message) { \n    const eventType = message.data.type;\n    if (eventType !== constants.MESSAGE_TYPE.LOG) {\n        dispatchEventLog(eventType, message.data, false);\n    }\n    switch (eventType) {\n        case constants.MESSAGE_TYPE.ACCEPT_CALL:\n            try {\n                if (message.data.call && message.data.call.callType &&\n                    message.data.call.callType.toLowerCase() === constants.CALL_TYPE.OUTBOUND.toLowerCase()) {\n                    return;\n                }\n                initAudioStats();\n                if (isSupervisorConnected) {\n                    const hangupPayload = await vendorConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_HANGUP, hangupPayload.calls);\n                }\n                let payload = await vendorConnector.acceptCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(call.callType.toLowerCase() === constants.CALL_TYPE.CALLBACK.toLowerCase() ?\n                    constants.EVENT_TYPE.CALL_STARTED : constants.EVENT_TYPE.CALL_CONNECTED, call);\n            } catch (e) {\n                isSupervisorConnected = false;\n                dispatchInfo(constants.INFO_TYPE.CAN_NOT_ACCEPT_THE_CALL, {messagetype: constants.MESSAGE_TYPE.ACCEPT_CALL, additionalInfo: e} )\n            }\n        break;\n        case constants.MESSAGE_TYPE.DECLINE_CALL:\n            try {\n                const payload =  await vendorConnector.declineCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(constants.EVENT_TYPE.HANGUP, call);\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_DECLINE_THE_CALL, e, constants.MESSAGE_TYPE.DECLINE_CALL);\n            }\n        break;\n        case constants.MESSAGE_TYPE.END_CALL:\n            try {\n                const payload = await vendorConnector.endCall(message.data.call, message.data.agentStatus);\n                Validator.validateClassObject(payload, HangupResult);\n                const activeCallsResult = await vendorConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                const { calls } = payload;\n                // after end calls from vendor side, if no more active calls, fire HANGUP, otherwise, fire PARTICIPANT_REMOVED\n                if (activeCalls.length === 0) {\n                    dispatchEvent(constants.EVENT_TYPE.HANGUP, calls);\n                } else {\n                    dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_REMOVED, calls.length > 0 && calls[0]);\n                }\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_END_THE_CALL, e, constants.MESSAGE_TYPE.END_CALL);\n            }\n        break;\n        case constants.MESSAGE_TYPE.MUTE:\n            try {\n                const payload = await vendorConnector.mute();\n                publishEvent({eventType: constants.EVENT_TYPE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_MUTE_CALL, e, constants.MESSAGE_TYPE.MUTE);\n            }\n        break;\n        case constants.MESSAGE_TYPE.UNMUTE:\n            try {\n                const payload = await vendorConnector.unmute();\n                publishEvent({eventType: constants.EVENT_TYPE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_UNMUTE_CALL, e, constants.MESSAGE_TYPE.UNMUTE);\n            }\n        break;\n        case constants.MESSAGE_TYPE.HOLD:\n            try {\n                const payload = await vendorConnector.hold(message.data.call);\n                publishEvent({eventType: constants.EVENT_TYPE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                switch(getErrorType(e)) {\n                    case constants.ERROR_TYPE.INVALID_PARTICIPANT:\n                        dispatchError(constants.ERROR_TYPE.INVALID_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.HOLD);\n                        break;\n                    default:\n                        dispatchError(constants.ERROR_TYPE.CAN_NOT_HOLD_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.HOLD);\n                        break;\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.RESUME:\n            try {\n                const payload = await vendorConnector.resume(message.data.call);\n                publishEvent({eventType: constants.EVENT_TYPE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                switch(getErrorType(e)) {\n                    case constants.ERROR_TYPE.INVALID_PARTICIPANT:\n                        dispatchError(constants.ERROR_TYPE.INVALID_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.RESUME);\n                        break;\n                    default:\n                        dispatchError(constants.ERROR_TYPE.CAN_NOT_RESUME_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.RESUME);\n                        break;\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.SET_AGENT_STATUS:\n            try {\n                const statusInfo = message.data.statusInfo || {};\n                const enqueueNextState = message.data.enqueueNextState || false;\n                const payload = await vendorConnector.setAgentStatus(message.data.agentStatus, statusInfo, enqueueNextState);\n                Validator.validateClassObject(payload, GenericResult);\n                const { success } = payload;\n                dispatchEvent(constants.EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success });\n            } catch (e) {\n                if (message.data.statusInfo) {\n                    dispatchEvent(constants.EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success: false });\n                }\n                switch(getErrorType(e)) {\n                    case constants.ERROR_TYPE.INVALID_AGENT_STATUS:\n                        dispatchError(constants.ERROR_TYPE.INVALID_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.SET_AGENT_STATUS);\n                        break;\n                    default:\n                        dispatchError(constants.ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.SET_AGENT_STATUS);\n                        break;\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.GET_AGENT_STATUS:\n            try {\n                const payload = await vendorConnector.getAgentStatus();\n                Validator.validateClassObject(payload, AgentVendorStatusInfo);\n                dispatchEvent(constants.EVENT_TYPE.GET_AGENT_STATUS_RESULT, payload);\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.GET_AGENT_STATUS);\n            }\n        break;\n        case constants.MESSAGE_TYPE.DIAL:\n            try {\n                const payload = await vendorConnector.dial(new Contact(message.data.contact));\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(constants.EVENT_TYPE.CALL_STARTED, call);\n            } catch (e) {\n                dispatchEvent(constants.EVENT_TYPE.CALL_FAILED);\n                switch(getErrorType(e)) {\n                    case constants.ERROR_TYPE.INVALID_DESTINATION:\n                        dispatchError(constants.ERROR_TYPE.INVALID_DESTINATION, getErrorMessage(e), constants.MESSAGE_TYPE.DIAL);\n                        break;\n                    case constants.ERROR_TYPE.GENERIC_ERROR:\n                        dispatchError(constants.ERROR_TYPE.GENERIC_ERROR, getErrorMessage(e), constants.MESSAGE_TYPE.DIAL);\n                        break;\n                    default:\n                        dispatchError(constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.DIAL);\n                        break;\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.SEND_DIGITS:\n            try {\n                await vendorConnector.sendDigits(message.data.digits);\n            } catch (e) {\n                dispatchEventLog(constants.MESSAGE_TYPE.SEND_DIGITS, message.data.digits, true);\n            }\n            break;\n        case constants.MESSAGE_TYPE.GET_PHONE_CONTACTS:\n            try  {\n                const payload = await vendorConnector.getPhoneContacts(message.data.filter);\n                Validator.validateClassObject(payload, PhoneContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        type: contact.type,\n                        name: contact.name,\n                        phoneNumber: contact.phoneNumber,\n                        prefix: contact.prefix,\n                        extension: contact.extension,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        availability: contact.availability,\n                        queueWaitTime: contact.queueWaitTime,\n                        recordId: contact.recordId,\n                        description: contact.description\n                    };\n                });\n                dispatchEvent(constants.EVENT_TYPE.PHONE_CONTACTS, {\n                    contacts, contactTypes: payload.contactTypes\n                });\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_GET_PHONE_CONTACTS, e, constants.MESSAGE_TYPE.GET_PHONE_CONTACTS);\n            }\n        break;\n        case constants.MESSAGE_TYPE.SWAP_PARTICIPANTS:\n            try {\n                // TODO: Create PhoneCall from call1.callId & call2.callId\n                // TODO: rename to call1 and call2\n                const payload = await vendorConnector.swap(message.data.callToHold, message.data.callToResume);\n                publishEvent({ eventType: constants.EVENT_TYPE.PARTICIPANTS_SWAPPED, payload });\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, e, constants.MESSAGE_TYPE.SWAP_PARTICIPANTS);\n            }\n        break;\n        case constants.MESSAGE_TYPE.CONFERENCE:\n            try {\n                const payload = await vendorConnector.conference(message.data.calls);\n                publishEvent({ eventType: constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED, payload });\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_CONFERENCE, e, constants.MESSAGE_TYPE.CONFERENCE);\n            }\n        break;\n        case constants.MESSAGE_TYPE.ADD_PARTICIPANT:\n            try {\n                const payload = await vendorConnector.addParticipant(new Contact(message.data.contact), message.data.call, message.data.isBlindTransfer);\n                publishEvent({ eventType: constants.EVENT_TYPE.PARTICIPANT_ADDED, payload });\n                if (message.data.isBlindTransfer) {\n                    dispatchEvent(constants.EVENT_TYPE.HANGUP, message.data.call);\n                }\n            } catch (e) {\n                // TODO: Can we avoid passing in reason field\n                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_REMOVED, {\n                    reason: constants.EVENT_TYPE.ERROR.toLowerCase()\n                });\n                switch(getErrorType(e)) {\n                    case constants.ERROR_TYPE.INVALID_DESTINATION:\n                        dispatchError(constants.ERROR_TYPE.INVALID_DESTINATION, getErrorMessage(e), constants.MESSAGE_TYPE.ADD_PARTICIPANT);\n                        break;\n                    default:\n                        dispatchError(constants.ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.ADD_PARTICIPANT);\n                        break;\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.PAUSE_RECORDING:\n            try {\n                const payload = await vendorConnector.pauseRecording(message.data.call);\n                publishEvent({ eventType: constants.EVENT_TYPE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_PAUSE_RECORDING, e, constants.MESSAGE_TYPE.PAUSE_RECORDING);\n            }\n        break;\n        case constants.MESSAGE_TYPE.RESUME_RECORDING:\n            try {\n                const payload = await vendorConnector.resumeRecording(message.data.call);\n                publishEvent({ eventType: constants.EVENT_TYPE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_RESUME_RECORDING, e, constants.MESSAGE_TYPE.RESUME_RECORDING);\n            }\n        break;\n        case constants.MESSAGE_TYPE.LOGOUT:\n            try {\n                const payload = await vendorConnector.logout();\n                Validator.validateClassObject(payload, LogoutResult);\n                const { success, loginFrameHeight } = payload;\n                dispatchEvent(constants.EVENT_TYPE.LOGOUT_RESULT, { success, loginFrameHeight });\n            } catch (e) {\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_OUT, e, constants.MESSAGE_TYPE.LOGOUT);\n            }\n        break;\n        case constants.MESSAGE_TYPE.MESSAGE:\n            // TODO: Define a return type for handling message\n            vendorConnector.handleMessage(message.data.message);\n        break;\n        case constants.MESSAGE_TYPE.WRAP_UP_CALL:\n            vendorConnector.wrapUpCall(message.data.call);\n        break;\n        case constants.MESSAGE_TYPE.AGENT_AVAILABLE: {\n            agentAvailable = message.data.isAvailable;\n            if (agentAvailable) {\n                const activeCallsResult = await vendorConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                for (const callId in activeCalls) {\n                    const call = activeCalls[callId];\n                    const shouldReplay = call.callInfo ? call.callInfo.isReplayable : true;\n                    const isSupervisorCall = call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.SUPERVISOR;\n                    const hasSupervisorBargedIn = isSupervisorCall && call.callAttributes && call.callAttributes.hasSupervisorBargedIn;\n                    if (shouldReplay) {\n                        call.isReplayedCall = true;\n                        switch(call.state) {\n                            case constants.CALL_STATE.CONNECTED:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, call);\n                                    if (hasSupervisorBargedIn) {\n                                        dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_BARGED_IN, call);\n                                    }\n                                    break;\n                                }\n                                dispatchEvent(constants.EVENT_TYPE.CALL_CONNECTED, call);\n                                break;\n                            case constants.CALL_STATE.RINGING:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_CALL_STARTED, call);\n                                    break;\n                                }\n                                dispatchEvent(constants.EVENT_TYPE.CALL_STARTED, call);\n                                break;\n                            case constants.CALL_STATE.TRANSFERRING:\n                                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_ADDED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            case constants.CALL_STATE.TRANSFERRED:\n                                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_CONNECTED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        break;\n        case constants.MESSAGE_TYPE.SET_AGENT_CONFIG:\n            try {\n                const result = await vendorConnector.setAgentConfig(message.data.config);\n                Validator.validateClassObject(result, GenericResult);\n                dispatchEvent(constants.EVENT_TYPE.AGENT_CONFIG_UPDATED, result);\n            } catch (e){\n                dispatchError(getErrorType(e) === constants.ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER ? constants.ERROR_TYPE.CAN_NOT_UPDATE_PHONE_NUMBER : constants.ERROR_TYPE.CAN_NOT_SET_AGENT_CONFIG , getErrorMessage(e), constants.MESSAGE_TYPE.SET_AGENT_CONFIG);\n            }\n        break;\n        case constants.MESSAGE_TYPE.GET_SIGNED_RECORDING_URL:\n            try {\n                const { recordingUrl, vendorCallKey, callId } = message.data;\n                const result = await vendorConnector.getSignedRecordingUrl(recordingUrl, vendorCallKey, callId);\n                Validator.validateClassObject(result, SignedRecordingUrlResult);\n                dispatchEvent(constants.EVENT_TYPE.SIGNED_RECORDING_URL, result);\n            } catch (e) {\n                // In case of an error, we want to show an error message in the recording player\n                const signedRecordingUrlResult = new SignedRecordingUrlResult({\n                    success: false\n                });\n                dispatchEvent(constants.EVENT_TYPE.SIGNED_RECORDING_URL, signedRecordingUrlResult, false);\n                dispatchEventLog(constants.MESSAGE_TYPE.GET_SIGNED_RECORDING_URL, signedRecordingUrlResult, true);\n            }\n        break;\n        case constants.MESSAGE_TYPE.DOWNLOAD_VENDOR_LOGS:\n            vendorConnector.downloadLogs(getLogs());\n        break;\n        case constants.MESSAGE_TYPE.LOG: {\n                const { logLevel, logMessage, payload } = message.data;\n                vendorConnector.logMessageToVendor(logLevel, logMessage, payload);\n            }\n        break;\n        case constants.MESSAGE_TYPE.SUPERVISE_CALL:\n            try {\n                isSupervisorConnected = true;\n                const result = await vendorConnector.superviseCall(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                const agentConfigResult = await vendorConnector.getAgentConfig();\n                if(agentConfigResult.selectedPhone.type === constants.PHONE_TYPE.SOFT_PHONE) {\n                    dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, result.call);\n                } else {\n                    dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_CALL_STARTED, result.call);\n                }\n            } catch (e){\n                isSupervisorConnected = false;\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, e, constants.MESSAGE_TYPE.SUPERVISE_CALL);\n            }\n        break;\n        case constants.MESSAGE_TYPE.SUPERVISOR_DISCONNECT:\n            try {\n                const result = await vendorConnector.supervisorDisconnect(message.data.call);\n                Validator.validateClassObject(result, SupervisorHangupResult);\n                isSupervisorConnected = false;\n                dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_HANGUP, result.calls);\n            } catch (e){\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_DISCONNECT_SUPERVISOR, e, constants.MESSAGE_TYPE.SUPERVISOR_DISCONNECT);\n            }\n        break;\n        case constants.MESSAGE_TYPE.SUPERVISOR_BARGE_IN:\n            try {\n                const result = await vendorConnector.supervisorBargeIn(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_BARGED_IN, result.call );\n            } catch (e){\n                dispatchError(constants.ERROR_TYPE.CAN_NOT_BARGE_IN_SUPERVISOR, e, constants.MESSAGE_TYPE.SUPERVISOR_BARGE_IN);\n            }\n        break;\n        default:\n            break;\n    }\n}\n\n\nasync function windowMessageHandler(message) {\n    switch (message.data.type) {\n        case constants.MESSAGE_TYPE.SETUP_CONNECTOR: {\n            const sfDomain = /^https:\\/\\/[\\w-.]+(lightning\\.[\\w]+\\.soma\\.force\\.com|\\.lightning\\.force\\.com|\\.lightning\\.pc-rnd\\.force\\.com|\\.stm\\.force\\.com|\\.salesforce\\.com|\\.my\\.salesforce-sites\\.com|\\.lightning\\.localhost\\.[\\w]+\\.force.com)$/;\n            const originUrl = new URL(message.origin);\n            const url = originUrl.protocol + '//' + originUrl.hostname;\n\n            if (sfDomain.test(url)) {\n                channelPort = message.ports[0];\n                channelPort.onmessage = channelMessageHandler;\n                dispatchEventLog(constants.MESSAGE_TYPE.SETUP_CONNECTOR, exposedConnectorConfig(message.data.connectorConfig), false);\n                try {\n                    const payload = await vendorConnector.init(message.data.connectorConfig);\n                    Validator.validateClassObject(payload, InitResult);\n                    if (payload.showLogin) {\n                        dispatchEvent(constants.EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        });\n                    } else {\n                        setConnectorReady();\n                    }\n                } catch (e) {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.INVALID_PARAMS:\n                            dispatchError(constants.ERROR_TYPE.INVALID_PARAMS, getErrorMessage(e), constants.MESSAGE_TYPE.SETUP_CONNECTOR);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_IN, getErrorMessage(e), constants.MESSAGE_TYPE.SETUP_CONNECTOR);\n                            break;\n                    }\n                }\n            }\n            window.removeEventListener('message', windowMessageHandler);\n        }\n            break;\n        default:\n            break;\n    }\n}\n\nfunction exposedConnectorConfig(payload) {\n    payload = payload || {};\n    let obj = {};\n    //properties that are equal to key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS.forEach(prop => {\n        if (payload.hasOwnProperty(prop)) {\n            obj[prop] = payload[prop];\n        }\n    });\n    //properties that start with key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH.forEach(prop => {\n        Object.keys(payload).forEach(key => {\n            if (key.startsWith(prop) && !CONNECTOR_CONFIG_EXCEPTION_FIELDS.includes(key)) {\n                obj[key] = payload[key];\n            }\n        });\n    });\n\n    return obj;\n}\n\nfunction validatePayload(payload, payloadType, errorType, eventType) {\n    try {\n        Validator.validateClassObject(payload, payloadType);\n        return true;\n    } catch (e) {\n        if (errorType) {\n            dispatchError(errorType, e, eventType);\n        }\n        return false;\n    }\n}\n\n/*========================== Exported Functions ==========================*/\n/**\n * Initialize a vendor connector\n * @param {VendorConnector} connector\n */\nexport function initializeConnector(connector) {\n    vendorConnector = connector;\n    window.addEventListener('message', windowMessageHandler);\n}\n\n/**\n * Publish an event or error log to Salesforce\n * @param {object} param\n * @param {string} param.eventType Any event type to be logged\n * @param {object} param.payload Any payload for the log that needs to be logged\n * @param {boolean} param.isError\n */\nexport function publishLog({ eventType, payload, isError }) {\n    dispatchEventLog(eventType, payload, isError);\n}\n\n/**\n * Publish a telephony error to Salesforce\n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\"|\"AGENT_ERROR\"|\"SOFTPHONE_ERROR\")} param.eventType Event type to publish.\n * @param {object} param.error Error object representing the error\n */\nexport function publishError({ eventType, error }) {\n    switch(eventType) {\n        case constants.EVENT_TYPE.LOGIN_RESULT:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_IN, error, constants.EVENT_TYPE.LOGIN_RESULT);\n            break;\n        case constants.EVENT_TYPE.LOGOUT_RESULT:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_OUT, error, constants.EVENT_TYPE.LOGOUT_RESULT);\n            break;\n        case constants.EVENT_TYPE.CALL_STARTED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.CALL_STARTED);\n            break;\n        case constants.EVENT_TYPE.QUEUED_CALL_STARTED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.QUEUED_CALL_STARTED);\n            break;\n        case constants.EVENT_TYPE.CALL_CONNECTED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.CALL_CONNECTED);\n            break;\n        case constants.EVENT_TYPE.HANGUP: \n            dispatchError(constants.ERROR_TYPE.CAN_NOT_END_THE_CALL, error, constants.EVENT_TYPE.HANGUP);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANT_ADDED:\n            dispatchError(getErrorType(error) === constants.ERROR_TYPE.INVALID_PARTICIPANT ? constants.ERROR_TYPE.INVALID_PARTICIPANT : constants.ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, error, constants.EVENT_TYPE.PARTICIPANT_ADDED);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANT_CONNECTED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT, error, constants.EVENT_TYPE.PARTICIPANT_CONNECTED);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANT_REMOVED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT, error, constants.EVENT_TYPE.PARTICIPANT_REMOVED); \n            break;\n        case constants.EVENT_TYPE.MUTE_TOGGLE:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_TOGGLE_MUTE, error, constants.EVENT_TYPE.MUTE_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.HOLD_TOGGLE: \n            dispatchError(getErrorType(error) === constants.ERROR_TYPE.INVALID_PARTICIPANT ? constants.ERROR_TYPE.INVALID_PARTICIPANT : constants.ERROR_TYPE.CAN_NOT_TOGGLE_HOLD, error, constants.EVENT_TYPE.HOLD_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.RECORDING_TOGGLE:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_TOGGLE_RECORD, error, constants.EVENT_TYPE.RECORDING_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANTS_SWAPPED: \n            dispatchError(constants.ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, error, constants.EVENT_TYPE.PARTICIPANTS_SWAPPED);\n            break;\n        case constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_CONFERENCE, error, constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED);\n            break;\n        case constants.EVENT_TYPE.AGENT_ERROR:\n            dispatchError(constants.ERROR_TYPE.AGENT_ERROR, error, constants.EVENT_TYPE.AGENT_ERROR);\n            break;\n        case constants.EVENT_TYPE.SOFTPHONE_ERROR:\n            switch(getErrorType(error)) {\n                case constants.ERROR_TYPE.UNSUPPORTED_BROWSER:\n                    dispatchError(constants.ERROR_TYPE.UNSUPPORTED_BROWSER, error, constants.EVENT_TYPE.SOFTPHONE_ERROR);\n                    break;\n                case constants.ERROR_TYPE.MICROPHONE_NOT_SHARED:\n                    dispatchError(constants.ERROR_TYPE.MICROPHONE_NOT_SHARED, error, constants.EVENT_TYPE.SOFTPHONE_ERROR);\n                    break;\n                default:\n                    dispatchError(constants.ERROR_TYPE.GENERIC_ERROR, error, constants.EVENT_TYPE.SOFTPHONE_ERROR);\n            }\n            break;\n        default:\n            console.error('Unhandled error scenario with arguments ', arguments);\n    }\n}\n\n/**\n * Publish an event to Sfdc. The event payload will be verified to be the correct type before being published. \n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\")} param.eventType Event type to publish\n * @param {object} param.payload Payload for the event. Must to be an object of the payload class associated with the EVENT_TYPE else the event is NOT dispatched\n * @param {boolean} param.registerLog Boolean to opt out of registering logs for events\n * LOGIN_RESULT - GenericResult\n * LOGOUT_RESULT - LogoutResult\n * CALL_STARTED - CallResult\n * QUEUED_CALL_STARTED - CallResult\n * CALL_CONNECTED - CallResult\n * HANGUP - CallResult\n * PARTICIPANT_CONNECTED - ParticipantResult\n * PARTICIPANT_ADDED - ParticipantResult\n * PARTICIPANTS_SWAPPED - HoldToggleResult\n * PARTICIPANTS_CONFERENCED - HoldToggleResult\n * MESSAGE - object\n * MUTE_TOGGLE - MuteToggleResult\n * HOLD_TOGGLE - HoldToggleResult\n * RECORDING_TOGGLE - RecordingToggleResult\n */\nexport async function publishEvent({ eventType, payload, registerLog = true }) {\n    switch(eventType) {\n        case constants.EVENT_TYPE.LOGIN_RESULT: {\n            if (validatePayload(payload, GenericResult, constants.ERROR_TYPE.CAN_NOT_LOG_IN, constants.EVENT_TYPE.LOGIN_RESULT)) {\n                dispatchEvent(constants.EVENT_TYPE.LOGIN_RESULT, payload, registerLog);\n                if (payload.success) {\n                    setConnectorReady();\n                }\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.LOGOUT_RESULT:\n            if (validatePayload(payload, LogoutResult, constants.ERROR_TYPE.CAN_NOT_LOG_OUT, constants.EVENT_TYPE.LOGOUT_RESULT)) {\n                dispatchEvent(constants.EVENT_TYPE.LOGOUT_RESULT, {\n                    success: payload.success,\n                    loginFrameHeight: payload.loginFrameHeight\n                }, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.CALL_STARTED)) {\n                dispatchEvent(constants.EVENT_TYPE.CALL_STARTED, payload.call, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.QUEUED_CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.QUEUED_CALL_STARTED)) {\n                dispatchEvent(constants.EVENT_TYPE.QUEUED_CALL_STARTED, payload.call, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.CALL_CONNECTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.CALL_CONNECTED)) {\n                initAudioStats();\n                if (isSupervisorConnected) {\n                    const hangupPayload = await vendorConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_HANGUP, hangupPayload, registerLog);\n                    dispatchEvent(constants.EVENT_TYPE.CALL_CONNECTED, payload.call, registerLog);\n                    break;\n                } \n                dispatchEvent(constants.EVENT_TYPE.CALL_CONNECTED, payload.call, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.HANGUP: {\n            if (validatePayload(payload, HangupResult, constants.ERROR_TYPE.CAN_NOT_END_THE_CALL, constants.EVENT_TYPE.HANGUP)) {\n                dispatchEvent(constants.EVENT_TYPE.HANGUP, payload.calls, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.PARTICIPANT_ADDED: {\n            if (validatePayload(payload, ParticipantResult, constants.ERROR_TYPE.CAN_NOT_ADD_PARTICIPANT, constants.EVENT_TYPE.PARTICIPANT_ADDED)) {\n                const { initialCallHasEnded, callInfo, phoneNumber, callId } = payload;\n                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_ADDED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    phoneNumber,\n                    callId\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.PARTICIPANT_CONNECTED: {\n            if (validatePayload(payload, ParticipantResult, constants.ERROR_TYPE.CAN_NOT_CONNECT_PARTICIPANT, constants.EVENT_TYPE.PARTICIPANT_CONNECTED)) {\n                const { initialCallHasEnded, callInfo, phoneNumber, callId } = payload;\n                dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_CONNECTED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    phoneNumber,\n                    callId\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.PARTICIPANT_REMOVED: {\n            // TODO: The logic here needs to be modified. Ideally firing CallResult with \n            // correct participantType should do the trick but we are firing PARTICIPANT_CONNECTED because of a bug W-8601645\n            // Once the bug is fixed, this code needs to be updated\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.CAN_NOT_HANGUP_PARTICIPANT, constants.EVENT_TYPE.PARTICIPANT_REMOVED)) { \n                const { call } = payload;\n                const activeCallsResult = await vendorConnector.getActiveCalls();\n                if (validatePayload(activeCallsResult, ActiveCallsResult)) {\n                    // when no more active calls, fire HANGUP\n                    const activeCalls = activeCallsResult.activeCalls;\n                    if (activeCalls.length === 0) {\n                        dispatchEvent(constants.EVENT_TYPE.HANGUP, call, registerLog);\n                    } else if (call && call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.INITIAL_CALLER) {\n                        // when there is still transfer call, based on the state of the transfer call, fire PARTICIPANT_ADDED or PARTICIPANT_CONNECTED\n                        const transferCall = Object.values(activeCalls).filter((obj) => obj['callType'] === constants.CALL_TYPE.ADD_PARTICIPANT).pop();\n                        const event = transferCall.state === constants.CALL_STATE.TRANSFERRING ? constants.EVENT_TYPE.PARTICIPANT_ADDED : constants.EVENT_TYPE.PARTICIPANT_CONNECTED;\n                        dispatchEvent(event, {\n                            initialCallHasEnded : true\n                        })\n                    } else {\n                        dispatchEvent(constants.EVENT_TYPE.PARTICIPANT_REMOVED, {\n                            reason: call? call.reason : null\n                        }, registerLog);\n                    }\n                }\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.MESSAGE:\n            dispatchEvent(constants.EVENT_TYPE.MESSAGE, payload, registerLog);\n            break;\n        // TODO: Add validations for the ACW & Wrap up ended\n        case constants.EVENT_TYPE.AFTER_CALL_WORK_STARTED:\n            dispatchEvent(constants.EVENT_TYPE.AFTER_CALL_WORK_STARTED, payload, registerLog);\n            break;\n        case constants.EVENT_TYPE.WRAP_UP_ENDED:\n            dispatchEvent(constants.EVENT_TYPE.WRAP_UP_ENDED, payload, registerLog);\n            break;\n        /* This is only added to aid in connector development */\n        case constants.EVENT_TYPE.REMOTE_CONTROLLER:\n            channelMessageHandler(payload);\n            break;\n        case constants.EVENT_TYPE.MUTE_TOGGLE:\n            if (validatePayload(payload, MuteToggleResult, constants.ERROR_TYPE.CAN_NOT_TOGGLE_MUTE, constants.EVENT_TYPE.MUTE_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.MUTE_TOGGLE, payload, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.HOLD_TOGGLE: {\n            const { isThirdPartyOnHold, isCustomerOnHold, calls} = payload;\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.CAN_NOT_TOGGLE_HOLD, constants.EVENT_TYPE.HOLD_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.RECORDING_TOGGLE: {\n            const { isRecordingPaused,\n                contactId,\n                initialContactId,\n                instanceId,\n                region\n            } = payload;\n            if (validatePayload(payload, RecordingToggleResult, constants.ERROR_TYPE.CAN_NOT_TOGGLE_RECORD, constants.EVENT_TYPE.RECORDING_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.RECORDING_TOGGLE, {\n                    isRecordingPaused,\n                    contactId,\n                    initialContactId,\n                    instanceId,\n                    region\n                }, registerLog);\n            }\n        break;\n        }\n        case constants.EVENT_TYPE.PARTICIPANTS_SWAPPED: {\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.CAN_NOT_SWAP_PARTICIPANTS, constants.EVENT_TYPE.PARTICIPANTS_SWAPPED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold, calls } = payload;\n                dispatchEvent(constants.EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, registerLog);\n            }\n        }\n        break;\n        case constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED: {\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.CAN_NOT_CONFERENCE, constants.EVENT_TYPE.PARTICIPANTS_CONFERENCED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold } = payload;\n                dispatchEvent(constants.EVENT_TYPE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold\n                }, registerLog);\n            }\n        break;\n        }\n        case constants.EVENT_TYPE.UPDATE_AUDIO_STATS: {\n            if (validatePayload(payload, AudioStats)) {\n                if (payload.stats) {\n                    updateAudioStats(payload.stats);\n                }\n                if (payload.isAudioStatsCompleted && payload.callId) {\n                    const callId = payload.callId;\n                    const mos = getMOS();\n                    dispatchEvent(constants.EVENT_TYPE.UPDATE_AUDIO_STATS_COMPLETED, {callId, mos}, registerLog);\n                }\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.SUPERVISOR_BARGED_IN: {\n            if (validatePayload(payload, SuperviseCallResult, constants.ERROR_TYPE.CAN_NOT_BARGE_IN_SUPERVISOR, constants.EVENT_TYPE.SUPERVISOR_BARGED_IN)) {\n                dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_BARGED_IN, payload.call, registerLog);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.CALL_BARGED_IN: {\n            if (validatePayload(payload, SupervisedCallInfo,  constants.ERROR_TYPE.GENERIC_ERROR, constants.EVENT_TYPE.CALL_BARGED_IN)) {\n                dispatchEvent(constants.EVENT_TYPE.CALL_BARGED_IN, payload, registerLog);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.SUPERVISOR_CALL_STARTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, constants.EVENT_TYPE.SUPERVISOR_CALL_STARTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_CALL_STARTED, payload.call, registerLog);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.SUPERVISOR_CALL_CONNECTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.ERROR_TYPE.CAN_NOT_SUPERVISE_CALL, constants.EVENT_TYPE.SUPERVISOR_CALL_CONNECTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_CALL_CONNECTED, payload.call, registerLog);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.SUPERVISOR_HANGUP: {\n            if (validatePayload(payload, SupervisorHangupResult,  constants.ERROR_TYPE.CAN_NOT_DISCONNECT_SUPERVISOR, constants.EVENT_TYPE.SUPERVISOR_HANGUP)) {\n                isSupervisorConnected = false;\n                dispatchEvent(constants.EVENT_TYPE.SUPERVISOR_HANGUP, payload.calls, registerLog);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.SET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentStatusInfo,  constants.ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, constants.EVENT_TYPE.SET_AGENT_STATUS)) {\n                const statusId = payload.statusId;\n                dispatchEvent(constants.EVENT_TYPE.SET_AGENT_STATUS, { statusId }, registerLog);\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.EVENT_TYPE.GET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentVendorStatusInfo, constants.ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, constants.EVENT_TYPE.GET_AGENT_STATUS)) {\n                dispatchEvent(constants.EVENT_TYPE.GET_AGENT_STATUS, payload);\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.EVENT_TYPE.STATE_CHANGE: {\n            if(validatePayload(payload, StateChangeResult, constants.ERROR_TYPE.INVALID_STATE_CHANGE_RESULT, constants.EVENT_TYPE.STATE_CHANGE)) {\n                dispatchEvent(constants.EVENT_TYPE.STATE_CHANGE, payload);\n            }\n            break;\n        }\n    }\n}"],"sourceRoot":""}