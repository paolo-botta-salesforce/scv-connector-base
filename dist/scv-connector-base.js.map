{"version":3,"sources":["webpack://SCVConnectorBase/webpack/universalModuleDefinition","webpack://SCVConnectorBase/webpack/bootstrap","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/classCallCheck.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/defineProperty.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/regenerator/index.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/typeof.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/getPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/createClass.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/setPrototypeOf.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/inherits.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/wrapNativeSuper.js","webpack://SCVConnectorBase/./node_modules/regenerator-runtime/runtime.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/assertThisInitialized.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/isNativeFunction.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/construct.js","webpack://SCVConnectorBase/./node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js","webpack://SCVConnectorBase/./src/main/constants.js","webpack://SCVConnectorBase/./src/main/logger.js","webpack://SCVConnectorBase/./src/main/downloadData.js","webpack://SCVConnectorBase/./src/main/types.js","webpack://SCVConnectorBase/./src/main/mosUtil.js","webpack://SCVConnectorBase/./src/main/baseConnector.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","instance","Constructor","TypeError","obj","configurable","writable","_typeof","iterator","constructor","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","Promise","then","fn","self","args","arguments","apply","err","undefined","_getPrototypeOf","setPrototypeOf","getPrototypeOf","__proto__","_defineProperties","target","props","length","descriptor","protoProps","staticProps","_setPrototypeOf","subClass","superClass","assertThisInitialized","isNativeFunction","construct","_wrapNativeSuper","Class","_cache","Map","has","set","Wrapper","runtime","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","context","Context","_invoke","state","method","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","invoke","result","__await","unwrapped","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","awrap","async","iter","toString","keys","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function","ReferenceError","indexOf","isNativeReflectConstruct","_construct","Parent","Reflect","a","sham","Proxy","Date","e","MESSAGE_TYPE","SETUP_CONNECTOR","CONNECTOR_READY","LOG","TELEPHONY_EVENT_DISPATCHED","SET_AGENT_STATUS","GET_AGENT_STATUS","LOGOUT","MESSAGE","DOWNLOAD_VENDOR_LOGS","AGENT_WORK_EVENT","VOICE","ACCEPT_CALL","DECLINE_CALL","END_CALL","MUTE","UNMUTE","HOLD","RESUME","DIAL","SEND_DIGITS","GET_PHONE_CONTACTS","SWAP_PARTICIPANTS","ADD_PARTICIPANT","CONFERENCE","PAUSE_RECORDING","RESUME_RECORDING","SUPERVISE_CALL","SUPERVISOR_BARGE_IN","SUPERVISOR_DISCONNECT","SET_AGENT_CONFIG","GET_SIGNED_RECORDING_URL","WRAP_UP_CALL","AGENT_AVAILABLE","EVENT_TYPE","ERROR","WARNING","INFO","LOGIN_STARTED","LOGIN_RESULT","LOGOUT_RESULT","SHOW_LOGIN","SET_AGENT_STATUS_RESULT","GET_AGENT_STATUS_RESULT","STATE_CHANGE","REMOTE_CONTROLLER","SHOW_STORAGE_ACCESS","STORAGE_ACCESS_RESULT","QUEUED_CALL_STARTED","CALL_STARTED","CALL_CONNECTED","CALL_FAILED","MUTE_TOGGLE","HOLD_TOGGLE","PHONE_CONTACTS","PARTICIPANT_ADDED","PARTICIPANT_CONNECTED","PARTICIPANT_REMOVED","RECORDING_TOGGLE","PARTICIPANTS_SWAPPED","PARTICIPANTS_CONFERENCED","SIGNED_RECORDING_URL","UPDATE_AUDIO_STATS","UPDATE_AUDIO_STATS_COMPLETED","SUPERVISOR_BARGED_IN","SUPERVISOR_CALL_STARTED","SUPERVISOR_CALL_CONNECTED","SUPERVISOR_HANGUP","CALL_BARGED_IN","WRAP_UP_ENDED","AFTER_CALL_WORK_STARTED","AGENT_CONFIG_UPDATED","AGENT_ERROR","HANGUP","SOFTPHONE_ERROR","SHOW_TRANSFER_VIEW","INFO_TYPE","CAN_NOT_ACCEPT_THE_CALL","ERROR_TYPE","CAN_NOT_DECLINE_THE_CALL","CAN_NOT_END_THE_CALL","CAN_NOT_HOLD_CALL","CAN_NOT_RESUME_CALL","CAN_NOT_MUTE_CALL","CAN_NOT_UNMUTE_CALL","CAN_NOT_TOGGLE_MUTE","CAN_NOT_TOGGLE_HOLD","CAN_NOT_TOGGLE_RECORD","INVALID_PARTICIPANT","INVALID_PARAMS","CAN_NOT_GET_PHONE_CONTACTS","CAN_NOT_SWAP_PARTICIPANTS","CAN_NOT_CONFERENCE","INVALID_DESTINATION","INVALID_PHONE_NUMBER","CAN_NOT_HANGUP_PARTICIPANT","CAN_NOT_ADD_PARTICIPANT","CAN_NOT_CONNECT_PARTICIPANT","CAN_NOT_START_THE_CALL","CAN_NOT_PAUSE_RECORDING","CAN_NOT_RESUME_RECORDING","CAN_NOT_SET_AGENT_CONFIG","CAN_NOT_SET_CAPABILITIES","CAN_NOT_UPDATE_PHONE_NUMBER","CAN_NOT_GET_SIGNED_RECORDING_URL","CAN_NOT_SUPERVISE_CALL","CAN_NOT_DISCONNECT_SUPERVISOR","CAN_NOT_BARGE_IN_SUPERVISOR","CAN_NOT_BARGE_IN_CALL","MICROPHONE_NOT_SHARED","UNSUPPORTED_BROWSER","CUSTOM_ERROR","GENERIC_ERROR","AUTHENTICATION_ERROR","INVALID_AGENT_STATUS","CAN_NOT_GET_AGENT_STATUS","CAN_NOT_SET_AGENT_STATUS","LOGIN_REQUIRED","CAN_NOT_LOG_IN","CAN_NOT_LOG_OUT","INVALID_STATE_CHANGE_RESULT","INVALID_STORAGE_ACCESS_RESULT","AGENT_STATUS","ONLINE","OFFLINE","ACW","CALLBACK_MISSED_OR_REJECTED","PARTICIPANT_TYPE","AGENT","INITIAL_CALLER","THIRD_PARTY","SUPERVISOR","CALL_TYPE","INBOUND","OUTBOUND","CALLBACK","TRANSFER","INTERNAL_CALL","DIALED_CALLBACK","DIALER_TYPE","OUTBOUND_PREVIEW","NONE","CONTACT_TYPE","PHONEBOOK","QUEUE","PHONENUMBER","FLOW","AGENT_CONFIG_TYPE","SHOW_AGENT_SETTINGS","PHONES","SELECTED_PHONE","CAPABILITIES_TYPE","RECORD","MERGE","SWAP","DEBUG_ENABLED","CONTACT_SEARCH","VENDOR_PROVIDED_AVAILABILITY","VENDOR_PROVIDED_QUEUE_WAIT_TIME","SUPERVISOR_LISTEN_IN","MOS","BLIND_TRANSFER","TRANSFER_TO_OMNI_FLOW","PENDING_STATUS_CHANGE","CALL_STATE","RINGING","CONNECTED","TRANSFERRING","TRANSFERRED","ENDED","PHONE_TYPE","DESK_PHONE","SOFT_PHONE","HANGUP_REASON","PHONE_CALL_ERROR","PHONE_CALL_ENDED","AGENT_AVAILABILITY","AVAILABLE","BUSY","REMOVE_PARTICIPANT_VARIANT","ALWAYS","NEVER","ALWAYS_EXCEPT_ON_HOLD","LOG_LEVEL","LOG_SOURCE","SYSTEM","PARTNER","CONTACTS_FILTER_TYPES","CONTACT","DIRECTORY","WORK_EVENT","ASSIGNED","ACCEPTED","DECLINED","COMPLETED","CLOSED","DIAL_OPTIONS","CONNECTOR_CONFIG_EXPOSED_FIELDS","CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH","CONNECTOR_CONFIG_EXCEPTION_FIELDS","_strify","JSON","stringify","LOGS_SIZE","logs","log","logMessage","logLevel","logSource","constants","logStr","toISOString","join","_log","getLogs","parse","downloadLogs","data","fileName","fileType","document","dataStr","file","Blob","createElement","blobURL","URL","createObjectURL","download","href","body","appendChild","click","removeChild","revokeObjectURL","downloadData","getTime","audioStatus","channelPort","vendorConnector","isSupervisorConnected","Constants","CustomError","labelName","namespace","message","Validator","validateString","Phone","number","validateEnum","MuteToggleResult","isMuted","ActiveCallsResult","activeCalls","activeCall","validateClassObject","PhoneCall","CapabilitiesResult","hasMute","hasRecord","hasMerge","hasSwap","hasSignedRecordingUrl","debugEnabled","hasContactSearch","hasAgentAvailability","hasQueueWaitTime","supportsMos","hasSupervisorListenIn","hasSupervisorBargeIn","hasBlindTransfer","hasTransferToOmniFlow","hasPendingStatusChange","hasPhoneBook","validateBoolean","AgentConfigResult","phones","selectedPhone","Array","AgentConfig","RecordingToggleResult","isRecordingPaused","contactId","initialContactId","instanceId","region","ParticipantResult","initialCallHasEnded","callInfo","phoneNumber","callId","CallInfo","PhoneContactsResult","contacts","contactTypes","contact","Contact","filterType","CallResult","HangupResult","calls","HoldToggleResult","isThirdPartyOnHold","isCustomerOnHold","SignedRecordingUrlResult","success","url","duration","validateNumber","InitResult","showLogin","loginFrameHeight","isSilentLogin","showStorageAccess","DialOptions","isCallback","GenericResult","LogoutResult","callStateTimestamp","isOnHold","initialCallId","queueId","queueName","queueTimestamp","isSoftphoneCall","acceptEnabled","declineEnabled","muteEnabled","swapEnabled","conferenceEnabled","holdEnabled","recordEnabled","addCallerEnabled","extensionEnabled","isReplayable","isBargeable","isExternalTransfer","showMuteButton","showRecordButton","showAddCallerButton","showAddBlindTransferButton","showMergeButton","showSwapButton","removeParticipantVariant","additionalFields","isMultiParty","validateDate","id","prefix","extension","endpointARN","queue","availability","recordId","description","queueWaitTime","PhoneCallAttributes","voiceCallId","participantType","dialerType","parentId","hasSupervisorBargedIn","callType","callAttributes","reason","closeCallOnError","agentStatus","TelephonyConnector","dialOptions","digits","call1","call2","parentCall","isBlindTransfer","config","recordingUrl","vendorCallKey","VendorConnector","agentWork","statusInfo","enqueueNextState","logMessageToVendor","payload","enumValues","RegExp","test","className","AgentWork","workItemId","workId","workEvent","AgentStatusInfo","statusId","statusApiName","statusName","AgentVendorStatusInfo","statusType","StateChangeResult","newVendorStateInfo","oldVendorStateInfo","SupervisedCallInfo","from","to","supervisorName","isBargedIn","AudioStats","stats","isAudioStatsCompleted","audioStatsElement","AudioStatsElement","inputChannelStats","outputChannelStats","StatsInfo","packetsCount","packetsLost","jitterBufferMillis","roundTripTimeMillis","statsCount","SuperviseCallResult","SupervisorHangupResult","ShowStorageAccessResult","getMOSByStream","streamType","avgStats","getAvgStats","effectiveLatency","R","enableMos","getMOS","inputChannelMOS","ouputChannelMOS","Math","min","initAudioStats","updateAudioStats","statsArray","getErrorType","getErrorMessage","dispatchEventLog","eventType","isError","sanitizedPayload","sanitizePayload","isArray","element","postMessage","dispatchEvent","registerLog","telephonyEventType","telephonyEventPayload","dispatchError","errorType","console","dispatchCustomError","customError","dispatchInfo","setConnectorReady","getTelephonyConnector","telephonyConnector","getAgentConfig","agentConfigResult","getCapabilities","capabilitiesResult","getActiveCalls","activeCallsResult","agentConfig","capabilities","callInProgress","channelMessageHandler","toLowerCase","supervisorDisconnect","hangupPayload","acceptCall","messagetype","additionalInfo","declineCall","endCall","mute","publishEvent","unmute","hold","resume","setAgentStatus","getAgentStatus","params","dial","sendDigits","getPhoneContacts","filter","map","swap","callToHold","callToResume","conference","addParticipant","pauseRecording","resumeRecording","logout","handleMessage","wrapUpCall","isAvailable","shouldReplay","isSupervisorCall","isReplayedCall","setAgentConfig","getSignedRecordingUrl","signedRecordingUrlResult","superviseCall","supervisorBargeIn","onAgentWorkEvent","windowMessageHandler","sfDomain","originUrl","origin","protocol","hostname","ports","onmessage","exposedConnectorConfig","connectorConfig","init","window","removeEventListener","prop","startsWith","includes","validatePayload","payloadType","initializeConnector","connector","addEventListener","publishLog","publishError","transferCall","mos"],"mappings":"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","file":"scv-connector-base.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SCVConnectorBase\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SCVConnectorBase\"] = factory();\n\telse\n\t\troot[\"SCVConnectorBase\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","module.exports = require(\"regenerator-runtime\");\n","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nvar setPrototypeOf = require(\"./setPrototypeOf\");\n\nvar isNativeFunction = require(\"./isNativeFunction\");\n\nvar construct = require(\"./construct\");\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  module.exports = _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nmodule.exports = _wrapNativeSuper;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nmodule.exports = _isNativeFunction;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nvar isNativeReflectConstruct = require(\"./isNativeReflectConstruct\");\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    module.exports = _construct = Reflect.construct;\n  } else {\n    module.exports = _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nmodule.exports = _construct;","function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nmodule.exports = _isNativeReflectConstruct;","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nexport default {\n    MESSAGE_TYPE: {\n        // Framework Message Types\n        SETUP_CONNECTOR: 'SETUP_CONNECTOR',\n        CONNECTOR_READY: 'CONNECTOR_READY',\n        LOG: 'LOG',\n        TELEPHONY_EVENT_DISPATCHED: 'TELEPHONY_EVENT_DISPATCHED',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        LOGOUT: 'LOGOUT',\n        MESSAGE: 'MESSAGE',\n        DOWNLOAD_VENDOR_LOGS: 'DOWNLOAD_VENDOR_LOGS',\n        AGENT_WORK_EVENT: 'AGENT_WORK_EVENT',\n\n        // Telephony Message Types: sent from SFDC to Telephony Vendor\n        VOICE: {\n            ACCEPT_CALL: 'ACCEPT_CALL',\n            DECLINE_CALL: 'DECLINE_CALL',\n            END_CALL: 'END_CALL',\n            MUTE: 'MUTE',\n            UNMUTE: 'UNMUTE',\n            HOLD: 'HOLD',\n            RESUME: 'RESUME',\n            DIAL: 'DIAL',\n            SEND_DIGITS: 'SEND_DIGITS',\n            GET_PHONE_CONTACTS: 'GET_PHONE_CONTACTS',\n            SWAP_PARTICIPANTS: 'SWAP_PARTICIPANTS',\n            ADD_PARTICIPANT: 'ADD_PARTICIPANT',\n            CONFERENCE: 'CONFERENCE',\n            PAUSE_RECORDING: 'PAUSE_RECORDING',\n            RESUME_RECORDING: 'RESUME_RECORDING',\n            SUPERVISE_CALL: 'SUPERVISE_CALL',\n            SUPERVISOR_BARGE_IN : 'SUPERVISOR_BARGE_IN',\n            SUPERVISOR_DISCONNECT: 'SUPERVISOR_DISCONNECT',\n            SET_AGENT_CONFIG: 'SET_AGENT_CONFIG',\n            GET_SIGNED_RECORDING_URL: 'GET_SIGNED_RECORDING_URL',\n            WRAP_UP_CALL: 'WRAP_UP_CALL',\n            AGENT_AVAILABLE: 'AGENT_AVAILABLE'\n        }\n    },\n    EVENT_TYPE: {\n        ERROR: 'ERROR',\n        WARNING: 'WARNING',\n        INFO: 'INFO',\n        LOGIN_STARTED: 'LOGIN_STARTED',\n        LOGIN_RESULT: 'LOGIN_RESULT', // info about timeout, error, success etc\n        LOGOUT_RESULT: 'LOGOUT_RESULT',\n        SHOW_LOGIN: 'SHOW_LOGIN',\n        SET_AGENT_STATUS_RESULT: 'SET_AGENT_STATUS_RESULT',\n        GET_AGENT_STATUS_RESULT: 'GET_AGENT_STATUS_RESULT',\n        MESSAGE: 'MESSAGE',\n        SET_AGENT_STATUS: 'SET_AGENT_STATUS',\n        GET_AGENT_STATUS: 'GET_AGENT_STATUS',\n        STATE_CHANGE: 'STATE_CHANGE',\n        REMOTE_CONTROLLER: 'REMOTE_CONTROLLER',\n        SHOW_STORAGE_ACCESS: 'SHOW_STORAGE_ACCESS',\n        STORAGE_ACCESS_RESULT: 'STORAGE_ACCESS_RESULT',\n        VOICE: {\n            QUEUED_CALL_STARTED: 'QUEUED_CALL_STARTED',\n            CALL_STARTED: 'CALL_STARTED',\n            CALL_CONNECTED: 'CALL_CONNECTED',\n            CALL_FAILED: 'CALL_FAILED',\n            MUTE_TOGGLE: 'MUTE_TOGGLE',\n            HOLD_TOGGLE: 'HOLD_TOGGLE',\n            PHONE_CONTACTS: 'PHONE_CONTACTS',\n            PARTICIPANT_ADDED: 'PARTICIPANT_ADDED',\n            PARTICIPANT_CONNECTED: 'PARTICIPANT_CONNECTED',\n            PARTICIPANT_REMOVED: 'PARTICIPANT_REMOVED',\n            RECORDING_TOGGLE: 'RECORDING_TOGGLE',\n            PARTICIPANTS_SWAPPED: 'PARTICIPANTS_SWAPPED',\n            PARTICIPANTS_CONFERENCED: 'PARTICIPANTS_CONFERENCED',\n            SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n            UPDATE_AUDIO_STATS: 'UPDATE_AUDIO_STATS',\n            UPDATE_AUDIO_STATS_COMPLETED: 'UPDATE_AUDIO_STATS_COMPLETED',\n            SUPERVISOR_BARGED_IN: 'SUPERVISOR_BARGED_IN',\n            SUPERVISOR_CALL_STARTED : 'SUPERVISOR_CALL_STARTED',\n            SUPERVISOR_CALL_CONNECTED: 'SUPERVISOR_CALL_CONNECTED',\n            SUPERVISOR_HANGUP : 'SUPERVISOR_HANGUP',\n            CALL_BARGED_IN : 'CALL_BARGED_IN',\n            WRAP_UP_ENDED: 'WRAP_UP_ENDED',\n            AFTER_CALL_WORK_STARTED: 'AFTER_CALL_WORK_STARTED',\n            AGENT_CONFIG_UPDATED: 'AGENT_CONFIG_UPDATED',\n            AGENT_ERROR: 'AGENT_ERROR',\n            HANGUP: 'HANGUP',\n            SOFTPHONE_ERROR: 'SOFTPHONE_ERROR',\n            SHOW_TRANSFER_VIEW: 'SHOW_TRANSFER_VIEW'\n        }\n    },\n    INFO_TYPE: {\n        VOICE: {\n            CAN_NOT_ACCEPT_THE_CALL: 'CAN_NOT_ACCEPT_THE_CALL'\n        }\n    },\n    ERROR_TYPE: {\n        VOICE: {\n            CAN_NOT_DECLINE_THE_CALL: 'CAN_NOT_DECLINE_THE_CALL',\n            CAN_NOT_END_THE_CALL: 'CAN_NOT_END_THE_CALL',\n            CAN_NOT_HOLD_CALL: 'CAN_NOT_HOLD_CALL',\n            CAN_NOT_RESUME_CALL: 'CAN_NOT_RESUME_CALL',\n            CAN_NOT_MUTE_CALL: 'CAN_NOT_MUTE_CALL',\n            CAN_NOT_UNMUTE_CALL: 'CAN_NOT_UNMUTE_CALL',\n            CAN_NOT_TOGGLE_MUTE: 'CAN_NOT_TOGGLE_MUTE',\n            CAN_NOT_TOGGLE_HOLD: 'CAN_NOT_TOGGLE_HOLD',\n            CAN_NOT_TOGGLE_RECORD: 'CAN_NOT_TOGGLE_RECORD',\n            INVALID_PARTICIPANT: 'INVALID_PARTICIPANT',\n            INVALID_PARAMS: 'INVALID_PARAMS',\n            CAN_NOT_GET_PHONE_CONTACTS: 'CAN_NOT_GET_PHONE_CONTACTS',\n            CAN_NOT_SWAP_PARTICIPANTS: 'CAN_NOT_SWAP_PARTICIPANTS',\n            CAN_NOT_CONFERENCE: 'CAN_NOT_CONFERENCE',\n            INVALID_DESTINATION: 'INVALID_DESTINATION',\n            INVALID_PHONE_NUMBER: 'INVALID_PHONE_NUMBER',\n            CAN_NOT_HANGUP_PARTICIPANT: 'CAN_NOT_HANGUP_PARTICIPANT',\n            CAN_NOT_ADD_PARTICIPANT: 'CAN_NOT_ADD_PARTICIPANT',\n            CAN_NOT_CONNECT_PARTICIPANT: 'CAN_NOT_CONNECT_PARTICIPANT',\n            CAN_NOT_START_THE_CALL: 'CAN_NOT_START_THE_CALL',\n            CAN_NOT_PAUSE_RECORDING: 'CAN_NOT_PAUSE_RECORDING',\n            CAN_NOT_RESUME_RECORDING: 'CAN_NOT_RESUME_RECORDING',\n            CAN_NOT_SET_AGENT_CONFIG: 'CAN_NOT_SET_AGENT_CONFIG',\n            CAN_NOT_SET_CAPABILITIES: 'CAN_NOT_SET_CAPABILITIES',\n            CAN_NOT_UPDATE_PHONE_NUMBER: 'CAN_NOT_UPDATE_PHONE_NUMBER',\n            CAN_NOT_GET_SIGNED_RECORDING_URL: 'CAN_NOT_GET_SIGNED_RECORDING_URL',\n            CAN_NOT_SUPERVISE_CALL : 'CAN_NOT_SUPERVISE_CALL',\n            CAN_NOT_DISCONNECT_SUPERVISOR : 'CAN_NOT_DISCONNECT_SUPERVISOR',\n            CAN_NOT_BARGE_IN_SUPERVISOR: 'CAN_NOT_BARGE_IN_SUPERVISOR',\n            CAN_NOT_BARGE_IN_CALL: 'CAN_NOT_BARGE_IN_CALL',\n            AGENT_ERROR: 'AGENT_ERROR',\n            MICROPHONE_NOT_SHARED: 'MICROPHONE_NOT_SHARED',\n            UNSUPPORTED_BROWSER: 'UNSUPPORTED_BROWSER'\n        },\n        CUSTOM_ERROR: 'CUSTOM_ERROR',\n        GENERIC_ERROR: 'GENERIC_ERROR',\n        AUTHENTICATION_ERROR: 'AUTHENTICATION_ERROR',\n        INVALID_AGENT_STATUS: 'INVALID_AGENT_STATUS',\n        CAN_NOT_GET_AGENT_STATUS: 'CAN_NOT_GET_AGENT_STATUS',\n        CAN_NOT_SET_AGENT_STATUS: 'CAN_NOT_SET_AGENT_STATUS',\n        LOGIN_REQUIRED: 'LOGIN_REQUIRED',\n        CAN_NOT_LOG_IN: 'CAN_NOT_LOG_IN',\n        CAN_NOT_LOG_OUT: 'CAN_NOT_LOG_OUT',\n        INVALID_STATE_CHANGE_RESULT: 'INVALID_STATE_CHANGE_RESULT',\n        INVALID_STORAGE_ACCESS_RESULT: 'INVALID_STORAGE_ACCESS_RESULT'\n    },\n    AGENT_STATUS: {\n        ONLINE: 'Online',\n        OFFLINE: 'Offline',\n        ACW : 'AfterCallWork',\n        CALLBACK_MISSED_OR_REJECTED: 'CallbackMissedOrRejected' // Used only for Amazon; workaround for https://github.com/amazon-connect/amazon-connect-streams/issues/344\n    },\n    PARTICIPANT_TYPE: {\n        AGENT: 'Agent',\n        INITIAL_CALLER: 'Initial_Caller',\n        THIRD_PARTY: 'Third_Party',\n        SUPERVISOR: 'Supervisor'\n    },\n    CALL_TYPE: {\n        INBOUND: 'Inbound',\n        OUTBOUND: 'Outbound',\n        CALLBACK: 'Callback',\n        ADD_PARTICIPANT: 'AddParticipant',\n        TRANSFER:'Transfer',\n        INTERNAL_CALL: 'InternalCall',\n        DIALED_CALLBACK: 'DialedCallback'\n    },\n    DIALER_TYPE: {\n        OUTBOUND_PREVIEW: 'OutboundPreview',\n        NONE: 'None'\n    },\n    CONTACT_TYPE: {\n        PHONEBOOK: 'PhoneBook',\n        QUEUE: 'Queue',\n        PHONENUMBER: 'PhoneNumber',\n        AGENT: 'Agent',\n        FLOW: 'Flow'\n    },\n    AGENT_CONFIG_TYPE: {\n        SHOW_AGENT_SETTINGS: 'SHOW_AGENT_SETTINGS',\n        PHONES: 'PHONES',\n        SELECTED_PHONE: 'SELECTED_PHONE'\n    },\n    CAPABILITIES_TYPE: {\n        MUTE: 'MUTE',\n        RECORD: 'RECORD',\n        MERGE: 'MERGE',\n        SWAP: 'SWAP',\n        SIGNED_RECORDING_URL: 'SIGNED_RECORDING_URL',\n        DEBUG_ENABLED: 'DEBUG_ENABLED',\n        CONTACT_SEARCH: 'CONTACT_SEARCH',\n        VENDOR_PROVIDED_AVAILABILITY: 'VENDOR_PROVIDED_AVAILABILITY',\n        VENDOR_PROVIDED_QUEUE_WAIT_TIME: 'VENDOR_PROVIDED_QUEUE_WAIT_TIME',\n        SUPERVISOR_LISTEN_IN: 'SUPERVISOR_LISTEN_IN',\n        SUPERVISOR_BARGE_IN: 'SUPERVISOR_BARGE_IN',\n        MOS: 'MOS',\n        BLIND_TRANSFER: 'BLIND_TRANSFER',\n        TRANSFER_TO_OMNI_FLOW: 'TRANSFER_TO_OMNI_FLOW',\n        PENDING_STATUS_CHANGE: 'PENDING_STATUS_CHANGE',\n        PHONEBOOK: 'PHONEBOOK'\n    },\n    CALL_STATE: {\n        RINGING: 'ringing',\n        CONNECTED: 'connected',\n        TRANSFERRING: 'transferring',\n        TRANSFERRED: 'transferred',\n        ENDED: 'ended'\n    },\n    PHONE_TYPE: {\n        DESK_PHONE: 'DESK_PHONE',\n        SOFT_PHONE: 'SOFT_PHONE'\n    },\n    HANGUP_REASON: {\n        PHONE_CALL_ERROR: \"error\",\n        PHONE_CALL_ENDED: \"ended\"\n    },\n    AGENT_AVAILABILITY: {\n        AVAILABLE: \"AVAILABLE\",\n        BUSY: \"BUSY\",\n        OFFLINE: \"OFFLINE\"\n    },\n    REMOVE_PARTICIPANT_VARIANT: {\n        ALWAYS : 'ALWAYS',\n        NEVER: 'NEVER',\n        ALWAYS_EXCEPT_ON_HOLD: 'ALWAYS_EXCEPT_ON_HOLD'\n    },\n    LOG_LEVEL: {\n        ERROR: \"ERROR\",\n        INFO: \"INFO\"\n    },\n    LOG_SOURCE: {\n        SYSTEM: \"SYSTEM\",\n        PARTNER: \"PARTNER\"\n    },\n    CONTACTS_FILTER_TYPES: {\n        AGENT: \"AGENT\",\n        QUEUE: \"QUEUE\",\n        CONTACT: \"CONTACT\",\n        DIRECTORY: \"DIRECTORY\",\n        FLOW: \"FLOW\",\n        AVAILABLE: \"AVAILABLE\"\n    },\n    WORK_EVENT: {\n        ASSIGNED: 'ASSIGNED',\n        ACCEPTED: 'ACCEPTED',\n        DECLINED: 'DECLINED',\n        COMPLETED: 'COMPLETED',\n        CLOSED: 'CLOSED'\n    },\n    DIAL_OPTIONS: {\n        CALLBACK: \"isCallback=true\"\n    }\n};\n\n/**\n * Fields in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS = [\n    \"/internalNameLabel\",\n    \"/reqGeneralInfo/reqAdapterUrl\",\n    \"/reqGeneralInfo/reqVendorInfoApiName\",\n    \"isACWAllowed\",\n    \"isHVSEnabled\",\n    \"orgDomainName\",\n    \"phoneServiceChannelId\",\n    \"telephonySettingsComponentFqn\"\n];\n\n/**\n * Fields that starts with string in the connector configuration that are logged. \n */\nexport const CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH = [\n    \"/reqHvcc\"\n];\n\n/**\n * Fields in the connector configuration that are NOT logged. \n */\nexport const CONNECTOR_CONFIG_EXCEPTION_FIELDS = [\n    \"/reqHvcc/reqTelephonyIntegrationCertificate\"\n];\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\nimport { downloadData } from './downloadData.js';\nimport constants from './constants';\n\n//The max size of the logs in # of characaters\nconst MAX_LOGS_SIZE = 1.5e7/2; //15 MB or 7.5M characters\n\nconst _strify = obj => (typeof obj === 'string') ? obj : JSON.stringify(obj);\n\nlet LOGS_SIZE = 0;\nlet logs = [];\n\nfunction _log(logLevel, logMessage, logSource) {\n    if(!logMessage) {\n        throw new Error(\"Log Message required\");\n    }\n    logLevel  = logLevel  || constants.LOG_LEVEL.INFO;\n    logSource = logSource || constants.LOG_SOURCE.PARTNER;\n\n    const logStr = [new Date().toISOString(), _strify(logLevel), _strify(logSource), `${_strify(logMessage)}\\n`].join(\"|\");\n    \n    //If logs size is greater than max size, empty it.\n    if(LOGS_SIZE + logStr.length >= MAX_LOGS_SIZE) {\n        logs = []; \n        LOGS_SIZE = 0;\n    }\n    LOGS_SIZE += logStr.length;\n    logs.push(logStr);\n}\n\n/**\n * Log a message at a custom level.\n * @param {object} logMessage\n * @param {string} logLevel \n * @param {string} [logSource]\n */\nexport function log(logMessage, logLevel, logSource) {\n    _log(logLevel, logMessage, logSource);\n}\n\n/**\n * \n * @returns a deep copy of the logs array\n */\nexport function getLogs() {\n    return JSON.parse(JSON.stringify(logs));\n}\n\n/**\n * Download the logs as a file\n */\nexport function downloadLogs() {\n    downloadData(logs.join(''), `log-${new Date().getTime()}.txt`, 'text/plain');\n}\n","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * Download data as a file.\n * @param {object} data \n * @param {string} fileName \n * @param {string} fileType\n */\n export function downloadData(data, fileName, fileType) {\n    if(!document || !data) return;\n    \n    const dataStr = (typeof data === 'string') ? data : JSON.stringify(data);\n    const file = new Blob([dataStr], {type: fileType});\n    let a = document.createElement(\"a\") \n    const blobURL = URL.createObjectURL(file);\n    a.download = fileName;\n    a.href = blobURL;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(blobURL);\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { downloadLogs } from './logger.js';\n\nexport const Constants = {\n    /**\n    * @enum {string}\n    */\n    EVENT_TYPE: {\n        VOICE: {\n            CALL_STARTED: constants.EVENT_TYPE.VOICE.CALL_STARTED,\n            QUEUED_CALL_STARTED: constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED,\n            CALL_CONNECTED: constants.EVENT_TYPE.VOICE.CALL_CONNECTED,\n            HANGUP: constants.EVENT_TYPE.VOICE.HANGUP,\n            MUTE_TOGGLE: constants.EVENT_TYPE.VOICE.MUTE_TOGGLE,\n            HOLD_TOGGLE: constants.EVENT_TYPE.VOICE.HOLD_TOGGLE,\n            RECORDING_TOGGLE: constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE,\n            PARTICIPANTS_SWAPPED: constants.EVENT_TYPE.VOICE.PARTICIPANTS_SWAPPED,\n            PARTICIPANTS_CONFERENCED: constants.EVENT_TYPE.VOICE.PARTICIPANTS_CONFERENCED,\n            PARTICIPANT_ADDED: constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED, \n            PARTICIPANT_CONNECTED: constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED,\n            PARTICIPANT_REMOVED: constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED,\n            AFTER_CALL_WORK_STARTED: constants.EVENT_TYPE.VOICE.AFTER_CALL_WORK_STARTED,\n            WRAP_UP_ENDED: constants.EVENT_TYPE.VOICE.WRAP_UP_ENDED,\n            AGENT_ERROR: constants.EVENT_TYPE.VOICE.AGENT_ERROR,\n            SOFTPHONE_ERROR: constants.EVENT_TYPE.VOICE.SOFTPHONE_ERROR,\n            UPDATE_AUDIO_STATS: constants.EVENT_TYPE.VOICE.UPDATE_AUDIO_STATS,\n            SUPERVISOR_BARGED_IN: constants.EVENT_TYPE.VOICE.SUPERVISOR_BARGED_IN,\n            SUPERVISOR_CALL_STARTED : constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_STARTED,\n            SUPERVISOR_CALL_CONNECTED: constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_CONNECTED,\n            SUPERVISOR_HANGUP : constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP,\n            SHOW_TRANSFER_VIEW: constants.EVENT_TYPE.VOICE.SHOW_TRANSFER_VIEW\n        },\n        LOGIN_RESULT: constants.EVENT_TYPE.LOGIN_RESULT,\n        LOGOUT_RESULT: constants.EVENT_TYPE.LOGOUT_RESULT,\n        MESSAGE: constants.EVENT_TYPE.MESSAGE,\n        SET_AGENT_STATUS: constants.EVENT_TYPE.SET_AGENT_STATUS,\n        GET_AGENT_STATUS: constants.EVENT_TYPE.GET_AGENT_STATUS,\n        STATE_CHANGE: constants.EVENT_TYPE.STATE_CHANGE,\n        STORAGE_ACCESS_RESULT: constants.EVENT_TYPE.STORAGE_ACCESS_RESULT\n    },\n    /**\n    * @enum {string}\n    */\n    ERROR_TYPE: {\n        VOICE: {\n            INVALID_PARTICIPANT: constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT,\n            INVALID_DESTINATION: constants.ERROR_TYPE.VOICE.INVALID_DESTINATION,\n            CAN_NOT_UPDATE_PHONE_NUMBER: constants.ERROR_TYPE.VOICE.CAN_NOT_UPDATE_PHONE_NUMBER,\n            INVALID_PARAMS: constants.ERROR_TYPE.VOICE.INVALID_PARAMS\n        },\n        GENERIC_ERROR: constants.ERROR_TYPE.GENERIC_ERROR,\n        INVALID_AGENT_STATUS: constants.ERROR_TYPE.INVALID_AGENT_STATUS\n    },\n    /**\n    * @enum {string}\n    */\n    AGENT_STATUS: { ...constants.AGENT_STATUS },\n    /**\n    * @enum {string}\n    */\n    PARTICIPANT_TYPE: { ...constants.PARTICIPANT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_TYPE: { ...constants.CALL_TYPE },\n    /**\n    * @enum {string}\n    */\n    DIALER_TYPE: { ...constants.DIALER_TYPE },\n    /**\n    * @enum {string}\n    */\n    CONTACT_TYPE: { ...constants.CONTACT_TYPE },\n    /**\n    * @enum {string}\n    */\n    CALL_STATE: { ...constants.CALL_STATE },\n    /**\n    * @enum {string}\n    */\n    HANGUP_REASON: { ...constants.HANGUP_REASON },\n    /**\n    * @enum {string}\n    */\n    PHONE_TYPE: { ...constants.PHONE_TYPE },\n    /**\n     * @enum {String}\n     */\n    AGENT_AVAILABILITY: { ...constants.AGENT_AVAILABILITY },\n    /**\n     * @enum (String)\n     */\n    REMOVE_PARTICIPANT_VARIANT: { ...constants.REMOVE_PARTICIPANT_VARIANT },\n    /**\n     * @enum {String}\n     */\n    LOG_LEVEL: { ...constants.LOG_LEVEL },\n    /**\n     * @enum {String}\n     */\n    CONTACTS_FILTER_TYPES: { ...constants.CONTACTS_FILTER_TYPES },\n    /**\n     * @enum {String}\n     */\n    WORK_EVENT: { ...constants.WORK_EVENT }\n};\n\n/**\n * Class representing a Custom Error\n */\nexport class CustomError extends Error {\n    /**\n     * Create Phone\n     * @param {object} param\n     * @param {String} param.labelName\n     * @param {String} param.namespace\n     * @param {String} [param.message]\n     */\n    constructor({ labelName, namespace, message }) {\n        super(message);\n\n        Validator.validateString(labelName);\n        Validator.validateString(namespace);\n        if (message) {\n            Validator.validateString(message);\n        }\n        this.labelName = labelName;\n        this.namespace = namespace;\n        this.message = message;\n    }\n}\n\n/**\n * Class representing a Phone type\n */\n export class Phone {\n    /**\n     * Create Phone\n     * @param {object} param\n     * @param {PHONE_TYPE} param.type\n     * @param {string} [param.number]\n     */\n    constructor({ type, number}) {\n        Validator.validateEnum(type, Object.values(constants.PHONE_TYPE));\n        if(number) {\n            Validator.validateString(number);\n        }\n        this.type = type;\n        this.number = number;\n    }\n}\n\n/**\n * Class representing result type for mute() & unmute()\n */\nexport class MuteToggleResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {boolean} param.isMuted\n     */\n    constructor({ isMuted }) {\n        this.isMuted = isMuted;\n    }\n}\n\n/**\n * Class representing result type for getActiveCalls()\n */\nexport class ActiveCallsResult {\n    /**\n     * Create ActiveCallsResult\n     * @param {object} param\n     * @param {PhoneCall[]} [param.activeCalls]\n     */\n    constructor({ activeCalls = [] }) {\n        if (activeCalls.length > 0) {\n            activeCalls.forEach(activeCall => {\n                Validator.validateClassObject(activeCall, PhoneCall);\n            });\n        }\n        this.activeCalls = activeCalls;\n    }\n}\n\n/**\n * Class representing result type for getCapabilities()\n */\nexport class CapabilitiesResult {\n    /**\n     * Create CapabilitiesResult\n     * @param {object} param\n     * @param {boolean} [param.hasMute]\n     * @param {boolean} [param.hasRecord]\n     * @param {boolean} [param.hasMerge]\n     * @param {boolean} [param.hasSwap]\n     * @param {boolean} [param.hasSignedRecordingUrl]\n     * @param {boolean} [param.debugEnabled]\n     * @param {boolean} [param.hasContactSearch] True if getPhoneContacts uses the 'contain' filter\n     * @param {boolean} [param.hasAgentAvailability] True if getPhoneContacts also provides agent availability, false if Salesforce provides it.\n     * @param {boolean} [param.hasQueueWaitTime] True if getPhoneContacts also provides estimated queue wait time, false if Salesforce provides it.\n     * @param {boolean} [param.supportsMos] True if vendor support MOS\n     * @param {boolean} [param.hasSupervisorListenIn] True if vendor supports supervisor listening  to a ongoing call\n     * @param {boolean} [param.hasSupervisorBargeIn] True if vendor supports Supervisor  barging into a ongoing call\n     * @param {boolean} [param.hasBlindTransfer] True if vendor supports blind transfers\n     * @param {boolean} [param.hasBlindTransfer] True if vendor supports transfer to omni flows\n     * @param {boolean} [param.hasPendingStatusChange] True if vendor supports Pending Status Change\n     * @param {boolean} [param.hasPhoneBook] True if vendor supports the phoneBook UI\n     */\n     constructor({ hasMute = true, hasRecord = true, hasMerge = true, hasSwap = true, hasSignedRecordingUrl = false, debugEnabled = true, hasContactSearch = false, hasAgentAvailability = false, hasQueueWaitTime = false, supportsMos = false, hasSupervisorListenIn = false, hasSupervisorBargeIn = false, hasBlindTransfer = false, hasTransferToOmniFlow = false, hasPendingStatusChange=false, hasPhoneBook=false }) {\n        Validator.validateBoolean(hasMute);\n        Validator.validateBoolean(hasRecord);\n        Validator.validateBoolean(hasMerge);\n        Validator.validateBoolean(hasSwap);\n        Validator.validateBoolean(hasSignedRecordingUrl);\n        Validator.validateBoolean(debugEnabled);\n        Validator.validateBoolean(hasContactSearch);\n        Validator.validateBoolean(hasAgentAvailability);\n        Validator.validateBoolean(hasQueueWaitTime);\n        Validator.validateBoolean(supportsMos);\n        Validator.validateBoolean(hasSupervisorListenIn);\n        Validator.validateBoolean(hasSupervisorBargeIn);\n        Validator.validateBoolean(hasBlindTransfer);\n        Validator.validateBoolean(hasTransferToOmniFlow);\n        Validator.validateBoolean(hasPendingStatusChange);\n        Validator.validateBoolean(hasPhoneBook);\n\n        this.hasMute = hasMute;\n        this.hasRecord = hasRecord;\n        this.hasMerge = hasMerge;\n        this.hasSwap = hasSwap;\n        this.hasSignedRecordingUrl = hasSignedRecordingUrl;\n        this.debugEnabled = debugEnabled;\n        this.hasContactSearch = hasContactSearch;\n        this.hasAgentAvailability = hasAgentAvailability;\n        this.hasQueueWaitTime = hasQueueWaitTime;\n        this.supportsMos = supportsMos;\n        this.hasSupervisorListenIn = hasSupervisorListenIn;\n        this.hasSupervisorBargeIn = hasSupervisorBargeIn;\n        this.hasBlindTransfer = hasBlindTransfer;\n        this.hasTransferToOmniFlow = hasTransferToOmniFlow;\n        this.hasPendingStatusChange = hasPendingStatusChange;\n        this.hasPhoneBook = hasPhoneBook;\n    }\n}\n\n/**\n * Class representing result type for getAgentConfig()\n */\nexport class AgentConfigResult {\n    /**\n     * Create AgentConfigResult\n     * @param {object} param\n     * @param {Phone[]} [param.phones]\n     * @param {Phone} [param.selectedPhone]\n     */\n    constructor({ phones = [constants.PHONE_TYPE.SOFT_PHONE], selectedPhone = new Phone({type: constants.PHONE_TYPE.SOFT_PHONE}) }) {\n        Validator.validateClassObject(phones, Array);\n        Validator.validateClassObject(selectedPhone, Phone);\n\n        this.phones = phones;\n        this.selectedPhone = selectedPhone;\n    }\n}\n\n/**\n * Class representing AgentConfig type for setAgentConfig()\n */\nexport class AgentConfig {\n    /**\n     * Create AgentConfig\n     * @param {object} param\n     * @param {Phone} [param.selectedPhone]\n     */\n    constructor({ selectedPhone }) {\n        Validator.validateClassObject(selectedPhone, Phone);\n        this.selectedPhone = selectedPhone;\n    }\n}\n\n/**\n * Class representing result type for pauseRecording() & resumeRecording\n */\nexport class RecordingToggleResult {\n    /**\n     * Create RecordingToggleResult\n     * @param {object} param\n     * @param {boolean} param.isRecordingPaused\n     * @param {string} [param.contactId]\n     * @param {string} [param.initialContactId]\n     * @param {string} [param.instanceId]\n     * @param {string} [param.region]\n     */\n    constructor({ isRecordingPaused, contactId = null, initialContactId = null, instanceId = null, region = null }) {\n        this.isRecordingPaused = isRecordingPaused;\n        this.contactId = contactId;\n        this.initialContactId = initialContactId;\n        this.instanceId = instanceId;\n        this.region = region;\n    }\n}\n\n/**\n * Class representing result type for addParticipant()\n */\nexport class ParticipantResult {\n    /**\n     * Create ParticipantResult\n     * @param {object} param\n     * @param {boolean} param.initialCallHasEnded\n     * @param {CallInfo} param.callInfo\n     * @param {string} param.phoneNumber\n     * @param {string} param.callId\n     */\n    constructor({ initialCallHasEnded, callInfo, phoneNumber, callId }) {\n        Validator.validateClassObject(callInfo, CallInfo);\n        this.initialCallHasEnded = initialCallHasEnded;\n        this.callInfo = callInfo;\n        this.phoneNumber = phoneNumber;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for getPhoneContacts()\n */\nexport class PhoneContactsResult {\n    /**\n     * Create PhoneContactsResult\n     * @param {object} param\n     * @param {Contact[]} [param.contacts]\n     * @param {Array} [param.contactTypes]\n     */\n    constructor({ contacts = [], contactTypes = [] }) {\n        if (contacts.length > 0) {\n            contacts.forEach(contact => {\n                Validator.validateClassObject(contact, Contact);\n            });\n        }\n        if (contactTypes.length > 0) {\n            contactTypes.forEach(filterType => {\n                Validator.validateEnum(filterType, Object.values(constants.CONTACT_TYPE));\n            });\n        }\n        this.contacts = contacts;\n        this.contactTypes = contactTypes;\n    }\n}\n\n/**\n * Class representing result type for accept(), decline(), dial()\n */\nexport class CallResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall} [param.call]\n     */\n    constructor({ call }) {\n        if (call !== undefined) {\n            Validator.validateClassObject(call, PhoneCall);\n        }\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for endCall(), hangup()\n */\nexport class HangupResult {\n    /**\n     * Create CallResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls (can be multiple calls in case of agent endcall/hangup)\n     */\n    constructor({ calls }) {\n        if (calls instanceof Array) {\n            calls.forEach(call => Validator.validateClassObject(call, PhoneCall));\n            this.calls = calls;\n        } else {\n            Validator.validateClassObject(calls, PhoneCall);\n            this.calls = [calls];\n        }\n    }\n}\n\n/**\n * Class representing result type for hold() & resume()\n */\nexport class HoldToggleResult {\n    /**\n     * Create HoldToggleResult\n     * @param {object} param\n     * @param {boolean} param.isThirdPartyOnHold\n     * @param {boolean} param.isCustomerOnHold\n     * @param {PhoneCall[]} [param.calls]\n     */\n    constructor({ isThirdPartyOnHold, isCustomerOnHold, calls }) {\n        if (calls) {\n            Object.values(calls).forEach(call => {\n                Validator.validateClassObject(call, PhoneCall);\n            });\n            this.calls = calls;\n        }\n        this.isThirdPartyOnHold = isThirdPartyOnHold;\n        this.isCustomerOnHold = isCustomerOnHold;\n    }\n}\n\n/**\n * Class representing result type for getRecordingUrl\n */\n export class SignedRecordingUrlResult {\n    /**\n     * Create SignedRecordingUrlResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {string} [param.url]\n     * @param {number} [param.duration] in seconds\n     * @param {string} [param.callId] Salesforce callId of the voice call\n     */\n    constructor({ success, url, duration, callId }) {\n        if (success) {\n            // For a successfull result, url is required\n            Validator.validateString(url);\n            Validator.validateString(callId);\n            if (duration) {\n                Validator.validateNumber(duration);\n            }\n        }\n        this.success = success;\n        this.url = url;\n        this.duration = duration;\n        this.callId = callId;\n    }\n}\n\n/**\n * Class representing result type for init()\n */\nexport class InitResult {\n    /**\n     * Create InitResult\n     * @param {object} param\n     * @param {boolean} [param.showLogin]\n     * @param {number} [param.loginFrameHeight]\n     * @param {boolean} [param.isSilentLogin]\n     * @param {boolean} [param.showStorageAccess]\n     */\n    constructor({ showLogin = false, loginFrameHeight = 350, isSilentLogin = false, showStorageAccess = false }) {\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n        this.isSilentLogin = this.showLogin ? false : isSilentLogin;\n        this.showStorageAccess = showStorageAccess;\n    }\n}\n\n/**\n * Class representing dial options for outbound dialing \n */\nexport class DialOptions {\n    /**\n     * Create DialOptions\n     * @param {boolean} [param.isCallback]\n     */\n    constructor({ isCallback = false }) {\n        this.isCallback = isCallback;\n    }\n}\n\n/**\n * Class representing generic result type\n */\nexport class GenericResult {\n    /**\n     * Create GenericResult\n     * @param {object} param\n     * @param {boolean} param.success\n     */\n    constructor({ success }) {\n        this.success = success;\n    }\n}\n\n/**\n * Class representing logout result type\n */\n export class LogoutResult {\n    /**\n     * Create LogoutResult\n     * @param {object} param\n     * @param {boolean} param.success\n     * @param {number} [param.loginFrameHeight]\n     */\n    constructor({ success, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}\n\n/**\n * Class representing callInfo class (call metadata)\n */\nexport class CallInfo {\n    /**\n     * Create CallInfo\n     * @param {object} param\n     * @param {boolean} param.isOnHold\n     * @param {boolean} param.isRecordingPaused\n     * @param {boolean} param.isMuted\n     * @param {string} [param.initialCallId]\n     * @param {Date} [param.callStateTimestamp]\n     * @param {string} [param.queueName]\n     * @param {string} [param.queueId]\n     * @param {Date} [param.queueTimestamp]\n     * @param {boolean} [param.isSoftphoneCall] - is it a softphone call \n     * @param {boolean} [param.acceptEnabled]\n     * @param {boolean} [param.declineEnabled]\n     * @param {boolean} [param.muteEnabled]\n     * @param {boolean} [param.swapEnabled]\n     * @param {boolean} [param.conferenceEnabled]\n     * @param {boolean} [param.holdEnabled]\n     * @param {boolean} [param.recordEnabled]\n     * @param {boolean} [param.addCallerEnabled]\n     * @param {boolean} [param.extensionEnabled]\n     * @param {boolean} [param.isReplayable]\n     * @param {boolean} [param.isBargeable]\n     * @param {boolean} [param.isExternalTransfer]\n     * @param {boolean} [param.showMuteButton]\n     * @param {boolean} [param.showRecordButton]\n     * @param {boolean} [param.showAddCallerButton]\n     * @param {boolean} [param.showAddBlindTransferButton]\n     * @param {boolean} [param.showMergeButton]\n     * @param {boolean} [param.showSwapButton]\n     * @param {(\"ALWAYS\"|\"NEVER\"|\"ALWAYS_EXCEPT_ON_HOLD\")} [param.removeParticipantVariant] - The type of remove participant variant when in a transfer call.\n     * @param {String} [param.additionalFields] - Represents additional standard and custom fields in the voice call record, where each key-value pair value corresponds to a standard or custom field and its values.\n     * @param {boolean} [param.isMultiParty]\n     */\n    constructor({ callStateTimestamp = null, isOnHold, isMuted = false, isRecordingPaused = false, initialCallId, queueId = null, queueName = null, queueTimestamp = null, isSoftphoneCall = true, \n        acceptEnabled = true, declineEnabled = true, muteEnabled = true, swapEnabled = true, conferenceEnabled = true, holdEnabled = true,\n        recordEnabled = true, addCallerEnabled = true, extensionEnabled = true, isReplayable = true, isBargeable = false, isExternalTransfer, \n        showMuteButton = true, showRecordButton = true, showAddCallerButton = true, showAddBlindTransferButton = true, showMergeButton = true,\n        showSwapButton = true, removeParticipantVariant = Constants.REMOVE_PARTICIPANT_VARIANT.ALWAYS, additionalFields = null, isMultiParty = false }) {\n        if (callStateTimestamp) {\n            Validator.validateDate(callStateTimestamp);\n        }\n        if (queueTimestamp) {\n            Validator.validateDate(queueTimestamp);\n        }\n        if (queueId) {\n            Validator.validateString(queueId);\n        }\n        if (queueName) {\n            Validator.validateString(queueName);\n        }\n        Validator.validateBoolean(isRecordingPaused);\n        Validator.validateBoolean(isMuted);\n        Validator.validateBoolean(isSoftphoneCall);\n        Validator.validateBoolean(acceptEnabled);\n        Validator.validateBoolean(declineEnabled);\n        Validator.validateBoolean(muteEnabled);\n        Validator.validateBoolean(swapEnabled);\n        Validator.validateBoolean(conferenceEnabled);\n        Validator.validateBoolean(holdEnabled);\n        Validator.validateBoolean(recordEnabled);\n        Validator.validateBoolean(addCallerEnabled);\n        Validator.validateBoolean(extensionEnabled);\n        Validator.validateBoolean(isBargeable);\n        Validator.validateBoolean(showMuteButton);\n        Validator.validateBoolean(showRecordButton);\n        Validator.validateBoolean(showAddCallerButton);\n        Validator.validateBoolean(showAddBlindTransferButton);\n        Validator.validateBoolean(showMergeButton);\n        Validator.validateBoolean(showSwapButton);\n        if (isExternalTransfer !== undefined) {\n            Validator.validateBoolean(isExternalTransfer);\n        }\n        Validator.validateEnum(removeParticipantVariant, Object.values(constants.REMOVE_PARTICIPANT_VARIANT));\n        if (additionalFields) {\n            Validator.validateString(additionalFields);\n        }\n        Validator.validateBoolean(isMultiParty);\n        this.callStateTimestamp = callStateTimestamp;\n        this.isRecordingPaused = isRecordingPaused;\n        this.isMuted = isMuted;\n        this.isOnHold = isOnHold;\n        this.initialCallId = initialCallId;\n        this.queueName = queueName;\n        this.queueId = queueId;\n        this.queueTimestamp = queueTimestamp;\n        this.isSoftphoneCall = isSoftphoneCall;\n        this.acceptEnabled = acceptEnabled;\n        this.declineEnabled = declineEnabled;\n        this.muteEnabled = muteEnabled;\n        this.swapEnabled = swapEnabled;\n        this.conferenceEnabled = conferenceEnabled;\n        this.holdEnabled = holdEnabled;\n        this.recordEnabled = recordEnabled;\n        this.addCallerEnabled = addCallerEnabled;\n        this.extensionEnabled = extensionEnabled;\n        this.isReplayable = isReplayable;\n        this.isBargeable = isBargeable;\n        this.isExternalTransfer = isExternalTransfer;\n        this.removeParticipantVariant = removeParticipantVariant;\n        this.showMuteButton = showMuteButton;\n        this.showRecordButton = showRecordButton;\n        this.showAddCallerButton = showAddCallerButton;\n        this.showAddBlindTransferButton = showAddBlindTransferButton;\n        this.showMergeButton = showMergeButton;\n        this.showSwapButton = showSwapButton;\n        this.additionalFields = additionalFields;\n        this.isMultiParty = isMultiParty;\n    }\n}\n\n/** \n * Class representing a Contact. This object is used to represent \n * phone system contact or any call target\n */\n\nexport class Contact {\n    /**\n     * Create a Contact.\n     * @param {object} param\n     * @param {string} [param.id] - The unique contactId\n     * @param {(\"PhoneBook\"|\"Queue\"|\"PhoneNumber\"|\"Agent\")} [param.type] - The type of the contact, one of the CONTACT_TYPE values\n     * @param {string} [param.name] - The label for this contact to be displayed in the UI\n     * @param {string} [param.phoneNumber] - The phone number associcated with this contact\n     * @param {string} [param.prefix] - Any prefix to be dialed before dialing the number (i.e. +1)\n     * @param {string} [param.extension] - Any extension to be dialed after dialing the number\n     * @param {string} [param.endpointARN]\n     * @param {string} [param.queue]\n     * @param {string} [param.availability]\n     * @param {string} [param.recordId] - Salesforce RecordId\n     * @param {string} [param.description] - Contact Description\n     * @param {string} [param.queueWaitTime] - Estimated Queue Wait Time \n     */\n    constructor({phoneNumber, id, type, name, prefix, extension, endpointARN, queue, availability, recordId, description, queueWaitTime}) {\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n        }\n        if (type) {\n            Validator.validateEnum(type, Object.values(constants.CONTACT_TYPE));\n        }\n        if (id) {\n            Validator.validateString(id);\n        }\n        if (name) {\n            Validator.validateString(name);\n        }\n        if (prefix) {\n            Validator.validateString(prefix);\n        }\n        if (extension) {\n            Validator.validateString(extension);\n        }\n        if (availability) {\n            Validator.validateEnum(availability, Object.values(constants.AGENT_AVAILABILITY));\n        }\n        if (recordId) {\n            Validator.validateString(recordId);\n        }\n        if (description) {\n            Validator.validateString(description);\n        }\n        if (queueWaitTime) {\n            Validator.validateString(queueWaitTime);\n        }\n\n        this.phoneNumber = phoneNumber;\n        this.id = id;\n        this.type = type;\n        this.name = name;\n        this.prefix = prefix;\n        this.extension = extension;\n        this.endpointARN = endpointARN;\n        this.queue = queue;\n        if (constants.CONTACT_TYPE.AGENT === this.type) {\n            this.availability = availability;\n        } else {\n            this.availability = null;\n        }\n        this.queueWaitTime = queueWaitTime;\n        this.recordId = recordId;\n        this.description = description;\n    }\n}\n\n/** \n* Class representing PhoneCallAttributes\n*/\n\nexport class PhoneCallAttributes {\n    /**\n     * Create PhoneCallAttributes.\n     * @param {object} param\n     * @param {string} [param.voiceCallId] - The voice call id\n     * @param {PARTICIPANT_TYPE} [param.participantType] - The participant type of the call\n     * @param {DIALER_TYPE} [param.dialerType] - The dialer type of the call\n     * @param {string} [param.parentId] - The parent call id of the call\n     * @param {boolean} [param.isOnHold]\n     * @param {boolean} [param.hasSupervisorBargedIn]\n     */\n    constructor({ voiceCallId, participantType, dialerType = Constants.DIALER_TYPE.NONE, parentId, isOnHold, hasSupervisorBargedIn = false }) {\n        if (voiceCallId) {\n            Validator.validateString(voiceCallId);\n        }\n        if (participantType) {\n            Validator.validateEnum(participantType, Object.values(constants.PARTICIPANT_TYPE));\n        }\n        if (parentId) {\n            Validator.validateString(parentId);\n        }\n        if (isOnHold !== undefined) {\n            Validator.validateBoolean(isOnHold);\n        }\n\n        Validator.validateBoolean(hasSupervisorBargedIn);\n        Validator.validateEnum(dialerType, Object.values(constants.DIALER_TYPE));\n\n        this.voiceCallId = voiceCallId;\n        this.participantType = participantType;\n        this.parentId = parentId;\n        this.isOnHold = isOnHold;\n        this.dialerType = dialerType;\n        this.hasSupervisorBargedIn = hasSupervisorBargedIn;\n    }\n}\n\n/** \n* Class representing a PhoneCall. \n*/\n\nexport class PhoneCall {\n    /**\n     * Create a PhoneCall.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId. This is a required parameter\n     * @param {CALL_TYPE} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {Contact} [param.contact] - The Call Target / Contact \n     * @param {string} [param.state] - The state of the call, i.e. ringing, connected, declined, failed \n     * @param {PhoneCallAttributes} [param.callAttributes] - Any additional call attributes\n     * @param {string} [param.phoneNumber] - The phone number associated with this call (usually external number)\n     * @param {CallInfo} [param.callInfo]\n     * @param {string} [param.reason]\n     * @param {boolean} [param.closeCallOnError]\n     * @param {string} [param.agentStatus]\n     */\n    constructor({callId, callType, contact, state, callAttributes, phoneNumber, callInfo, reason, closeCallOnError, agentStatus }) {\n        // TODO: Revisit the required fields\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n        if (callType) {\n            Validator.validateEnum(callType, Object.values(constants.CALL_TYPE));\n            this.callType = callType;\n        }\n        if (phoneNumber) {\n            Validator.validateString(phoneNumber);\n            this.phoneNumber = phoneNumber;\n        }\n        if (callInfo) {\n            Validator.validateClassObject(callInfo, CallInfo);\n            this.callInfo = callInfo;\n        }\n        if (contact) {\n            Validator.validateClassObject(contact, Contact);\n            this.contact = contact;\n        }\n        if (reason) {\n            this.reason = reason;\n        }\n        if (closeCallOnError) {\n            this.closeCallOnError = closeCallOnError;\n        }\n        if (agentStatus) {\n            this.agentStatus = agentStatus;\n        }\n        this.state = state;\n        this.callAttributes = callAttributes;\n    }\n}\n\n/** \n* Class representing a TelephonyConnector\n*/\nexport class TelephonyConnector {\n    /**\n     * Get the currently active calls\n     * @returns {Promise<ActiveCallsResult>} \n     * \n     */\n    getActiveCalls() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Accept call\n     * @param {PhoneCall} call - The call to be accepted\n     * @returns {Promise<CallResult>} \n     * \n     */\n    acceptCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Decline call\n     * @param {PhoneCall} call - The call to be declined\n     * @returns {Promise<CallResult>} \n     * \n     */\n    declineCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * End call\n     * @param {PhoneCall} call - The call to be ended\n     * @param {AGENT_STATUS} agentStatus\n     * @returns {Promise<HangupResult>} \n     * \n     */\n    endCall(call, agentStatus) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Mute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    mute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Unmute call\n     * @returns {Promise<MuteToggleResult>} \n     * \n     */\n    unmute() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Hold call\n     * @param {PhoneCall} call - The call to be held\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    hold(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume call\n     * @param {PhoneCall} call - The call to be resumed\n     * @returns {Promise<HoldToggleResult>} \n     * \n     */\n    resume(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Dial out Number\n     * @param {Contact} contact\n     * @param {DialOptions} dialOptions\n     * @returns {Promise<CallResult>} \n     * \n     */\n    dial(contact, dialOptions) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Send digits\n     * @param {string} digits\n     */\n    sendDigits(digits) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get phone contacts\n     * @returns {Promise<PhoneContactsResult>} \n     */\n    getPhoneContacts() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Swap calls\n     * @param {PhoneCall} call1\n     * @param {PhoneCall} call2\n     * @returns {Promise<HoldToggleResult>} \n     */\n    swap(call1, call2) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Conference calls\n     * @param {PhoneCall[]} calls\n     * @returns {Promise<HoldToggleResult>} \n     */\n    conference(calls) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Add participant to call\n     * @param {Contact} contact: The transfer target\n     * @param {PhoneCall} parentCall: The call to which a participant will be added\n     * @param {Boolean} isBlindTransfer: True if blind transfering a call and hanging up upon transfer\n     * @returns {Promise<ParticipantResult>} \n     */\n    addParticipant(contact, parentCall, isBlindTransfer) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Pause recording\n     * @param {PhoneCall} call\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    pauseRecording(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Resume recording\n     * @param {PhoneCall} call\n     * @returns {Promise<RecordingToggleResult>} \n     */\n    resumeRecording(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agentConfig\n     * @returns {Promise<AgentConfigResult>}\n     */\n    getAgentConfig() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set Agent Config\n     * @param {AgentConfig} config\n     * @returns {Promise<GenericResult>}\n     */\n    setAgentConfig(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get Capabilities\n     * @returns {Promise<CapabilitiesResult>}\n     */\n    getCapabilities() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Wrap up call\n     * @param {PhoneCall} call\n     */\n    wrapUpCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n    * Get the signed recording url\n    * @param {String} recordingUrl\n    * @param {String} vendorCallKey\n    * @param {String} callId\n    * @returns {Promise<SignedRecordingUrlResult>} \n    */\n    getSignedRecordingUrl(recordingUrl, vendorCallKey, callId) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervise a call\n     * @param {PhoneCall} call Call to be supervised\n     */\n    superviseCall(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor disconnects from a call\n     * @param {PhoneCall} call Call to be disconnected\n     */\n    supervisorDisconnect(call) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Supervisor Barges into a ongoing call\n     * @param {PhoneCall} call Call which supervisor barges in\n     */\n    supervisorBargeIn(call) {\n        throw new Error('Not implemented');\n    }\n}\n\n/** \n* Class representing a VendorConnector\n*/\nexport class VendorConnector {\n    /**\n     * Initialize the connector\n     * @param {object} connectorConfig\n     * @returns {Promise<InitResult>} \n     * \n     */\n    init(config) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Gets the telephonyConnector\n     * @returns {Promise<TelephonyConnector>} \n     * \n     */\n    getTelephonyConnector() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Sends non-voice agent work events to vendor such as work accepted, declined, etc\n     * @param {AgentWork} agentWork\n     * \n     */\n    onAgentWorkEvent(agentWork) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Set agent status\n     * @param {string} agentStatus\n     * @param {StatusInfo} statusInfo\n     * @param {Boolean} enqueueNextState - flag to determine if this status change request should be enqueued if neccessary\n     * @returns {Promise<GenericResult>} \n     * \n     */\n    setAgentStatus(agentStatus, statusInfo, enqueueNextState) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Get agent status\n     * @returns {Promise<AgentStatusInfo>} \n     * \n     */\n     getAgentStatus() {\n        this.logMessageToVendor(constants.LOG_LEVEL.INFO, 'getAgentStatus API is NOT Implemented' );\n    }\n\n    /**\n     * Logout from Omni\n     * @returns {Promise<LogoutResult>} \n     */\n    logout() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Handle message from LWC/Aura component\n     * @param {object} message\n     */\n    handleMessage(message) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Triggers a browser download for Vendor Logs\n     * @param {String[]} logs Array of log messages.\n     */\n    downloadLogs(logs) {\n        downloadLogs();\n    }\n\n    /**\n     * Sends the logs with a logLevel and payload to the vendor connector.\n     * Does a no-op, if not implemented.\n     * @param {String} logLevel Log Level (INFO, WARN, ERROR)\n     * @param {String} message Message to be logged\n     * @param {Object} payload An optional payload to be logged\n     */\n    logMessageToVendor(logLevel, message, payload) {}\n}\n\nexport class Validator {\n    static validateString(value) {\n        if (typeof value !== 'string') {\n            throw new Error(`Invalid argument. Expecting a string but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateNumber(value) {\n        if (typeof value !== 'number') {\n            throw new Error(`Invalid argument. Expecting a number but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateBoolean(value) {\n        if (typeof value !== 'boolean') {\n            throw new Error(`Invalid argument. Expecting a boolean but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateEnum(value, enumValues) {\n        const regex = new RegExp(enumValues.join( \"|\" ), \"i\");\n        if (!regex.test(value)) {\n            throw new Error(`Invalid argument. Expecting a value from ${JSON.stringify(enumValues)} but got ${value}`);\n        }\n        return this;\n    }\n\n    static validateDate(value) {\n        if (!(value instanceof Date)) {\n            throw new Error(`Invalid argument. Expecting a Date object but got ${typeof value}`);\n        }\n        return this;\n    }\n\n    static validateClassObject(object, className) {\n        if (!(object instanceof className)) {\n            throw new Error(`Invalid className. Expecting object of class ${className} but got ${typeof object}`);\n        }\n        return this;\n    }\n}\n\n/** \n* Class representing an AgentWork\n*/\nexport class AgentWork {\n    /**\n     * Create an AgentWork.\n     * @param {object} param\n     * @param {string} [param.workItemId] - Salesforce agent work item Id\n     * @param {string} [param.workId] - Salesforce work Id\n     * @param {WORK_EVENT} [param.workEvent] - The work lifecycle event\n     */\n    constructor({ workItemId, workId, workEvent }) {\n        Validator.validateEnum(workEvent, Object.values(constants.WORK_EVENT));\n        this.workEvent = workEvent;\n        this.workItemId = workItemId;\n        this.workId = workId;\n    }\n }\n\n/** \n * Class representing an Agent status information. This object is used to represent \n * agent status information\n */\n\nexport class AgentStatusInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (required)\n     * @param {string} [param.statusApiName] - The status API name\n     * @param {string} [param.statusName] - The label for this status to be displayed in the UI\n     */\n    constructor({statusId, statusApiName, statusName}) {\n        Validator.validateString(statusId);\n        if (statusApiName) {\n            Validator.validateString(statusApiName);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusApiName = statusApiName;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * Class representing an Agent Vendor status information. This object is used to represent \n * agent vendor side status information\n */\nexport class AgentVendorStatusInfo {\n    /**\n     * Create a AgentVendorStatusInfo.\n     * @param {object} param\n     * @param {string} [param.statusId] - The unique statusId (e.g agentStateARN)\n     * @param {string} [param.statusType] - The agent's current availability state type\n     * @param {string} [param.statusName] - The name of the agent's current availability state\n     */\n    constructor({statusId, statusType, statusName}) {\n        if (statusId) {\n            Validator.validateString(statusId);\n        }\n        if (statusType) {\n            Validator.validateString(statusType);\n        }\n        if (statusName) {\n            Validator.validateString(statusName);\n        }\n        this.statusId = statusId;\n        this.statusType = statusType;\n        this.statusName = statusName;\n    }\n}\n\n/** \n * NOTE: SALESFORCE INTERNAL USE ONLY\n * Class representing an State Change Result information. This object is used to represent \n * Agent State Change Infomation\n */\n export class StateChangeResult {\n    /**\n     * Create a StateChangeResult.\n     * @param {object} param\n     * @param {AgentVendorStatusInfo} [param.newVendorStateInfo] - newStateName (e.g 'Available') (required), newStateType (e.g 'routable')\n     * @param {AgentVendorStatusInfo} [param.oldVendorStateInfo] - oldStateName (e.g 'offline'), oldStateType (e.g 'Offline')\n     */\n    constructor({newVendorStateInfo, oldVendorStateInfo}) {\n        Validator.validateClassObject(newVendorStateInfo, AgentVendorStatusInfo);\n        Validator.validateString(newVendorStateInfo.statusName);\n        if (oldVendorStateInfo) {\n            Validator.validateClassObject(oldVendorStateInfo, AgentVendorStatusInfo);\n        }\n        this.newVendorStateInfo = newVendorStateInfo;\n        this.oldVendorStateInfo = oldVendorStateInfo;\n    }\n}\n\n/** \n * Class representing a Supervised Call Info. This object is used to represent \n * information about a call that is being supervised by a supervisor.\n */\nexport class SupervisedCallInfo {\n    /**\n     * Create a AgentStatusInfo.\n     * @param {object} param\n     * @param {string} [param.callId] - The unique supervised vendor call ID (required)\n     * @param {string} [param.voiceCallId] - The supervised salesforce voice call ID\n     * @param {string} [param.callType] - The type of the call, one of the CALL_TYPE values\n     * @param {string} [param.from] - From phone number (for Inbound calls)\n     * @param {string} [param.to] - To phone number (for Outbound calls)\n     * @param {string} [param.supervisorName] - The supervisor name (shown to the supervised agent on barge in)\n     * @param {boolean} [param.isBargedIn] - True if the Supervisor has barged in, False if the supervisor is listening in.\n     */\n\n    constructor({callId, voiceCallId, callType, from, to, supervisorName, isBargedIn}) {\n        Validator.validateString(callId);\n        this.callId = callId;\n        this.voiceCallId = voiceCallId;\n        this.callType = callType;\n        this.from = from;\n        this.to = to;\n        this.supervisorName = supervisorName;\n        this.isBargedIn = isBargedIn;\n    }\n}\n\n/**\n * Class representing a Audio Stats, which contains array of AudioStats. This object is used to calculate the MOS Score\n */\n\nexport class AudioStats {\n    /**\n     * Create a AudioStats\n     * @param {object} param\n     * @param {string} [param.callId] - The unique callId.\n     * @param {AudioStatsElement[]} param.stats - array of AudioStatsElement\n     * @param {boolean} [param.isAudioStatsCompleted] - True if the audio stats is completed, will calculate MOS and update VoiceCall record\n     */\n    constructor({ callId, stats, isAudioStatsCompleted }) {\n        if (callId) {\n            Validator.validateString(callId);\n            this.callId = callId;\n        }\n\n        if (stats) {\n            Validator.validateClassObject(stats, Array);\n            stats.forEach(audioStatsElement => Validator.validateClassObject(audioStatsElement, AudioStatsElement));\n            this.stats = stats;\n        }\n\n        if (isAudioStatsCompleted) {\n            Validator.validateBoolean(isAudioStatsCompleted);\n            this.isAudioStatsCompleted = isAudioStatsCompleted;\n        }\n    }\n}\n\n/**\n * Class representing a Audio Stats Element. This object is used to calculate the MOS Score\n */\n\nexport class AudioStatsElement {\n    /**\n     * Create a AudioStatsElement\n     * @param {object} param\n     * @param {StatsInfo} [param.inputChannelStats] - the inputChannel stream stats\n     * @param {StatsInfo} [param.outputChannelStats] - the ouputChannel stream stats\n     */\n    constructor({inputChannelStats, outputChannelStats}) {\n        if (inputChannelStats) {\n            Validator.validateClassObject(inputChannelStats, StatsInfo);\n        }\n        if (outputChannelStats) {\n            Validator.validateClassObject(outputChannelStats, StatsInfo);\n        }\n        \n        this.inputChannelStats = inputChannelStats;\n        this.outputChannelStats = outputChannelStats;\n    }\n}\n\n/**\n * Class representing a Stream Stats. This object is used to calculate the MOS Score\n */\n\nexport class StatsInfo {\n    /**\n     * Create a StatsInfo\n     * @param {object} param\n     * @param {number} [param.packetsCount] - the packets count\n     * @param {number} [param.packetsLost] - packets lost count\n     * @param {number} [param.jitterBufferMillis] - jitter buffer in milliseconds\n     * @param {number} [param.roundTripTimeMillis] - round trip time in milliseconds\n     */\n    constructor({packetsCount, packetsLost, jitterBufferMillis, roundTripTimeMillis}) {\n        packetsCount = (packetsCount == null || packetsCount < 0) ? 0 : packetsCount;\n        packetsLost = (packetsLost == null || packetsLost < 0) ? 0 : packetsLost;\n        jitterBufferMillis = (jitterBufferMillis == null || jitterBufferMillis < 0) ? 0 : jitterBufferMillis;\n        roundTripTimeMillis = (roundTripTimeMillis == null || roundTripTimeMillis < 0) ? 0 : roundTripTimeMillis;\n\n        this.statsCount = 0;\n        this.packetsCount = packetsCount;\n        this.packetsLost = packetsLost;\n        this.jitterBufferMillis = jitterBufferMillis;\n        this.roundTripTimeMillis = roundTripTimeMillis;\n    }\n}\n\n/**\n * Class representing supervise call result\n */\n export class SuperviseCallResult {\n    /**\n     * Create a SuperviseCallResult\n     * @param {object} param\n     * @param {PhoneCall} param.call\n     */\n    constructor({call}) {\n        Validator.validateClassObject(call, PhoneCall);\n        this.call = call;\n    }\n}\n\n/**\n * Class representing result type for supervisorDisconnected()\n */\n export class SupervisorHangupResult extends HangupResult {\n     /**\n     * Create SupervisorHangupResult\n     * @param {object} param\n     * @param {PhoneCall[]|PhoneCall} param.calls - one or more calls when supervisor hangsup\n     */\n    constructor({ calls }) {\n        super({ calls });\n    }\n }\n\n/** \n * Class representing result type for STORAGE_ACCESS_RESULT\n * @param {object} param\n * @param {boolean} [param.success]\n * @param {boolean} [param.showLogin] \n * @param {number} [param.loginFrameHeight]\n */\nexport class ShowStorageAccessResult {\n    constructor({success= false, showLogin = false, loginFrameHeight = 350 }) {\n        this.success = success;\n        this.showLogin = showLogin;\n        this.loginFrameHeight = loginFrameHeight;\n    }\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\nimport { AudioStatsElement, StatsInfo } from './types';\nlet audioStatus;\nlet supportsMos = false;\n\nfunction getAvgStats(streamType) {\n    const stats = audioStatus[streamType];\n    return {\n        packetsCount: stats.packetsCount / stats.statsCount,\n        packetsLost: stats.packetsLost / stats.statsCount,\n        jitterBufferMillis: stats.jitterBufferMillis / stats.statsCount,\n        roundTripTimeMillis: stats.roundTripTimeMillis / stats.statsCount\n    };\n}\n\nfunction getMOSByStream(streamType) {\n    const avgStats = getAvgStats(streamType);\n    const effectiveLatency = avgStats.roundTripTimeMillis + (avgStats.jitterBufferMillis * 2) + 10.0;\n    let R = 0;\n    if (effectiveLatency < 160) {\n        R = 93.2 - (effectiveLatency / 40);\n    } else {\n        R = 93.2 - (effectiveLatency - 120) / 10;\n    }\n    R -= avgStats.packetsLost / avgStats.packetsCount * 2.50;\n    return 1 + (0.035) * R + (.000007) * R * (R - 60) * (100 - R);\n}\n\nexport function enableMos() {\n    supportsMos = true;\n}\n\nexport function getMOS() {\n    if (!supportsMos || !audioStatus) {\n        return undefined;\n    }\n    const inputChannelMOS = getMOSByStream('inputChannelStats');\n    const ouputChannelMOS = getMOSByStream('outputChannelStats');\n    audioStatus = null;\n    if (isNaN(ouputChannelMOS) && isNaN(inputChannelMOS)) {\n        return 0;\n    } else if (isNaN(ouputChannelMOS)) {\n        return inputChannelMOS;\n    } else if (isNaN(inputChannelMOS)) {\n        return ouputChannelMOS;\n    } else {\n        return Math.min(inputChannelMOS, ouputChannelMOS);\n    }\n}\n\nexport function initAudioStats() {\n    audioStatus = new AudioStatsElement({inputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0}), \n                               outputChannelStats: new StatsInfo({packetsCount: 0, packetsLost: 0, jitterBufferMillis: 0, roundTripTimeMillis: 0})});\n}\n\nexport function updateAudioStats(statsArray) {\n    if (audioStatus) {\n        statsArray.forEach((stats) => {\n            if (stats.inputChannelStats) {\n                audioStatus.inputChannelStats.statsCount++;\n                audioStatus.inputChannelStats.packetsCount += stats.inputChannelStats.packetsCount | 0;\n                audioStatus.inputChannelStats.packetsLost += stats.inputChannelStats.packetsLost | 0;\n                audioStatus.inputChannelStats.jitterBufferMillis += stats.inputChannelStats.jitterBufferMillis | 0;\n                audioStatus.inputChannelStats.roundTripTimeMillis += stats.inputChannelStats.roundTripTimeMillis | 0;\n            }\n            if (stats.outputChannelStats) {\n                audioStatus.outputChannelStats.statsCount++;\n                audioStatus.outputChannelStats.packetsCount += stats.outputChannelStats.packetsCount | 0;\n                audioStatus.outputChannelStats.packetsLost += stats.outputChannelStats.packetsLost | 0;\n                audioStatus.outputChannelStats.jitterBufferMillis += stats.outputChannelStats.jitterBufferMillis | 0;\n                audioStatus.outputChannelStats.roundTripTimeMillis += stats.outputChannelStats.roundTripTimeMillis | 0;\n            }\n        });\n    }\n}","/*\n * Copyright (c) 2021, salesforce.com, inc.\n * All rights reserved.\n * SPDX-License-Identifier: BSD-3-Clause\n * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause\n */\n\n/* eslint-disable no-unused-vars */\nimport constants from './constants.js';\nimport { CONNECTOR_CONFIG_EXPOSED_FIELDS, CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH, CONNECTOR_CONFIG_EXCEPTION_FIELDS } from './constants.js';\nimport { Validator, GenericResult, InitResult, CallResult, HangupResult, HoldToggleResult, PhoneContactsResult, MuteToggleResult,\n    ParticipantResult, RecordingToggleResult, AgentConfigResult, ActiveCallsResult, SignedRecordingUrlResult, LogoutResult,\n    VendorConnector, Contact, AudioStats, SuperviseCallResult, SupervisorHangupResult, AgentStatusInfo, SupervisedCallInfo, \n    CapabilitiesResult, AgentVendorStatusInfo, StateChangeResult, CustomError, DialOptions, ShowStorageAccessResult } from './types';\nimport { enableMos, getMOS, initAudioStats, updateAudioStats } from './mosUtil';\nimport { log, getLogs } from './logger';\n\nlet channelPort;\nlet vendorConnector;\nlet agentAvailable;\nlet isSupervisorConnected;\n\n/**\n * Gets the error type from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorType(e) {\n    return e && e.type ? e.type : e;\n}\n\n/**\n * Sanitizes the object by removing any PII data\n * @param {object} payload\n */\nfunction sanitizePayload(payload) {\n    if (payload) {\n        if (typeof (payload) === 'function') {\n            // remove functions from the payload, because they cannot be copied by the postMessage function\n            return;\n        } else if (typeof (payload) === 'object') {\n            const isArray = Array.isArray(payload);\n            const sanitizedPayload = isArray ? [] : {};\n\n            if (isArray) {\n                payload.forEach(element => {\n                    sanitizedPayload.push(sanitizePayload(element));\n                });\n            } else {\n                for (const property in payload) {\n                    if (property !== 'phoneNumber' &&\n                        property !== 'number' &&\n                        property !== 'name' &&\n                        property !== 'callAttributes') {\n                        sanitizedPayload[property] = sanitizePayload(payload[property]);\n                    }\n                }\n            }\n            return sanitizedPayload;\n        }\n    }\n    return payload;\n}\n\n/**\n * Gets the error message from the error object\n * @param {object} e Error object representing the error\n */\nfunction getErrorMessage(e) {\n    return e && e.message ? e.message : e;\n}\n/** \n * Dispatch a telephony event log to Salesforce\n * @param {String} eventType event type, i.e. constants.EVENT_TYPE.VOICE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} isError error scenario\n */\nfunction dispatchEventLog(eventType, payload, isError) {\n    const sanitizedPayload = sanitizePayload(payload);\n    const logLevel = isError ? constants.LOG_LEVEL.ERROR : constants.LOG_LEVEL.INFO;\n    log({eventType, payload}, logLevel, constants.LOG_SOURCE.SYSTEM);\n\n    channelPort.postMessage({\n        type: constants.MESSAGE_TYPE.LOG,\n        payload: { eventType, payload: sanitizedPayload, isError }\n    });\n}\n/** \n * Dispatch a telephony event to Salesforce\n * @param {String} eventType event type, i.e. constants.EVENT_TYPE.VOICE.CALL_STARTED\n * @param {Object} payload event payload\n * @param {Boolean} registerLog optional argument to not register the event\n */\nfunction dispatchEvent(eventType, payload, registerLog = true) {\n    channelPort.postMessage({\n        type: constants.MESSAGE_TYPE.TELEPHONY_EVENT_DISPATCHED,\n        payload: { telephonyEventType: eventType, telephonyEventPayload: payload }\n    });\n    if (registerLog) {\n        dispatchEventLog(eventType, payload, false);\n    }\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {string} errorType Error Type, ex: constants.ErrorType.VOICE.MICROPHONE_NOT_SHARED\n * @param {object} error Error object representing the error\n * @param {string} eventType The event that caused this error, ex: constants.MESSAGE_TYPE.VOICE.ACCEPT_CALL\n */\nfunction dispatchError(errorType, error, eventType) {\n    // eslint-disable-next-line no-console\n    console.error(`SCV dispatched error ${errorType} for eventType ${eventType}`, error);\n    dispatchEvent(constants.EVENT_TYPE.ERROR, { message: errorType }, false);\n    dispatchEventLog(eventType, { errorType, error }, true);\n}\n\n/**\n * Dispatch a telephony integration error to Salesforce\n * @param {CustomError} error Error object representing the custom error\n * @param {string} eventType The event that caused this error, ex: constants.MESSAGE_TYPE.ACCEPT_CALL\n */\nfunction dispatchCustomError(error, eventType) {\n    // eslint-disable-next-line no-console\n    const payload = {\n        customError: {\n            labelName: error.labelName,\n            namespace: error.namespace,\n            message: error.message\n        }\n    };\n    console.error(`SCV dispatched custom error for eventType ${eventType}`, payload);\n    dispatchEvent(constants.EVENT_TYPE.ERROR, payload, false);\n    dispatchEventLog(eventType, { errorType: constants.ERROR_TYPE.CUSTOM_ERROR, error }, true);\n}\n\nfunction dispatchInfo(eventType, payload) {\n    // eslint-disable-next-line no-console\n    console.info(`SCV info message dispatched for eventType ${eventType} with payload ${JSON.stringify(payload)}`);\n    dispatchEvent(constants.EVENT_TYPE.INFO, { message: eventType }, false);\n    dispatchEventLog(eventType, payload, false);\n}\n\n/** \n * Notify Salesforce that the connector is ready\n */\nasync function setConnectorReady() {\n    try {\n        const telephonyConnector = await vendorConnector.getTelephonyConnector();\n        const agentConfigResult = await telephonyConnector.getAgentConfig();\n        const capabilitiesResult = await telephonyConnector.getCapabilities();\n        Validator.validateClassObject(agentConfigResult, AgentConfigResult);\n        Validator.validateClassObject(capabilitiesResult, CapabilitiesResult);\n        if (capabilitiesResult.supportsMos) {\n            enableMos();\n        }\n        const activeCallsResult = await telephonyConnector.getActiveCalls();\n        Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n        const activeCalls = activeCallsResult.activeCalls;\n        const type = constants.MESSAGE_TYPE.CONNECTOR_READY;\n        const payload = {\n            agentConfig: {\n\n                [constants.AGENT_CONFIG_TYPE.PHONES] : agentConfigResult.phones,\n                [constants.AGENT_CONFIG_TYPE.SELECTED_PHONE] : agentConfigResult.selectedPhone\n            },\n            capabilities: {\n                [constants.CAPABILITIES_TYPE.MUTE] : capabilitiesResult.hasMute,\n                [constants.CAPABILITIES_TYPE.RECORD] : capabilitiesResult.hasRecord,\n                [constants.CAPABILITIES_TYPE.MERGE] : capabilitiesResult.hasMerge,\n                [constants.CAPABILITIES_TYPE.SWAP] : capabilitiesResult.hasSwap,\n                [constants.CAPABILITIES_TYPE.SIGNED_RECORDING_URL] : capabilitiesResult.hasSignedRecordingUrl,\n                [constants.CAPABILITIES_TYPE.DEBUG_ENABLED] : capabilitiesResult.debugEnabled,\n                [constants.CAPABILITIES_TYPE.CONTACT_SEARCH] : capabilitiesResult.hasContactSearch,\n                [constants.CAPABILITIES_TYPE.VENDOR_PROVIDED_AVAILABILITY] : capabilitiesResult.hasAgentAvailability,\n                [constants.CAPABILITIES_TYPE.VENDOR_PROVIDED_QUEUE_WAIT_TIME] : capabilitiesResult.hasQueueWaitTime,\n                [constants.CAPABILITIES_TYPE.SUPERVISOR_LISTEN_IN] : capabilitiesResult.hasSupervisorListenIn,\n                [constants.CAPABILITIES_TYPE.SUPERVISOR_BARGE_IN] : capabilitiesResult.hasSupervisorBargeIn,\n                [constants.CAPABILITIES_TYPE.MOS] : capabilitiesResult.supportsMos,\n                [constants.CAPABILITIES_TYPE.BLIND_TRANSFER] : capabilitiesResult.hasBlindTransfer,\n                [constants.CAPABILITIES_TYPE.TRANSFER_TO_OMNI_FLOW] : capabilitiesResult.hasTransferToOmniFlow,\n                [constants.CAPABILITIES_TYPE.PENDING_STATUS_CHANGE] : capabilitiesResult.hasPendingStatusChange,\n                [constants.CAPABILITIES_TYPE.PHONEBOOK] : capabilitiesResult.hasPhoneBook\n            },\n            callInProgress: activeCalls.length > 0 ? activeCalls[0] : null\n        }\n        channelPort.postMessage({\n            type,\n            payload\n        });\n        dispatchEventLog(type, payload, false);\n    } catch (e) {\n        // Post CONNECTOR_READY even if getAgentConfig is not implemented\n        channelPort.postMessage({\n            type: constants.MESSAGE_TYPE.CONNECTOR_READY,\n            payload: {}\n        });\n        dispatchEventLog(constants.MESSAGE_TYPE.CONNECTOR_READY, {}, false);\n    }\n}\n\n//TODO: 230 we should convert call object to PhoneCall object\nasync function channelMessageHandler(message) { \n    const eventType = message.data.type;\n    if (eventType !== constants.MESSAGE_TYPE.LOG) {\n        dispatchEventLog(eventType, message.data, false);\n    }\n    switch (eventType) {\n        case constants.MESSAGE_TYPE.VOICE.ACCEPT_CALL:\n            try {\n                if (message.data.call && message.data.call.callType &&\n                    (message.data.call.callType.toLowerCase() === constants.CALL_TYPE.OUTBOUND.toLowerCase() ||\n                    message.data.call.callType.toLowerCase() === constants.CALL_TYPE.DIALED_CALLBACK.toLowerCase())) {\n                    return;\n                }\n                initAudioStats();\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                if (isSupervisorConnected) {\n                    const hangupPayload = await telephonyConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP, hangupPayload.calls);\n                }\n                let payload = await telephonyConnector.acceptCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(call.callType.toLowerCase() === constants.CALL_TYPE.CALLBACK.toLowerCase() ?\n                    constants.EVENT_TYPE.VOICE.CALL_STARTED : constants.EVENT_TYPE.VOICE.CALL_CONNECTED, call);\n            } catch (e) {\n                isSupervisorConnected = false;\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.ACCEPT_CALL);\n                } else {\n                    dispatchInfo(constants.INFO_TYPE.VOICE.CAN_NOT_ACCEPT_THE_CALL, {messagetype: constants.MESSAGE_TYPE.VOICE.ACCEPT_CALL, additionalInfo: e});\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.DECLINE_CALL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload =  await telephonyConnector.declineCall(message.data.call);\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.HANGUP, call);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.DECLINE_CALL);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_DECLINE_THE_CALL, e, constants.MESSAGE_TYPE.VOICE.DECLINE_CALL);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.END_CALL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.endCall(message.data.call, message.data.agentStatus);\n                Validator.validateClassObject(payload, HangupResult);\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                const { calls } = payload;\n                // after end calls from vendor side, if no more active calls, fire HANGUP, otherwise, fire PARTICIPANT_REMOVED\n                if (activeCalls.length === 0) {\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.HANGUP, calls);\n                } else {\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED, calls.length > 0 && calls[0]);\n                }\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.END_CALL);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_END_THE_CALL, e, constants.MESSAGE_TYPE.VOICE.END_CALL);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.MUTE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.mute();\n                publishEvent({eventType: constants.EVENT_TYPE.VOICE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.MUTE);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_MUTE_CALL, e, constants.MESSAGE_TYPE.VOICE.MUTE);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.UNMUTE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.unmute();\n                publishEvent({eventType: constants.EVENT_TYPE.VOICE.MUTE_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.UNMUTE);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_UNMUTE_CALL, e, constants.MESSAGE_TYPE.VOICE.UNMUTE);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.HOLD:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.hold(message.data.call);\n                publishEvent({eventType: constants.EVENT_TYPE.VOICE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.HOLD);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT:\n                            dispatchError(constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.HOLD);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_HOLD_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.HOLD);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.RESUME:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.resume(message.data.call);\n                publishEvent({eventType: constants.EVENT_TYPE.VOICE.HOLD_TOGGLE, payload});\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.RESUME);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT:\n                            dispatchError(constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.RESUME);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_RESUME_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.RESUME);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.SET_AGENT_STATUS:\n            try {\n                const statusInfo = message.data.statusInfo || {};\n                const enqueueNextState = message.data.enqueueNextState || false;\n                const payload = await vendorConnector.setAgentStatus(message.data.agentStatus, statusInfo, enqueueNextState);\n                Validator.validateClassObject(payload, GenericResult);\n                const { success } = payload;\n                dispatchEvent(constants.EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.SET_AGENT_STATUS);\n                } else {\n                    if (message.data.statusInfo) {\n                        dispatchEvent(constants.EVENT_TYPE.SET_AGENT_STATUS_RESULT, { success: false });\n                    }\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.INVALID_AGENT_STATUS:\n                            dispatchError(constants.ERROR_TYPE.INVALID_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.SET_AGENT_STATUS);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.SET_AGENT_STATUS);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.GET_AGENT_STATUS:\n            try {\n                const payload = await vendorConnector.getAgentStatus();\n                Validator.validateClassObject(payload, AgentVendorStatusInfo);\n                dispatchEvent(constants.EVENT_TYPE.GET_AGENT_STATUS_RESULT, payload);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.GET_AGENT_STATUS);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, getErrorMessage(e), constants.MESSAGE_TYPE.GET_AGENT_STATUS);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.DIAL:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const isCallback = message.data.params && message.data.params.indexOf(constants.DIAL_OPTIONS.CALLBACK) >= 0;\n                const payload = await telephonyConnector.dial(new Contact(message.data.contact),\n                                                              new DialOptions({ isCallback }));\n                Validator.validateClassObject(payload, CallResult);\n                const { call } = payload;\n                // If connectors wants this to be created as callback \n                if (constants.CALL_TYPE.DIALED_CALLBACK.toLowerCase() === call.callType.toLowerCase() && isCallback) {\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED, call);\n                } else { // continue treating this as outbound\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_STARTED, call);\n                }\n            } catch (e) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_FAILED);\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.DIAL);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.VOICE.INVALID_DESTINATION:\n                            dispatchError(constants.ERROR_TYPE.VOICE.INVALID_DESTINATION, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.DIAL);\n                            break;\n                        case constants.ERROR_TYPE.GENERIC_ERROR:\n                            dispatchError(constants.ERROR_TYPE.GENERIC_ERROR, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.DIAL);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.DIAL);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.SEND_DIGITS:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                await telephonyConnector.sendDigits(message.data.digits);\n            } catch (e) {\n                dispatchEventLog(constants.MESSAGE_TYPE.VOICE.SEND_DIGITS, message.data.digits, true);\n            }\n            break;\n        case constants.MESSAGE_TYPE.VOICE.GET_PHONE_CONTACTS:\n            try  {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.getPhoneContacts(message.data.filter);\n                Validator.validateClassObject(payload, PhoneContactsResult);\n                const contacts = payload.contacts.map((contact) => {\n                    return {\n                        id: contact.id,\n                        type: contact.type,\n                        name: contact.name,\n                        phoneNumber: contact.phoneNumber,\n                        prefix: contact.prefix,\n                        extension: contact.extension,\n                        endpointARN: contact.endpointARN,\n                        queue: contact.queue,\n                        availability: contact.availability,\n                        queueWaitTime: contact.queueWaitTime,\n                        recordId: contact.recordId,\n                        description: contact.description\n                    };\n                });\n                dispatchEvent(constants.EVENT_TYPE.VOICE.PHONE_CONTACTS, {\n                    contacts, contactTypes: payload.contactTypes\n                });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.GET_PHONE_CONTACTS);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_GET_PHONE_CONTACTS, e, constants.MESSAGE_TYPE.VOICE.GET_PHONE_CONTACTS);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.SWAP_PARTICIPANTS:\n            try {\n                // TODO: Create PhoneCall from call1.callId & call2.callId\n                // TODO: rename to call1 and call2\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.swap(message.data.callToHold, message.data.callToResume);\n                publishEvent({ eventType: constants.EVENT_TYPE.VOICE.PARTICIPANTS_SWAPPED, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.SWAP_PARTICIPANTS);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_SWAP_PARTICIPANTS, e, constants.MESSAGE_TYPE.VOICE.SWAP_PARTICIPANTS);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.CONFERENCE:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.conference(message.data.calls);\n                publishEvent({ eventType: constants.EVENT_TYPE.VOICE.PARTICIPANTS_CONFERENCED, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.CONFERENCE);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_CONFERENCE, e, constants.MESSAGE_TYPE.VOICE.CONFERENCE);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.ADD_PARTICIPANT:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.addParticipant(new Contact(message.data.contact), message.data.call, message.data.isBlindTransfer);\n                publishEvent({ eventType: constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED, payload });\n                if (message.data.isBlindTransfer) {\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.HANGUP, message.data.call);\n                }\n            } catch (e) {\n                // TODO: Can we avoid passing in reason field\n                dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED, {\n                    reason: constants.EVENT_TYPE.ERROR.toLowerCase()\n                });\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.ADD_PARTICIPANT);\n                } else {\n                    switch(getErrorType(e)) {\n                        case constants.ERROR_TYPE.VOICE.INVALID_DESTINATION:\n                            dispatchError(constants.ERROR_TYPE.VOICE.INVALID_DESTINATION, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.ADD_PARTICIPANT);\n                            break;\n                        default:\n                            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_ADD_PARTICIPANT, getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.ADD_PARTICIPANT);\n                            break;\n                    }\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.PAUSE_RECORDING:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.pauseRecording(message.data.call);\n                publishEvent({ eventType: constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.PAUSE_RECORDING);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_PAUSE_RECORDING, e, constants.MESSAGE_TYPE.VOICE.PAUSE_RECORDING);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.RESUME_RECORDING:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const payload = await telephonyConnector.resumeRecording(message.data.call);\n                publishEvent({ eventType: constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE, payload });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.RESUME_RECORDING);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_RESUME_RECORDING, e, constants.MESSAGE_TYPE.VOICE.RESUME_RECORDING);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.LOGOUT:\n            try {\n                const payload = await vendorConnector.logout();\n                Validator.validateClassObject(payload, LogoutResult);\n                const { success, loginFrameHeight } = payload;\n                dispatchEvent(constants.EVENT_TYPE.LOGOUT_RESULT, { success, loginFrameHeight });\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.LOGOUT);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_OUT, e, constants.MESSAGE_TYPE.LOGOUT);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.MESSAGE:\n            // TODO: Define a return type for handling message\n            vendorConnector.handleMessage(message.data.message);\n        break;\n        case constants.MESSAGE_TYPE.VOICE.WRAP_UP_CALL: {\n            const telephonyConnector = await vendorConnector.getTelephonyConnector();\n            telephonyConnector.wrapUpCall(message.data.call);\n        }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.AGENT_AVAILABLE: {\n            if (message.data && message.data.isAvailable) {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                Validator.validateClassObject(activeCallsResult, ActiveCallsResult);\n                const activeCalls = activeCallsResult.activeCalls;\n                for (const callId in activeCalls) {\n                    const call = activeCalls[callId];\n                    const shouldReplay = call.callInfo ? call.callInfo.isReplayable : true;\n                    const isSupervisorCall = call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.SUPERVISOR;\n                    const hasSupervisorBargedIn = isSupervisorCall && call.callAttributes && call.callAttributes.hasSupervisorBargedIn;\n                    if (shouldReplay) {\n                        call.isReplayedCall = true;\n                        switch(call.state) {\n                            case constants.CALL_STATE.CONNECTED:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_CONNECTED, call);\n                                    if (hasSupervisorBargedIn) {\n                                        dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_BARGED_IN, call);\n                                    }\n                                    break;\n                                }\n                                dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_CONNECTED, call);\n                                break;\n                            case constants.CALL_STATE.RINGING:\n                                if (isSupervisorCall) {\n                                    isSupervisorConnected = true;\n                                    dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_STARTED, call);\n                                    break;\n                                }\n                                dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_STARTED, call);\n                                break;\n                            case constants.CALL_STATE.TRANSFERRING:\n                                dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            case constants.CALL_STATE.TRANSFERRED:\n                                dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED, {\n                                    phoneNumber: call.contact.phoneNumber,\n                                    callInfo: call.callInfo,\n                                    initialCallHasEnded: call.callAttributes.initialCallHasEnded,\n                                    callId: call.callId\n                                });\n                                break;\n                            default:\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.SET_AGENT_CONFIG:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.setAgentConfig(message.data.config);\n                Validator.validateClassObject(result, GenericResult);\n                dispatchEvent(constants.EVENT_TYPE.VOICE.AGENT_CONFIG_UPDATED, result);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.SET_AGENT_CONFIG);\n                } else {\n                    dispatchError(getErrorType(e) === constants.ERROR_TYPE.VOICE.CAN_NOT_UPDATE_PHONE_NUMBER ? constants.ERROR_TYPE.VOICE.CAN_NOT_UPDATE_PHONE_NUMBER : constants.ERROR_TYPE.VOICE.CAN_NOT_SET_AGENT_CONFIG , getErrorMessage(e), constants.MESSAGE_TYPE.VOICE.SET_AGENT_CONFIG);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.GET_SIGNED_RECORDING_URL:\n            try {\n                const { recordingUrl, vendorCallKey, callId } = message.data;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.getSignedRecordingUrl(recordingUrl, vendorCallKey, callId);\n                Validator.validateClassObject(result, SignedRecordingUrlResult);\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SIGNED_RECORDING_URL, result);\n            } catch (e) {\n                // In case of an error, we want to show an error message in the recording player\n                const signedRecordingUrlResult = new SignedRecordingUrlResult({\n                    success: false\n                });\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SIGNED_RECORDING_URL, signedRecordingUrlResult, false);\n                dispatchEventLog(constants.MESSAGE_TYPE.VOICE.GET_SIGNED_RECORDING_URL, signedRecordingUrlResult, true);\n            }\n        break;\n        case constants.MESSAGE_TYPE.DOWNLOAD_VENDOR_LOGS:\n            vendorConnector.downloadLogs(getLogs());\n        break;\n        case constants.MESSAGE_TYPE.LOG: {\n                const { logLevel, logMessage, payload } = message.data;\n                vendorConnector.logMessageToVendor(logLevel, logMessage, payload);\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.SUPERVISE_CALL:\n            try {\n                isSupervisorConnected = true;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.superviseCall(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                const agentConfigResult = await telephonyConnector.getAgentConfig();\n                if(agentConfigResult.selectedPhone.type === constants.PHONE_TYPE.SOFT_PHONE) {\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_CONNECTED, result.call);\n                } else {\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_STARTED, result.call);\n                }\n            } catch (e){\n                isSupervisorConnected = false;\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.SUPERVISE_CALL);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_SUPERVISE_CALL, e, constants.MESSAGE_TYPE.VOICE.SUPERVISE_CALL);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.SUPERVISOR_DISCONNECT:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.supervisorDisconnect(message.data.call);\n                Validator.validateClassObject(result, SupervisorHangupResult);\n                isSupervisorConnected = false;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP, result.calls);\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.SUPERVISOR_DISCONNECT);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_DISCONNECT_SUPERVISOR, e, constants.MESSAGE_TYPE.VOICE.SUPERVISOR_DISCONNECT);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.VOICE.SUPERVISOR_BARGE_IN:\n            try {\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const result = await telephonyConnector.supervisorBargeIn(message.data.call);\n                Validator.validateClassObject(result, SuperviseCallResult);\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_BARGED_IN, result.call );\n            } catch (e) {\n                if (e instanceof CustomError) {\n                    dispatchCustomError(e, constants.MESSAGE_TYPE.VOICE.SUPERVISOR_BARGE_IN);\n                } else {\n                    dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_BARGE_IN_SUPERVISOR, e, constants.MESSAGE_TYPE.VOICE.SUPERVISOR_BARGE_IN);\n                }\n            }\n        break;\n        case constants.MESSAGE_TYPE.AGENT_WORK_EVENT: {\n            let { workItemId, workId, workEvent } = message.data.agentWork;\n            vendorConnector.onAgentWorkEvent({\n                workItemId,\n                workId,\n                workEvent\n            });\n        }\n        break;\n        default:\n            break;\n    }\n}\n\n\nasync function windowMessageHandler(message) {\n    switch (message.data.type) {\n        case constants.MESSAGE_TYPE.SETUP_CONNECTOR: {\n            const sfDomain = /^https:\\/\\/[\\w-.]+(lightning\\.[\\w]+\\.soma\\.force\\.com|\\.lightning\\.force\\.com|\\.lightning\\.pc-rnd\\.force\\.com|\\.stm\\.force\\.com|\\.vf\\.force\\.com|\\.salesforce\\.com|\\.my\\.salesforce-sites\\.com|\\.lightning\\.localhost\\.[\\w]+\\.force.com)$/;\n            const originUrl = new URL(message.origin);\n            const url = originUrl.protocol + '//' + originUrl.hostname;\n\n            if (sfDomain.test(url)) {\n                channelPort = message.ports[0];\n                channelPort.onmessage = channelMessageHandler;\n                dispatchEventLog(constants.MESSAGE_TYPE.SETUP_CONNECTOR, exposedConnectorConfig(message.data.connectorConfig), false);\n                try {\n                    const payload = await vendorConnector.init(message.data.connectorConfig);\n                    Validator.validateClassObject(payload, InitResult);\n                    if (payload.showStorageAccess) {\n                        dispatchEvent(constants.EVENT_TYPE.SHOW_STORAGE_ACCESS, {\n                            success: true\n                        });\n                    } else if (payload.showLogin) {\n                        dispatchEvent(constants.EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        });\n                    } else if (payload.isSilentLogin) {\n                        dispatchEvent(constants.EVENT_TYPE.SHOW_LOGIN, {\n                            isSilentLogin: payload.isSilentLogin\n                        });\n                    } else {\n                        setConnectorReady();\n                    }\n                } catch (e) {\n                    if (e instanceof CustomError) {\n                        dispatchCustomError(e, constants.MESSAGE_TYPE.SETUP_CONNECTOR);\n                    } else {\n                        switch(getErrorType(e)) {\n                            case constants.ERROR_TYPE.VOICE.INVALID_PARAMS:\n                                dispatchError(constants.ERROR_TYPE.VOICE.INVALID_PARAMS, getErrorMessage(e), constants.MESSAGE_TYPE.SETUP_CONNECTOR);\n                                break;\n                            default:\n                                dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_IN, getErrorMessage(e), constants.MESSAGE_TYPE.SETUP_CONNECTOR);\n                                break;\n                        }\n                    }\n                }\n            }\n            window.removeEventListener('message', windowMessageHandler);\n        }\n            break;\n        default:\n            break;\n    }\n}\n\nfunction exposedConnectorConfig(payload) {\n    payload = payload || {};\n    let obj = {};\n    //properties that are equal to key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS.forEach(prop => {\n        if (payload.hasOwnProperty(prop)) {\n            obj[prop] = payload[prop];\n        }\n    });\n    //properties that start with key\n    CONNECTOR_CONFIG_EXPOSED_FIELDS_STARTSWITH.forEach(prop => {\n        Object.keys(payload).forEach(key => {\n            if (key.startsWith(prop) && !CONNECTOR_CONFIG_EXCEPTION_FIELDS.includes(key)) {\n                obj[key] = payload[key];\n            }\n        });\n    });\n\n    return obj;\n}\n\nfunction validatePayload(payload, payloadType, errorType, eventType) {\n    try {\n        Validator.validateClassObject(payload, payloadType);\n        return true;\n    } catch (e) {\n        if (errorType) {\n            dispatchError(errorType, e, eventType);\n        }\n        return false;\n    }\n}\n\n/*========================== Exported Functions ==========================*/\n/**\n * Initialize a vendor connector\n * @param {VendorConnector} connector\n */\nexport function initializeConnector(connector) {\n    vendorConnector = connector;\n    window.addEventListener('message', windowMessageHandler);\n}\n\n/**\n * Publish an event or error log to Salesforce\n * @param {object} param\n * @param {string} param.eventType Any event type to be logged\n * @param {object} param.payload Any payload for the log that needs to be logged\n * @param {boolean} param.isError\n */\nexport function publishLog({ eventType, payload, isError }) {\n    dispatchEventLog(eventType, payload, isError);\n}\n\n/**\n * Publish a telephony error to Salesforce\n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\"|\"AGENT_ERROR\"|\"SOFTPHONE_ERROR\")} param.eventType Event type to publish.\n * @param {object} param.error Error object representing the error\n */\nexport function publishError({ eventType, error }) {\n    if (error instanceof CustomError) {\n        dispatchCustomError(error, eventType);\n        return;\n    }\n\n    switch(eventType) {\n        case constants.EVENT_TYPE.LOGIN_RESULT:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_IN, error, constants.EVENT_TYPE.LOGIN_RESULT);\n            break;\n        case constants.EVENT_TYPE.LOGOUT_RESULT:\n            dispatchError(constants.ERROR_TYPE.CAN_NOT_LOG_OUT, error, constants.EVENT_TYPE.LOGOUT_RESULT);\n            break;\n        case constants.EVENT_TYPE.VOICE.CALL_STARTED:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.VOICE.CALL_STARTED);\n            break;\n        case constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED);\n            break;\n        case constants.EVENT_TYPE.VOICE.CALL_CONNECTED:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, error, constants.EVENT_TYPE.VOICE.CALL_CONNECTED);\n            break;\n        case constants.EVENT_TYPE.VOICE.HANGUP: \n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_END_THE_CALL, error, constants.EVENT_TYPE.VOICE.HANGUP);\n            break;\n        case constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED:\n            dispatchError(getErrorType(error) === constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT ? constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT : constants.ERROR_TYPE.VOICE.CAN_NOT_ADD_PARTICIPANT, error, constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED);\n            break;\n        case constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_CONNECT_PARTICIPANT, error, constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED);\n            break;\n        case constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_HANGUP_PARTICIPANT, error, constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED); \n            break;\n        case constants.EVENT_TYPE.VOICE.MUTE_TOGGLE:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_TOGGLE_MUTE, error, constants.EVENT_TYPE.VOICE.MUTE_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.VOICE.HOLD_TOGGLE: \n            dispatchError(getErrorType(error) === constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT ? constants.ERROR_TYPE.VOICE.INVALID_PARTICIPANT : constants.ERROR_TYPE.VOICE.CAN_NOT_TOGGLE_HOLD, error, constants.EVENT_TYPE.VOICE.HOLD_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_TOGGLE_RECORD, error, constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE);\n            break;\n        case constants.EVENT_TYPE.VOICE.PARTICIPANTS_SWAPPED: \n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_SWAP_PARTICIPANTS, error, constants.EVENT_TYPE.VOICE.PARTICIPANTS_SWAPPED);\n            break;\n        case constants.EVENT_TYPE.VOICE.PARTICIPANTS_CONFERENCED:\n            dispatchError(constants.ERROR_TYPE.VOICE.CAN_NOT_CONFERENCE, error, constants.EVENT_TYPE.VOICE.PARTICIPANTS_CONFERENCED);\n            break;\n        case constants.EVENT_TYPE.VOICE.AGENT_ERROR:\n            dispatchError(constants.ERROR_TYPE.VOICE.AGENT_ERROR, error, constants.EVENT_TYPE.VOICE.AGENT_ERROR);\n            break;\n        case constants.EVENT_TYPE.VOICE.SOFTPHONE_ERROR:\n            switch(getErrorType(error)) {\n                case constants.ERROR_TYPE.VOICE.UNSUPPORTED_BROWSER:\n                    dispatchError(constants.ERROR_TYPE.VOICE.UNSUPPORTED_BROWSER, error, constants.EVENT_TYPE.VOICE.SOFTPHONE_ERROR);\n                    break;\n                case constants.ERROR_TYPE.VOICE.MICROPHONE_NOT_SHARED:\n                    dispatchError(constants.ERROR_TYPE.VOICE.MICROPHONE_NOT_SHARED, error, constants.EVENT_TYPE.VOICE.SOFTPHONE_ERROR);\n                    break;\n                default:\n                    dispatchError(constants.ERROR_TYPE.GENERIC_ERROR, error, constants.EVENT_TYPE.VOICE.SOFTPHONE_ERROR);\n            }\n            break;\n        default:\n            console.error('Unhandled error scenario with arguments ', arguments);\n    }\n}\n\n/**\n * Publish an event to Sfdc. The event payload will be verified to be the correct type before being published. \n * @param {object} param\n * @param {(\"LOGIN_RESULT\"|\"LOGOUT_RESULT\"|\"CALL_STARTED\"|\"QUEUED_CALL_STARTED\"|\"CALL_CONNECTED\"|\"HANGUP\"|\"PARTICIPANT_CONNECTED\"|\"PARTICIPANT_ADDED\"|\"PARTICIPANTS_SWAPPED\"|\"PARTICIPANTS_CONFERENCED\"|\"MESSAGE\"|\"MUTE_TOGGLE\"|\"HOLD_TOGGLE\"|\"RECORDING_TOGGLE\")} param.eventType Event type to publish\n * @param {object} param.payload Payload for the event. Must to be an object of the payload class associated with the EVENT_TYPE else the event is NOT dispatched\n * @param {boolean} param.registerLog Boolean to opt out of registering logs for events\n * LOGIN_RESULT - GenericResult\n * LOGOUT_RESULT - LogoutResult\n * CALL_STARTED - CallResult\n * QUEUED_CALL_STARTED - CallResult\n * CALL_CONNECTED - CallResult\n * HANGUP - CallResult\n * PARTICIPANT_CONNECTED - ParticipantResult\n * PARTICIPANT_ADDED - ParticipantResult\n * PARTICIPANTS_SWAPPED - HoldToggleResult\n * PARTICIPANTS_CONFERENCED - HoldToggleResult\n * MESSAGE - object\n * MUTE_TOGGLE - MuteToggleResult\n * HOLD_TOGGLE - HoldToggleResult\n * RECORDING_TOGGLE - RecordingToggleResult\n */\nexport async function publishEvent({ eventType, payload, registerLog = true }) {\n    switch(eventType) {\n        case constants.EVENT_TYPE.LOGIN_RESULT: {\n            if (validatePayload(payload, GenericResult, constants.ERROR_TYPE.CAN_NOT_LOG_IN, constants.EVENT_TYPE.LOGIN_RESULT)) {\n                dispatchEvent(constants.EVENT_TYPE.LOGIN_RESULT, payload, registerLog);\n                if (payload.success) {\n                    setConnectorReady();\n                }\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.LOGOUT_RESULT:\n            if (validatePayload(payload, LogoutResult, constants.ERROR_TYPE.CAN_NOT_LOG_OUT, constants.EVENT_TYPE.LOGOUT_RESULT)) {\n                dispatchEvent(constants.EVENT_TYPE.LOGOUT_RESULT, {\n                    success: payload.success,\n                    loginFrameHeight: payload.loginFrameHeight\n                }, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.VOICE.CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.VOICE.CALL_STARTED)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.QUEUED_CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.EVENT_TYPE.VOICE.CALL_CONNECTED:\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.VOICE.CAN_NOT_START_THE_CALL, constants.EVENT_TYPE.VOICE.CALL_CONNECTED)) {\n                initAudioStats();\n                if (isSupervisorConnected) {\n                    const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                    const hangupPayload = await telephonyConnector.supervisorDisconnect();\n                    Validator.validateClassObject(hangupPayload, SupervisorHangupResult);\n                    isSupervisorConnected = false;\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP, hangupPayload, true /* ignoring registerLog for critical event*/);\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n                    break;\n                } \n                dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        case constants.EVENT_TYPE.VOICE.HANGUP: {\n            if (validatePayload(payload, HangupResult, constants.ERROR_TYPE.VOICE.CAN_NOT_END_THE_CALL, constants.EVENT_TYPE.VOICE.HANGUP)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.HANGUP, payload.calls, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED: {\n            if (validatePayload(payload, ParticipantResult, constants.ERROR_TYPE.VOICE.CAN_NOT_ADD_PARTICIPANT, constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED)) {\n                const { initialCallHasEnded, callInfo, phoneNumber, callId } = payload;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    phoneNumber,\n                    callId\n                }, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED: {\n            if (validatePayload(payload, ParticipantResult, constants.ERROR_TYPE.VOICE.CAN_NOT_CONNECT_PARTICIPANT, constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED)) {\n                const { initialCallHasEnded, callInfo, phoneNumber, callId } = payload;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED, {\n                    initialCallHasEnded,\n                    callInfo,\n                    phoneNumber,\n                    callId\n                }, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED: {\n            // TODO: The logic here needs to be modified. Ideally firing CallResult with \n            // correct participantType should do the trick but we are firing PARTICIPANT_CONNECTED because of a bug W-8601645\n            // Once the bug is fixed, this code needs to be updated\n            if (validatePayload(payload, CallResult, constants.ERROR_TYPE.VOICE.CAN_NOT_HANGUP_PARTICIPANT, constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED)) { \n                const { call } = payload;\n                const telephonyConnector = await vendorConnector.getTelephonyConnector();\n                const activeCallsResult = await telephonyConnector.getActiveCalls();\n                if (validatePayload(activeCallsResult, ActiveCallsResult)) {\n                    // when no more active calls, fire HANGUP\n                    const activeCalls = activeCallsResult.activeCalls;\n                    if (activeCalls.length === 0) {\n                        dispatchEvent(constants.EVENT_TYPE.VOICE.HANGUP, call, true /* ignoring registerLog for critical event*/);\n                    } else if (call && call.callAttributes && call.callAttributes.participantType === constants.PARTICIPANT_TYPE.INITIAL_CALLER) {\n                        // when there is still transfer call, based on the state of the transfer call, fire PARTICIPANT_ADDED or PARTICIPANT_CONNECTED\n                        const transferCall = Object.values(activeCalls).filter((obj) => obj['callType'] === constants.CALL_TYPE.ADD_PARTICIPANT).pop();\n                        const event = transferCall.state === constants.CALL_STATE.TRANSFERRING ? constants.EVENT_TYPE.VOICE.PARTICIPANT_ADDED : constants.EVENT_TYPE.VOICE.PARTICIPANT_CONNECTED;\n                        dispatchEvent(event, {\n                            initialCallHasEnded : true\n                        }, true /* ignoring registerLog for critical event*/)\n                    } else {\n                        dispatchEvent(constants.EVENT_TYPE.VOICE.PARTICIPANT_REMOVED, {\n                            reason: call? call.reason : null\n                        }, true /* ignoring registerLog for critical event*/);\n                    }\n                }\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.MESSAGE:\n            dispatchEvent(constants.EVENT_TYPE.MESSAGE, payload, registerLog);\n            break;\n        // TODO: Add validations for the ACW & Wrap up ended\n        case constants.EVENT_TYPE.VOICE.AFTER_CALL_WORK_STARTED:\n            dispatchEvent(constants.EVENT_TYPE.VOICE.AFTER_CALL_WORK_STARTED, payload, registerLog);\n            break;\n        case constants.EVENT_TYPE.VOICE.WRAP_UP_ENDED:\n            dispatchEvent(constants.EVENT_TYPE.VOICE.WRAP_UP_ENDED, payload, registerLog);\n            break;\n        /* This is only added to aid in connector development */\n        case constants.EVENT_TYPE.REMOTE_CONTROLLER:\n            channelMessageHandler(payload);\n            break;\n        case constants.EVENT_TYPE.VOICE.MUTE_TOGGLE:\n            if (validatePayload(payload, MuteToggleResult, constants.ERROR_TYPE.VOICE.CAN_NOT_TOGGLE_MUTE, constants.EVENT_TYPE.VOICE.MUTE_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.MUTE_TOGGLE, payload, registerLog);\n            }\n            break;\n        case constants.EVENT_TYPE.VOICE.HOLD_TOGGLE: {\n            const { isThirdPartyOnHold, isCustomerOnHold, calls} = payload;\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.VOICE.CAN_NOT_TOGGLE_HOLD, constants.EVENT_TYPE.VOICE.HOLD_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, registerLog);\n            }\n            break;\n        }\n        case constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE: {\n            const { isRecordingPaused,\n                contactId,\n                initialContactId,\n                instanceId,\n                region\n            } = payload;\n            if (validatePayload(payload, RecordingToggleResult, constants.ERROR_TYPE.VOICE.CAN_NOT_TOGGLE_RECORD, constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.RECORDING_TOGGLE, {\n                    isRecordingPaused,\n                    contactId,\n                    initialContactId,\n                    instanceId,\n                    region\n                }, registerLog);\n            }\n        break;\n        }\n        case constants.EVENT_TYPE.VOICE.PARTICIPANTS_SWAPPED: {\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.VOICE.CAN_NOT_SWAP_PARTICIPANTS, constants.EVENT_TYPE.VOICE.PARTICIPANTS_SWAPPED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold, calls } = payload;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold,\n                    calls\n                }, true /* ignoring registerLog for critical event*/);\n            }\n        }\n        break;\n        case constants.EVENT_TYPE.VOICE.PARTICIPANTS_CONFERENCED: {\n            if (validatePayload(payload, HoldToggleResult, constants.ERROR_TYPE.VOICE.CAN_NOT_CONFERENCE, constants.EVENT_TYPE.VOICE.PARTICIPANTS_CONFERENCED)) {\n                const { isThirdPartyOnHold, isCustomerOnHold } = payload;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.HOLD_TOGGLE, {\n                    isThirdPartyOnHold,\n                    isCustomerOnHold\n                }, true /* ignoring registerLog for critical event*/);\n            }\n        break;\n        }\n        case constants.EVENT_TYPE.VOICE.UPDATE_AUDIO_STATS: {\n            if (validatePayload(payload, AudioStats)) {\n                if (payload.stats) {\n                    updateAudioStats(payload.stats);\n                }\n                if (payload.isAudioStatsCompleted && payload.callId) {\n                    const callId = payload.callId;\n                    const mos = getMOS();\n                    dispatchEvent(constants.EVENT_TYPE.VOICE.UPDATE_AUDIO_STATS_COMPLETED, {callId, mos}, registerLog);\n                }\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.VOICE.SUPERVISOR_BARGED_IN: {\n            if (validatePayload(payload, SuperviseCallResult, constants.ERROR_TYPE.VOICE.CAN_NOT_BARGE_IN_SUPERVISOR, constants.EVENT_TYPE.VOICE.SUPERVISOR_BARGED_IN)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_BARGED_IN, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.VOICE.CALL_BARGED_IN: {\n            if (validatePayload(payload, SupervisedCallInfo,  constants.ERROR_TYPE.GENERIC_ERROR, constants.EVENT_TYPE.VOICE.CALL_BARGED_IN)) {\n                dispatchEvent(constants.EVENT_TYPE.VOICE.CALL_BARGED_IN, payload, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_STARTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.ERROR_TYPE.VOICE.CAN_NOT_SUPERVISE_CALL, constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_STARTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_STARTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_CONNECTED: {\n            if (validatePayload(payload, SuperviseCallResult,  constants.ERROR_TYPE.VOICE.CAN_NOT_SUPERVISE_CALL, constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_CONNECTED)) {\n                isSupervisorConnected = true;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_CALL_CONNECTED, payload.call, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP: {\n            if (validatePayload(payload, SupervisorHangupResult,  constants.ERROR_TYPE.VOICE.CAN_NOT_DISCONNECT_SUPERVISOR, constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP)) {\n                isSupervisorConnected = false;\n                dispatchEvent(constants.EVENT_TYPE.VOICE.SUPERVISOR_HANGUP, payload.calls, true /* ignoring registerLog for critical event*/);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.SET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentStatusInfo,  constants.ERROR_TYPE.CAN_NOT_SET_AGENT_STATUS, constants.EVENT_TYPE.SET_AGENT_STATUS)) {\n                const statusId = payload.statusId;\n                dispatchEvent(constants.EVENT_TYPE.SET_AGENT_STATUS, { statusId }, registerLog);\n            }\n            break;\n        }\n\n        case constants.EVENT_TYPE.VOICE.SHOW_TRANSFER_VIEW: {\n            dispatchEvent(constants.EVENT_TYPE.VOICE.SHOW_TRANSFER_VIEW, payload);\n            break;\n        }\n\n        case constants.EVENT_TYPE.STORAGE_ACCESS_RESULT: {\n            if(validatePayload(payload, ShowStorageAccessResult, constants.ERROR_TYPE.INVALID_STORAGE_ACCESS_RESULT, constants.EVENT_TYPE.STORAGE_ACCESS_RESULT)) {\n                dispatchEvent(constants.EVENT_TYPE.STORAGE_ACCESS_RESULT, payload);\n                if(payload.success) {\n                    if (payload.showLogin) {\n                        dispatchEvent(constants.EVENT_TYPE.SHOW_LOGIN, {\n                            loginFrameHeight: payload.loginFrameHeight\n                        }, registerLog);\n                    } else {\n                        setConnectorReady();\n                    }   \n                }\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.EVENT_TYPE.GET_AGENT_STATUS: {\n            if (validatePayload(payload, AgentVendorStatusInfo, constants.ERROR_TYPE.CAN_NOT_GET_AGENT_STATUS, constants.EVENT_TYPE.GET_AGENT_STATUS)) {\n                dispatchEvent(constants.EVENT_TYPE.GET_AGENT_STATUS, payload, registerLog);\n            }\n            break;\n        }\n\n        /**\n         * NOTE: SALESFORCE INTERNAL USE ONLY\n         */\n        case constants.EVENT_TYPE.STATE_CHANGE: {\n            if(validatePayload(payload, StateChangeResult, constants.ERROR_TYPE.INVALID_STATE_CHANGE_RESULT, constants.EVENT_TYPE.STATE_CHANGE)) {\n                dispatchEvent(constants.EVENT_TYPE.STATE_CHANGE, payload);\n            }\n            break;\n        }\n    }\n}"],"sourceRoot":""}